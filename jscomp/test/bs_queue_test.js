// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Mt = require("./mt.js");
var Curry = require("../../lib/js/curry.js");
var Caml_obj = require("../../lib/js/caml_obj.js");
var Belt_Array = require("../../lib/js/belt_Array.js");
var Belt_MutableQueue = require("../../lib/js/belt_MutableQueue.js");

var suites = {
  contents: /* [] */0
};

var test_id = {
  contents: 0
};

function eq(loc, x, y) {
  Mt.eq_suites(test_id, suites, loc, x, y);
}

function b(loc, x) {
  Mt.bool_suites(test_id, suites, loc, x);
}

function does_raise(f, q) {
  try {
    Curry._1(f, q);
    return false;
  }
  catch (exn){
    return true;
  }
}

function $plus$plus(q, x) {
  Belt_MutableQueue.add(q, x);
  return q;
}

var q = {
  length: 0,
  first: undefined,
  last: undefined
};

if (!(Caml_obj.equal(Belt_MutableQueue.toArray(q), []) && q.length === 0)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 25, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!(Caml_obj.equal(Belt_MutableQueue.toArray((Belt_MutableQueue.add(q, 1), q)), [1]) && q.length === 1)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 26, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!(Caml_obj.equal(Belt_MutableQueue.toArray((Belt_MutableQueue.add(q, 2), q)), [
          1,
          2
        ]) && q.length === 2)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 27, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!(Caml_obj.equal(Belt_MutableQueue.toArray((Belt_MutableQueue.add(q, 3), q)), [
          1,
          2,
          3
        ]) && q.length === 3)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 28, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!(Caml_obj.equal(Belt_MutableQueue.toArray((Belt_MutableQueue.add(q, 4), q)), [
          1,
          2,
          3,
          4
        ]) && q.length === 4)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 29, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.popExn(q) !== 1) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 30, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!(Caml_obj.equal(Belt_MutableQueue.toArray(q), [
          2,
          3,
          4
        ]) && q.length === 3)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 31, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.popExn(q) !== 2) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 32, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!(Caml_obj.equal(Belt_MutableQueue.toArray(q), [
          3,
          4
        ]) && q.length === 2)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 33, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.popExn(q) !== 3) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 34, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!(Caml_obj.equal(Belt_MutableQueue.toArray(q), [4]) && q.length === 1)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 35, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.popExn(q) !== 4) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 36, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!(Caml_obj.equal(Belt_MutableQueue.toArray(q), []) && q.length === 0)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 37, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!does_raise(Belt_MutableQueue.popExn, q)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 38, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

var q$1 = {
  length: 0,
  first: undefined,
  last: undefined
};

if (Belt_MutableQueue.popExn((Belt_MutableQueue.add(q$1, 1), q$1)) !== 1) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 43, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!does_raise(Belt_MutableQueue.popExn, q$1)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 44, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.popExn((Belt_MutableQueue.add(q$1, 2), q$1)) !== 2) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 45, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!does_raise(Belt_MutableQueue.popExn, q$1)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 46, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q$1.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 47, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

var q$2 = {
  length: 0,
  first: undefined,
  last: undefined
};

if (Belt_MutableQueue.peekExn((Belt_MutableQueue.add(q$2, 1), q$2)) !== 1) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 52, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.peekExn((Belt_MutableQueue.add(q$2, 2), q$2)) !== 1) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 53, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.peekExn((Belt_MutableQueue.add(q$2, 3), q$2)) !== 1) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 54, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.peekExn(q$2) !== 1) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 55, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.popExn(q$2) !== 1) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 56, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.peekExn(q$2) !== 2) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 57, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.popExn(q$2) !== 2) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 58, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.peekExn(q$2) !== 3) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 59, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.popExn(q$2) !== 3) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 60, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!does_raise(Belt_MutableQueue.peekExn, q$2)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 61, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!does_raise(Belt_MutableQueue.peekExn, q$2)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 62, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

var q$3 = {
  length: 0,
  first: undefined,
  last: undefined
};

for(var i = 1; i <= 10; ++i){
  Belt_MutableQueue.add(q$3, i);
}

Belt_MutableQueue.clear(q$3);

if (q$3.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 71, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!does_raise(Belt_MutableQueue.popExn, q$3)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 72, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(q$3, {
        length: 0,
        first: undefined,
        last: undefined
      })) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 73, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

Belt_MutableQueue.add(q$3, 42);

if (Belt_MutableQueue.popExn(q$3) !== 42) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 75, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

var q1 = {
  length: 0,
  first: undefined,
  last: undefined
};

for(var i$1 = 1; i$1 <= 10; ++i$1){
  Belt_MutableQueue.add(q1, i$1);
}

var q2 = Belt_MutableQueue.copy(q1);

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q1), [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 84, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q2), [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 85, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q1.length !== 10) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 86, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q2.length !== 10) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 87, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

for(var i$2 = 1; i$2 <= 10; ++i$2){
  if (Belt_MutableQueue.popExn(q1) !== i$2) {
    throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 89, Col: 4", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
  }
  
}

for(var i$3 = 1; i$3 <= 10; ++i$3){
  if (Belt_MutableQueue.popExn(q2) !== i$3) {
    throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 92, Col: 4", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
  }
  
}

var q$4 = {
  length: 0,
  first: undefined,
  last: undefined
};

if (q$4.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 98, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

for(var i$4 = 1; i$4 <= 10; ++i$4){
  Belt_MutableQueue.add(q$4, i$4);
  if (q$4.length !== i$4) {
    throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 101, Col: 4", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
  }
  if (q$4.length === 0) {
    throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 102, Col: 4", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
  }
  
}

for(var i$5 = 10; i$5 >= 1; --i$5){
  if (q$4.length !== i$5) {
    throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 105, Col: 4", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
  }
  if (q$4.length === 0) {
    throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 106, Col: 4", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
  }
  Belt_MutableQueue.popExn(q$4);
}

if (q$4.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 109, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q$4.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 110, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

var q$5 = {
  length: 0,
  first: undefined,
  last: undefined
};

for(var i$6 = 1; i$6 <= 10; ++i$6){
  Belt_MutableQueue.add(q$5, i$6);
}

var i$7 = {
  contents: 1
};

Belt_MutableQueue.forEach(q$5, (function (j) {
        if (i$7.contents !== j) {
          throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 120, Col: 4", {
                    cause: {
                      RE_EXN_ID: "Assertion_failure"
                    }
                  });
        }
        i$7.contents = i$7.contents + 1 | 0;
      }));

var q1$1 = {
  length: 0,
  first: undefined,
  last: undefined
};

var q2$1 = {
  length: 0,
  first: undefined,
  last: undefined
};

if (q1$1.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 127, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q1$1), [])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 128, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q2$1.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 129, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q2$1), [])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 130, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

Belt_MutableQueue.transfer(q1$1, q2$1);

if (q1$1.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 132, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q1$1), [])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 133, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q2$1.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 134, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q2$1), [])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 135, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

var q1$2 = {
  length: 0,
  first: undefined,
  last: undefined
};

var q2$2 = {
  length: 0,
  first: undefined,
  last: undefined
};

for(var i$8 = 1; i$8 <= 4; ++i$8){
  Belt_MutableQueue.add(q1$2, i$8);
}

if (q1$2.length !== 4) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 143, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q1$2), [
        1,
        2,
        3,
        4
      ])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 144, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q2$2.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 145, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q2$2), [])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 146, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

Belt_MutableQueue.transfer(q1$2, q2$2);

if (q1$2.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 148, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q1$2), [])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 149, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q2$2.length !== 4) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 150, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q2$2), [
        1,
        2,
        3,
        4
      ])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 151, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

var q1$3 = {
  length: 0,
  first: undefined,
  last: undefined
};

var q2$3 = {
  length: 0,
  first: undefined,
  last: undefined
};

for(var i$9 = 5; i$9 <= 8; ++i$9){
  Belt_MutableQueue.add(q2$3, i$9);
}

if (q1$3.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 159, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q1$3), [])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 160, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q2$3.length !== 4) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 161, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q2$3), [
        5,
        6,
        7,
        8
      ])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 162, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

Belt_MutableQueue.transfer(q1$3, q2$3);

if (q1$3.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 164, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q1$3), [])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 165, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q2$3.length !== 4) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 166, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q2$3), [
        5,
        6,
        7,
        8
      ])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 167, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

var q1$4 = {
  length: 0,
  first: undefined,
  last: undefined
};

var q2$4 = {
  length: 0,
  first: undefined,
  last: undefined
};

for(var i$10 = 1; i$10 <= 4; ++i$10){
  Belt_MutableQueue.add(q1$4, i$10);
}

for(var i$11 = 5; i$11 <= 8; ++i$11){
  Belt_MutableQueue.add(q2$4, i$11);
}

if (q1$4.length !== 4) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 178, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q1$4), [
        1,
        2,
        3,
        4
      ])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 179, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (q2$4.length !== 4) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 180, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q2$4), [
        5,
        6,
        7,
        8
      ])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 181, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

Belt_MutableQueue.transfer(q1$4, q2$4);

if (q1$4.length !== 0) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 183, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q1$4), [])) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 184, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

var v = [
  5,
  6,
  7,
  8,
  1,
  2,
  3,
  4
];

if (q2$4.length !== 8) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 186, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (!Caml_obj.equal(Belt_MutableQueue.toArray(q2$4), v)) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 187, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

if (Belt_MutableQueue.reduce(q2$4, 0, (function (x, y) {
          return x - y | 0;
        })) !== Belt_Array.reduce(v, 0, (function (x, y) {
          return x - y | 0;
        }))) {
  throw new Error("Assertion Failure. File: bs_queue_test.res, Line: 189, Col: 2", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

console.log("OK");

var q$6 = Belt_MutableQueue.fromArray([
      1,
      2,
      3,
      4
    ]);

var q1$5 = Belt_MutableQueue.map(q$6, (function (x) {
        return x - 1 | 0;
      }));

eq("File \"bs_queue_test.res\", line 197, characters 5-12", Belt_MutableQueue.toArray(q1$5), [
      0,
      1,
      2,
      3
    ]);

var q$7 = Belt_MutableQueue.fromArray([]);

b("File \"bs_queue_test.res\", line 198, characters 4-11", q$7.length === 0);

var q$8 = Belt_MutableQueue.map(Belt_MutableQueue.fromArray([]), (function (x) {
        return x + 1 | 0;
      }));

b("File \"bs_queue_test.res\", line 199, characters 4-11", q$8.length === 0);

Mt.from_pair_suites("Bs_queue_test", suites.contents);

var Q;

exports.suites = suites;
exports.test_id = test_id;
exports.eq = eq;
exports.b = b;
exports.Q = Q;
exports.does_raise = does_raise;
exports.$plus$plus = $plus$plus;
/*  Not a pure module */
