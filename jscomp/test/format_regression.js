// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("../../lib/js/curry.js");

function peek_queue(param) {
  throw new Error("Assertion Failure. File: format_regression.res, Line: 10, Col: 22", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

function int_of_size(param) {
  throw new Error("Assertion Failure. File: format_regression.res, Line: 11, Col: 23", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

function take_queue(param) {
  throw new Error("Assertion Failure. File: format_regression.res, Line: 12, Col: 22", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

function format_pp_token(param, param$1) {
  throw new Error("Assertion Failure. File: format_regression.res, Line: 13, Col: 32", {
            cause: {
              RE_EXN_ID: "Assertion_failure"
            }
          });
}

function advance_loop(state) {
  while(true) {
    throw new Error("Assertion Failure. File: format_regression.res, Line: 10, Col: 22", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
    throw new Error("Assertion Failure. File: format_regression.res, Line: 11, Col: 23", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
    if (size < 0 && (state.pp_right_total - state.pp_left_total | 0) < state.pp_space_left) {
      return ;
    }
    throw new Error("Assertion Failure. File: format_regression.res, Line: 12, Col: 22", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
    size < 0;
    throw new Error("Assertion Failure. File: format_regression.res, Line: 13, Col: 32", {
              cause: {
                RE_EXN_ID: "Assertion_failure"
              }
            });
    Curry._1(undefined, match.token);
    state.pp_left_total = match.length + state.pp_left_total | 0;
    continue ;
  };
}

var pp_infinity = 1000000010;

exports.peek_queue = peek_queue;
exports.int_of_size = int_of_size;
exports.take_queue = take_queue;
exports.format_pp_token = format_pp_token;
exports.pp_infinity = pp_infinity;
exports.advance_loop = advance_loop;
/* No side effect */
