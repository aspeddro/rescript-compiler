// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Os from "os";
import * as Exn from "rescript/lib/es6/Exn.js";
import * as List from "rescript/lib/es6/List.js";
import * as Path from "path";
import * as $$Array from "rescript/lib/es6/Array.js";
import * as $$Error from "rescript/lib/es6/Error.js";
import * as Belt_List from "rescript/lib/es6/Belt_List.js";
import * as ArrayUtils from "./ArrayUtils.res.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as SpawnAsync from "./SpawnAsync.res.mjs";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";
import * as RescriptTools_Docgen from "rescript/lib/es6/RescriptTools_Docgen.js";

let bscBin = Path.join("cli", "bsc");

function getOutput(buffer) {
  return buffer.map(e => e.toString()).join("");
}

async function extractDocFromFile(file) {
  let toolsBin = Path.join(process.cwd(), "cli", "rescript-tools");
  let match = await SpawnAsync.run(toolsBin, [
    "doc",
    file
  ], undefined);
  try {
    return RescriptTools_Docgen.decodeFromJson(JSON.parse(getOutput(match.stdout)));
  } catch (raw_exn) {
    let exn = Primitive_exceptions.internalToException(raw_exn);
    if (exn.RE_EXN_ID === Exn.$$Error) {
      return $$Error.panic("Failed to generate docstrings from " + file);
    }
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "DocTest.res",
        35,
        9
      ],
      Error: new Error()
    };
  }
}

function getExamples(param) {
  let loop = (_items, _acc) => {
    while (true) {
      let acc = _acc;
      let items = _items;
      if (!items) {
        return acc;
      }
      let match = items.hd;
      switch (match.kind) {
        case "value" :
          _acc = {
            hd: {
              id: match.id,
              kind: "value",
              name: match.name,
              docstrings: match.docstrings
            },
            tl: acc
          };
          _items = items.tl;
          continue;
        case "type" :
          _acc = {
            hd: {
              id: match.id,
              kind: "type",
              name: match.name,
              docstrings: match.docstrings
            },
            tl: acc
          };
          _items = items.tl;
          continue;
        case "module" :
          _acc = {
            hd: {
              id: match.id,
              kind: "module",
              name: match.name,
              docstrings: match.docstrings
            },
            tl: acc
          };
          _items = Belt_List.concatMany([
            items.tl,
            List.fromArray(match.items)
          ]);
          continue;
        case "moduleType" :
          _acc = {
            hd: {
              id: match.id,
              kind: "moduleType",
              name: match.name,
              docstrings: match.docstrings
            },
            tl: acc
          };
          _items = Belt_List.concatMany([
            items.tl,
            List.fromArray(match.items)
          ]);
          continue;
        case "moduleAlias" :
          _acc = {
            hd: {
              id: match.id,
              kind: "moduleAlias",
              name: match.name,
              docstrings: match.docstrings
            },
            tl: acc
          };
          _items = Belt_List.concatMany([
            items.tl,
            List.fromArray(match.items)
          ]);
          continue;
      }
    };
  };
  return List.toArray(loop(List.fromArray(param.items), /* [] */0)).filter(param => param.docstrings.length > 0);
}

function getCodeBlocks(example) {
  let loopEndCodeBlock = (_lines, _acc) => {
    while (true) {
      let acc = _acc;
      let lines = _lines;
      if (!lines) {
        return Pervasives.panic("Failed to find end of code block for " + example.kind + ": " + example.id);
      }
      let hd = lines.hd;
      if (hd.trim().endsWith("```")) {
        return acc;
      }
      _acc = {
        hd: hd,
        tl: acc
      };
      _lines = lines.tl;
      continue;
    };
  };
  let loop = (_lines, _acc) => {
    while (true) {
      let acc = _acc;
      let lines = _lines;
      if (!lines) {
        return acc;
      }
      let rest = lines.tl;
      if (lines.hd.trim().startsWith("```res")) {
        let code = loopEndCodeBlock(rest, /* [] */0);
        _acc = {
          hd: List.toArray(List.reverse(code)).join("\n"),
          tl: acc
        };
        _lines = rest;
        continue;
      }
      _lines = rest;
      continue;
    };
  };
  return Belt_Array.reverse(List.toArray(loop(List.fromArray($$Array.reduce(example.docstrings, [], (acc, docstring) => acc.concat(docstring.split("\n")))), /* [] */0))).join("\n\n");
}

let batchSize = Os.cpus().length;

async function extractExamples() {
  let files = Fs.readdirSync("runtime");
  let docFiles = files.filter(f => {
    if (f.startsWith("Js") || f.startsWith("RescriptTools")) {
      return false;
    } else if (f.endsWith(".resi")) {
      return true;
    } else if (f.endsWith(".res")) {
      return !files.includes(f + "i");
    } else {
      return false;
    }
  });
  console.log("Extracting examples from " + docFiles.length.toString() + " runtime files...");
  let examples = [];
  await ArrayUtils.forEachAsyncInBatches(docFiles, batchSize, async f => {
    let doc = await extractDocFromFile(Path.join("runtime", f));
    examples.push(...getExamples(doc));
  });
  return examples;
}

async function compileTest(code) {
  let args = [
    "-w",
    "-3-109-44",
    "-e",
    code
  ];
  let match = await SpawnAsync.run(bscBin, args, undefined);
  let stderr = match.stderr;
  if (stderr.length > 0) {
    return {
      TAG: "Error",
      _0: getOutput(stderr)
    };
  } else {
    return {
      TAG: "Ok",
      _0: getOutput(match.stdout)
    };
  }
}

async function compileExamples(examples) {
  console.log("Compiling " + examples.length.toString() + " examples from docstrings...");
  let compiled = [];
  let compilationErrors = [];
  await ArrayUtils.forEachAsyncInBatches(examples, batchSize, async example => {
    let rescriptCode = getCodeBlocks(example);
    let jsCode = await compileTest(rescriptCode);
    if (jsCode.TAG === "Ok") {
      compiled.push([
        example,
        rescriptCode,
        jsCode._0
      ]);
      return;
    }
    compilationErrors.push([
      example,
      {
        TAG: "ReScriptError",
        _0: jsCode._0
      }
    ]);
  });
  return [
    compiled,
    compilationErrors
  ];
}

async function runtimeTests(code) {
  let match = await SpawnAsync.run("node", [
    "-e",
    code,
    "--input-type",
    "commonjs"
  ], {
    cwd: process.cwd(),
    timeout: 2000
  });
  let exitCode = match.code;
  let stderr = match.stderr;
  let stdout = match.stdout;
  let std;
  let exit = 0;
  if (exitCode !== null) {
    if (exitCode === 0.0 && stderr.length > 0) {
      std = {
        TAG: "Ok",
        _0: stderr
      };
    } else if (exitCode === 0.0) {
      std = {
        TAG: "Ok",
        _0: stdout
      };
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    std = {
      TAG: "Error",
      _0: stderr.length > 0 ? stderr : stdout
    };
  }
  if (std.TAG === "Ok") {
    return {
      TAG: "Ok",
      _0: getOutput(std._0)
    };
  } else {
    return {
      TAG: "Error",
      _0: getOutput(std._0)
    };
  }
}

async function runExamples(compiled) {
  console.log("Running " + compiled.length.toString() + " compiled examples...");
  let runtimeErrors = [];
  await ArrayUtils.forEachAsyncInBatches(compiled, batchSize, async compiled => {
    let jsCode = compiled[2];
    let error = await runtimeTests(jsCode);
    if (error.TAG === "Ok") {
      return;
    }
    let runtimeError_0 = compiled[1];
    let runtimeError_2 = error._0;
    let runtimeError = {
      TAG: "RuntimeError",
      rescript: runtimeError_0,
      js: jsCode,
      error: runtimeError_2
    };
    runtimeErrors.push([
      compiled[0],
      runtimeError
    ]);
  });
  return runtimeErrors;
}

function indentOutputCode(code) {
  let indent = " ".repeat(2);
  return code.split("\n").map(s => indent + s).join("\n");
}

function printErrors(errors) {
  errors.forEach(param => {
    let errors = param[1];
    let example = param[0];
    let cyan = s => "\x1b[36m" + s + "\x1b[0m";
    let other = example.kind;
    let kind = other === "moduleAlias" ? "module alias" : other;
    let a;
    if (errors.TAG === "ReScriptError") {
      let err = errors._0.split("\n").filter((param, i) => i !== 2).join("\n");
      a = "\x1B[1;31merror\x1B[0m: failed to compile examples from " + kind + " " + cyan(example.id) + "\n" + err;
    } else {
      let indent = " ".repeat(2);
      a = "\x1B[1;31mruntime error\x1B[0m: failed to run examples from " + kind + " " + cyan(example.id) + "\n\n" + indent + "\x1b[36mReScript\x1b[0m\n\n" + indentOutputCode(errors.rescript) + "\n\n" + indent + "\x1b[36mCompiled Js\x1b[0m\n\n" + indentOutputCode(errors.js) + "\n\n" + indent + "\x1B[1;31mstacktrace\x1B[0m\n\n" + indentOutputCode(errors.error) + "\n";
    }
    process.stderr.write(a);
  });
}

async function main() {
  let examples = await extractExamples();
  let match = await compileExamples(examples);
  let runtimeErrors = await runExamples(match[0]);
  let allErrors = runtimeErrors.concat(match[1]);
  if (allErrors.length > 0) {
    printErrors(allErrors);
    return 1;
  } else {
    console.log("All examples passed successfully");
    return 0;
  }
}

let exitCode = await main();

process.exit(exitCode);

/* bscBin Not a pure module */
