// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Exn from "rescript/lib/es6/Exn.js";
import * as Int from "rescript/lib/es6/Int.js";
import * as Dict from "rescript/lib/es6/Dict.js";
import * as $$JSON from "rescript/lib/es6/JSON.js";
import * as List from "rescript/lib/es6/List.js";
import * as $$Math from "rescript/lib/es6/Math.js";
import * as Null from "rescript/lib/es6/Null.js";
import * as Type from "rescript/lib/es6/Type.js";
import * as $$Array from "rescript/lib/es6/Array.js";
import * as $$Error from "rescript/lib/es6/Error.js";
import * as Float from "rescript/lib/es6/Float.js";
import * as Mocha from "mocha";
import * as Option from "rescript/lib/es6/Option.js";
import * as Result from "rescript/lib/es6/Result.js";
import * as $$String from "rescript/lib/es6/String.js";
import * as Belt_Id from "rescript/lib/es6/Belt_Id.js";
import * as $$Promise from "rescript/lib/es6/Promise.js";
import * as Belt_Int from "rescript/lib/es6/Belt_Int.js";
import * as Belt_Map from "rescript/lib/es6/Belt_Map.js";
import * as Belt_Set from "rescript/lib/es6/Belt_Set.js";
import * as $$Iterator from "rescript/lib/es6/Iterator.js";
import * as Nullable from "rescript/lib/es6/Nullable.js";
import * as Belt_List from "rescript/lib/es6/Belt_List.js";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/Belt_Float.js";
import * as Belt_Range from "rescript/lib/es6/Belt_Range.js";
import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Belt_MapInt from "rescript/lib/es6/Belt_MapInt.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/Belt_Result.js";
import * as Belt_HashMap from "rescript/lib/es6/Belt_HashMap.js";
import * as Belt_HashSet from "rescript/lib/es6/Belt_HashSet.js";
import * as Belt_MapDict from "rescript/lib/es6/Belt_MapDict.js";
import * as Belt_SetDict from "rescript/lib/es6/Belt_SetDict.js";
import * as $$AsyncIterator from "rescript/lib/es6/AsyncIterator.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Belt_MapString from "rescript/lib/es6/Belt_MapString.js";
import * as Belt_SortArray from "rescript/lib/es6/Belt_SortArray.js";
import * as Belt_MutableSet from "rescript/lib/es6/Belt_MutableSet.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

Mocha.describe("Array.at", () => {
  Mocha.test("Array.at", () => {
    Pervasives.assertEqual([
      "a",
      "b",
      "c"
    ].at(0), "a");
    Pervasives.assertEqual([
      "a",
      "b",
      "c"
    ].at(2), "c");
    Pervasives.assertEqual([
      "a",
      "b",
      "c"
    ].at(3), undefined);
    Pervasives.assertEqual([
      "a",
      "b",
      "c"
    ].at(-1), "c");
    Pervasives.assertEqual([
      "a",
      "b",
      "c"
    ].at(-3), "a");
    Pervasives.assertEqual([
      "a",
      "b",
      "c"
    ].at(-4), undefined);
  });
});

Mocha.describe("Array.concat", () => {
  Mocha.test("Array.concat", () => {
    let array1 = [
      "hi",
      "hello"
    ];
    let array2 = [
      "yay",
      "wehoo"
    ];
    let someArray = array1.concat(array2);
    Pervasives.assertEqual(someArray, [
      "hi",
      "hello",
      "yay",
      "wehoo"
    ]);
  });
});

Mocha.describe("Array.concatMany", () => {
  Mocha.test("Array.concatMany", () => {
    let array1 = [
      "hi",
      "hello"
    ];
    let array2 = ["yay"];
    let array3 = ["wehoo"];
    let someArray = array1.concat(array2, array3);
    console.log(someArray);
  });
});

Mocha.describe("Array.copy", () => {
  Mocha.test("Array.copy", () => {
    let myArray = [
      1,
      2,
      3
    ];
    let copyOfMyArray = myArray.slice();
    Pervasives.assertEqual(copyOfMyArray, [
      1,
      2,
      3
    ]);
    Pervasives.assertEqual(myArray === copyOfMyArray, false);
  });
});

Mocha.describe("Array.every", () => {
  Mocha.test("Array.every", () => {
    let array = [
      1,
      2,
      3,
      4
    ];
    Pervasives.assertEqual(array.every(num => num <= 4), true);
    Pervasives.assertEqual(array.every(num => num === 1), false);
  });
});

Mocha.describe("Array.everyWithIndex", () => {
  Mocha.test("Array.everyWithIndex", () => {
    let array = [
      1,
      2,
      3,
      4
    ];
    Pervasives.assertEqual(array.every((num, index) => {
      if (index < 5) {
        return num <= 4;
      } else {
        return false;
      }
    }), true);
    Pervasives.assertEqual(array.every((num, index) => {
      if (index < 2) {
        return num >= 2;
      } else {
        return false;
      }
    }), false);
  });
});

Mocha.describe("Array.fill", () => {
  Mocha.test("Array.fill", () => {
    let myArray = [
      1,
      2,
      3,
      4
    ];
    myArray.fill(9, 1, 3);
    Pervasives.assertEqual(myArray, [
      1,
      9,
      9,
      4
    ]);
  });
});

Mocha.describe("Array.fillAll", () => {
  Mocha.test("Array.fillAll", () => {
    let myArray = [
      1,
      2,
      3,
      4
    ];
    myArray.fill(9);
    Pervasives.assertEqual(myArray, [
      9,
      9,
      9,
      9
    ]);
  });
});

Mocha.describe("Array.fillToEnd", () => {
  Mocha.test("Array.fillToEnd", () => {
    let myArray = [
      1,
      2,
      3,
      4
    ];
    myArray.fill(9, 1);
    Pervasives.assertEqual(myArray, [
      1,
      9,
      9,
      9
    ]);
  });
});

Mocha.describe("Array.filter", () => {
  Mocha.test("Array.filter", () => {
    Pervasives.assertEqual([
      1,
      2,
      3,
      4
    ].filter(num => num > 2), [
      3,
      4
    ]);
  });
});

Mocha.describe("Array.filterMap", () => {
  Mocha.test("Array.filterMap", () => {
    Pervasives.assertEqual($$Array.filterMap([
      "Hello",
      "Hi",
      "Good bye"
    ], item => {
      if (item === "Hello") {
        return item.length;
      }
      
    }), [5]);
    Pervasives.assertEqual($$Array.filterMap([
      1,
      2,
      3,
      4,
      5,
      6
    ], n => {
      if (n % 2 === 0) {
        return Math.imul(n, n);
      }
      
    }), [
      4,
      16,
      36
    ]);
    Pervasives.assertEqual($$Array.filterMap([
      1,
      2,
      3,
      4,
      5,
      6
    ], param => {}), []);
    Pervasives.assertEqual($$Array.filterMap([], n => {
      if (n % 2 === 0) {
        return Math.imul(n, n);
      }
      
    }), []);
  });
});

Mocha.describe("Array.filterWithIndex", () => {
  Mocha.test("Array.filterWithIndex", () => {
    Pervasives.assertEqual([
      1,
      2,
      3,
      4
    ].filter((num, index) => {
      if (index === 0) {
        return true;
      } else {
        return num === 2;
      }
    }), [
      1,
      2
    ]);
  });
});

Mocha.describe("Array.find", () => {
  Mocha.test("Array.find", () => {
    let array = [
      "ReScript",
      "TypeScript",
      "JavaScript"
    ];
    Pervasives.assertEqual(array.find(item => item === "ReScript"), "ReScript");
  });
});

Mocha.describe("Array.findIndex", () => {
  Mocha.test("Array.findIndex", () => {
    let array = [
      "ReScript",
      "JavaScript"
    ];
    Pervasives.assertEqual(array.findIndex(item => item === "ReScript"), 0);
    Pervasives.assertEqual(array.findIndex(item => item === "TypeScript"), -1);
  });
});

Mocha.describe("Array.findIndexOpt", () => {
  Mocha.test("Array.findIndexOpt", () => {
    let array = [
      "ReScript",
      "TypeScript",
      "JavaScript"
    ];
    Pervasives.assertEqual($$Array.findIndexOpt(array, item => item === "ReScript"), 0);
  });
});

Mocha.describe("Array.findIndexWithIndex", () => {
  Mocha.test("Array.findIndexWithIndex", () => {
    let array = [
      "ReScript",
      "JavaScript"
    ];
    let isReScriptFirst = array.findIndex((item, index) => {
      if (index === 0) {
        return item === "ReScript";
      } else {
        return false;
      }
    });
    let isTypeScriptFirst = array.findIndex((item, index) => {
      if (index === 0) {
        return item === "TypeScript";
      } else {
        return false;
      }
    });
    Pervasives.assertEqual(isReScriptFirst, 0);
    Pervasives.assertEqual(isTypeScriptFirst, -1);
  });
});

Mocha.describe("Array.findMap", () => {
  Mocha.test("Array.findMap", () => {
    Pervasives.assertEqual($$Array.findMap([
      1,
      2,
      3
    ], n => {
      if (n % 2 === 0) {
        return n - 2 | 0;
      }
      
    }), 0);
    Pervasives.assertEqual($$Array.findMap([
      1,
      2,
      3,
      4,
      5,
      6
    ], n => {
      if (n % 2 === 0) {
        return n - 8 | 0;
      }
      
    }), -6);
    Pervasives.assertEqual($$Array.findMap([
      1,
      2,
      3,
      4,
      5,
      6
    ], param => {}), undefined);
    Pervasives.assertEqual($$Array.findMap([], n => {
      if (n % 2 === 0) {
        return Math.imul(n, n);
      }
      
    }), undefined);
  });
});

Mocha.describe("Array.findWithIndex", () => {
  Mocha.test("Array.findWithIndex", () => {
    let array = [
      "TypeScript",
      "JavaScript",
      "ReScript"
    ];
    Pervasives.assertEqual(array.find((item, index) => {
      if (index > 1) {
        return item === "ReScript";
      } else {
        return false;
      }
    }), "ReScript");
  });
});

Mocha.describe("Array.flat", () => {
  Mocha.test("Array.flat", () => {
    Pervasives.assertEqual([
      [1],
      [2],
      [
        3,
        4
      ]
    ].flat(), [
      1,
      2,
      3,
      4
    ]);
  });
});

Mocha.describe("Array.flatMap", () => {
  Mocha.test("Array.flatMap", () => {
    let array = [
      "ReScript",
      "TypeScript",
      "JavaScript"
    ];
    Pervasives.assertEqual(array.flatMap(item => {
      switch (item) {
        case "ReScript" :
          return [
            1,
            2,
            3
          ];
        case "TypeScript" :
          return [
            4,
            5,
            6
          ];
        case "JavaScript" :
          return [
            7,
            8,
            9
          ];
      }
    }), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ]);
  });
});

Mocha.describe("Array.flatMapWithIndex", () => {
  Mocha.test("Array.flatMapWithIndex", () => {
    let array = [
      "ReScript",
      "TypeScript",
      "JavaScript"
    ];
    Pervasives.assertEqual(array.flatMap((item, index) => {
      switch (item) {
        case "ReScript" :
          return [index];
        case "TypeScript" :
          return [
            index,
            index + 1 | 0
          ];
        case "JavaScript" :
          return [
            index,
            index + 1 | 0,
            index + 2 | 0
          ];
      }
    }), [
      0,
      1,
      2,
      2,
      3,
      4
    ]);
  });
});

Mocha.describe("Array.forEach", () => {
  Mocha.test("Array.forEach", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    array.forEach(item => {
      console.log(item);
    });
  });
});

Mocha.describe("Array.forEachWithIndex", () => {
  Mocha.test("Array.forEachWithIndex", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    array.forEach((item, index) => {
      console.log("At item " + index.toString() + ": " + item);
    });
  });
});

Mocha.describe("Array.fromInitializer", () => {
  Mocha.test("Array.fromInitializer", () => {
    Pervasives.assertEqual($$Array.fromInitializer(3, i => i + 3 | 0), [
      3,
      4,
      5
    ]);
    Pervasives.assertEqual($$Array.fromInitializer(7, i => i + 3 | 0), [
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ]);
  });
});

Mocha.describe("Array.fromIterator", () => {
  Mocha.test("Array.fromIterator", () => {
    Pervasives.assertEqual(Array.from(new Map([
      [
        "foo",
        1
      ],
      [
        "bar",
        2
      ]
    ]).values()), [
      1,
      2
    ]);
  });
});

Mocha.describe("Array.get", () => {
  Mocha.test("Array.get", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    Pervasives.assertEqual(array[0], "Hello");
    Pervasives.assertEqual(array[3], undefined);
  });
});

Mocha.describe("Array.getUnsafe", () => {
  Mocha.test("Array.getUnsafe", () => {
    let array = [
      1,
      2,
      3
    ];
    for (let index = 0, index_finish = array.length; index < index_finish; ++index) {
      let value = array[index];
      console.log(value);
    }
  });
});

Mocha.describe("Array.includes", () => {
  Mocha.test("Array.includes", () => {
    Pervasives.assertEqual([
      1,
      2
    ].includes(1), true);
    Pervasives.assertEqual([
      1,
      2
    ].includes(3), false);
    Pervasives.assertEqual([{
        language: "ReScript"
      }].includes({
      language: "ReScript"
    }), false);
  });
});

Mocha.describe("Array.indexOf", () => {
  Mocha.test("Array.indexOf", () => {
    Pervasives.assertEqual([
      1,
      2
    ].indexOf(2), 1);
    Pervasives.assertEqual([
      1,
      2
    ].indexOf(3), -1);
    Pervasives.assertEqual([{
        language: "ReScript"
      }].indexOf({
      language: "ReScript"
    }), -1);
  });
});

Mocha.describe("Array.indexOfOpt", () => {
  Mocha.test("Array.indexOfOpt", () => {
    Pervasives.assertEqual($$Array.indexOfOpt([
      1,
      2
    ], 2), 1);
    Pervasives.assertEqual($$Array.indexOfOpt([
      1,
      2
    ], 3), undefined);
    Pervasives.assertEqual($$Array.indexOfOpt([{
        language: "ReScript"
      }], {
      language: "ReScript"
    }), undefined);
  });
});

Mocha.describe("Array.join", () => {
  Mocha.test("Array.join", () => {
    Pervasives.assertEqual([
      "One",
      "Two",
      "Three"
    ].join(" -- "), "One -- Two -- Three");
  });
});

Mocha.describe("Array.joinUnsafe", () => {
  Mocha.test("Array.joinUnsafe", () => {
    Pervasives.assertEqual([
      1,
      2,
      3
    ].join(" -- "), "1 -- 2 -- 3");
  });
});

Mocha.describe("Array.joinWith", () => {
  Mocha.test("Array.joinWith", () => {
    Pervasives.assertEqual([
      "One",
      "Two",
      "Three"
    ].join(" -- "), "One -- Two -- Three");
  });
});

Mocha.describe("Array.joinWithUnsafe", () => {
  Mocha.test("Array.joinWithUnsafe", () => {
    Pervasives.assertEqual([
      1,
      2,
      3
    ].join(" -- "), "1 -- 2 -- 3");
  });
});

Mocha.describe("Array.keepSome", () => {
  Mocha.test("Array.keepSome", () => {
    Pervasives.assertEqual($$Array.keepSome([
      1,
      undefined,
      3
    ]), [
      1,
      3
    ]);
    Pervasives.assertEqual($$Array.keepSome([
      1,
      2,
      3
    ]), [
      1,
      2,
      3
    ]);
    Pervasives.assertEqual($$Array.keepSome([
      undefined,
      undefined,
      undefined
    ]), []);
    Pervasives.assertEqual($$Array.keepSome([]), []);
  });
});

Mocha.describe("Array.last", () => {
  Mocha.test("Array.last", () => {
    Pervasives.assertEqual($$Array.last([
      "Hello",
      "Hi",
      "Good bye"
    ]), "Good bye");
    Pervasives.assertEqual($$Array.last([]), undefined);
  });
});

Mocha.describe("Array.length", () => {
  Mocha.test("Array.length", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    Pervasives.assertEqual(someArray.length, 2);
  });
});

Mocha.describe("Array.make", () => {
  Mocha.test("Array.make", () => {
    Pervasives.assertEqual($$Array.make(3, "apple"), [
      "apple",
      "apple",
      "apple"
    ]);
    Pervasives.assertEqual($$Array.make(6, 7), [
      7,
      7,
      7,
      7,
      7,
      7
    ]);
  });
});

Mocha.describe("Array.map", () => {
  Mocha.test("Array.map", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    let mappedArray = array.map(greeting => greeting + " to you");
    Pervasives.assertEqual(mappedArray, [
      "Hello to you",
      "Hi to you",
      "Good bye to you"
    ]);
  });
});

Mocha.describe("Array.mapWithIndex", () => {
  Mocha.test("Array.mapWithIndex", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    let mappedArray = array.map((greeting, index) => greeting + " at position " + index.toString());
    Pervasives.assertEqual(mappedArray, [
      "Hello at position 0",
      "Hi at position 1",
      "Good bye at position 2"
    ]);
  });
});

Mocha.describe("Array.pop", () => {
  Mocha.test("Array.pop", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    Pervasives.assertEqual(someArray.pop(), "hello");
    Pervasives.assertEqual(someArray, ["hi"]);
  });
});

Mocha.describe("Array.push", () => {
  Mocha.test("Array.push", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.push("yay");
    Pervasives.assertEqual(someArray, [
      "hi",
      "hello",
      "yay"
    ]);
  });
});

Mocha.describe("Array.pushMany", () => {
  Mocha.test("Array.pushMany", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.push("yay", "wehoo");
    Pervasives.assertEqual(someArray, [
      "hi",
      "hello",
      "yay",
      "wehoo"
    ]);
  });
});

Mocha.describe("Array.reduce", () => {
  Mocha.test("Array.reduce", () => {
    Pervasives.assertEqual($$Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0), 10);
    Pervasives.assertEqual($$Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b), "abcd");
    Pervasives.assertEqual($$Array.reduce([
      1,
      2,
      3
    ], /* [] */0, List.add), {
      hd: 3,
      tl: {
        hd: 2,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      }
    });
    Pervasives.assertEqual($$Array.reduce([], /* [] */0, List.add), /* [] */0);
  });
});

Mocha.describe("Array.reduceRight", () => {
  Mocha.test("Array.reduceRight", () => {
    Pervasives.assertEqual($$Array.reduceRight([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b), "dcba");
    Pervasives.assertEqual($$Array.reduceRight([
      1,
      2,
      3
    ], /* [] */0, List.add), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
    Pervasives.assertEqual($$Array.reduceRight([], /* [] */0, List.add), /* [] */0);
  });
});

Mocha.describe("Array.reduceRightWithIndex", () => {
  Mocha.test("Array.reduceRightWithIndex", () => {
    Pervasives.assertEqual($$Array.reduceRightWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0), 16);
    Pervasives.assertEqual($$Array.reduceRightWithIndex([], /* [] */0, (acc, v, i) => ({
      hd: v + i | 0,
      tl: acc
    })), /* [] */0);
  });
});

Mocha.describe("Array.reduceWithIndex", () => {
  Mocha.test("Array.reduceWithIndex", () => {
    Pervasives.assertEqual($$Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0), 16);
    Pervasives.assertEqual($$Array.reduceWithIndex([
      1,
      2,
      3
    ], /* [] */0, (acc, v, i) => ({
      hd: v + i | 0,
      tl: acc
    })), {
      hd: 5,
      tl: {
        hd: 3,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      }
    });
    Pervasives.assertEqual($$Array.reduceWithIndex([], /* [] */0, (acc, v, i) => ({
      hd: v + i | 0,
      tl: acc
    })), /* [] */0);
  });
});

Mocha.describe("Array.reverse", () => {
  Mocha.test("Array.reverse", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.reverse();
    Pervasives.assertEqual(someArray, [
      "hello",
      "hi"
    ]);
  });
});

Mocha.describe("Array.set", () => {
  Mocha.test("Array.set", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    array[1] = "Hello";
    Pervasives.assertEqual(array[1], "Hello");
  });
});

Mocha.describe("Array.setUnsafe", () => {
  Mocha.test("Array.setUnsafe", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    array[1] = "Hello";
    Pervasives.assertEqual(array[1], "Hello");
  });
});

Mocha.describe("Array.shift", () => {
  Mocha.test("Array.shift", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    Pervasives.assertEqual(someArray.shift(), "hi");
    Pervasives.assertEqual(someArray, ["hello"]);
  });
});

Mocha.describe("Array.shuffle", () => {
  Mocha.test("Array.shuffle", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    $$Array.shuffle(array);
    console.log(array);
    let array2 = [
      1,
      2,
      3
    ];
    $$Array.shuffle(array2);
    Pervasives.assertEqual(array2.length, 3);
  });
});

Mocha.describe("Array.slice", () => {
  Mocha.test("Array.slice", () => {
    Pervasives.assertEqual([
      1,
      2,
      3,
      4
    ].slice(1, 3), [
      2,
      3
    ]);
  });
});

Mocha.describe("Array.sliceToEnd", () => {
  Mocha.test("Array.sliceToEnd", () => {
    Pervasives.assertEqual([
      1,
      2,
      3,
      4
    ].slice(1), [
      2,
      3,
      4
    ]);
  });
});

Mocha.describe("Array.some", () => {
  Mocha.test("Array.some", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    Pervasives.assertEqual(array.some(greeting => greeting === "Hello"), true);
  });
});

Mocha.describe("Array.someWithIndex", () => {
  Mocha.test("Array.someWithIndex", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    Pervasives.assertEqual(array.some((greeting, index) => {
      if (greeting === "Hello") {
        return index === 0;
      } else {
        return false;
      }
    }), true);
  });
});

Mocha.describe("Array.sort", () => {
  Mocha.test("Array.sort", () => {
    let array = [
      3,
      2,
      1
    ];
    array.sort((a, b) => a - b | 0);
    Pervasives.assertEqual(array, [
      1,
      2,
      3
    ]);
  });
});

Mocha.describe("Array.toShuffled", () => {
  Mocha.test("Array.toShuffled", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    let shuffledArray = $$Array.toShuffled(array);
    console.log(shuffledArray);
    Pervasives.assertEqual($$Array.toShuffled([
      1,
      2,
      3
    ]).length, 3);
  });
});

Mocha.describe("Array.toString", () => {
  Mocha.test("Array.toString", () => {
    Pervasives.assertEqual([
      1,
      2,
      3,
      4
    ].toString(), "1,2,3,4");
  });
});

Mocha.describe("Array.unsafe_get", () => {
  Mocha.test("Array.unsafe_get", () => {
    let array = [
      1,
      2,
      3
    ];
    for (let index = 0, index_finish = array.length; index < index_finish; ++index) {
      let value = array[index];
      console.log(value);
    }
  });
});

Mocha.describe("Array.unshift", () => {
  Mocha.test("Array.unshift", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.unshift("yay");
    Pervasives.assertEqual(someArray, [
      "yay",
      "hi",
      "hello"
    ]);
  });
});

Mocha.describe("Array.unshiftMany", () => {
  Mocha.test("Array.unshiftMany", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.unshift("yay", "wehoo");
    Pervasives.assertEqual(someArray, [
      "yay",
      "wehoo",
      "hi",
      "hello"
    ]);
  });
});

Mocha.describe("AsyncIterator.done", () => {
  Mocha.test("AsyncIterator.done", () => {
    let context = {
      contents: 0
    };
    $$AsyncIterator.make(async () => {
      let currentValue = context.contents;
      context.contents = currentValue + 1 | 0;
      if (currentValue >= 3) {
        return $$AsyncIterator.done(undefined);
      } else {
        return $$AsyncIterator.value(currentValue);
      }
    });
  });
});

Mocha.describe("AsyncIterator.forEach", () => {
  Mocha.test("AsyncIterator.forEach", () => {
    let asyncIterator = ((() => {
    var map1 = new Map();

    map1.set('first', '1');
    map1.set('second', '2');

    var iterator1 = map1[Symbol.iterator]();
    return iterator1;
  })());
    let main = async () => await $$AsyncIterator.forEach(asyncIterator, v => {
      if (v !== undefined && v[0] === "second") {
        return Pervasives.assertEqual(v[1], "2");
      }
      
    });
    main();
  });
});

Mocha.describe("AsyncIterator.make", () => {
  Mocha.test("AsyncIterator.make", () => {
    let context = {
      contents: 0
    };
    let asyncIterator = $$AsyncIterator.make(async () => {
      let currentValue = context.contents;
      context.contents = currentValue + 1 | 0;
      return {
        done: currentValue >= 3,
        value: currentValue
      };
    });
    let main = async () => await $$AsyncIterator.forEach(asyncIterator, value => {
      if (value !== undefined) {
        console.log(value);
        return;
      }
      
    });
    main();
  });
});

Mocha.describe("AsyncIterator.next", () => {
  Mocha.test("AsyncIterator.next", () => {
    let asyncIterator = ((() => {
    var map1 = new Map();

    map1.set('first', '1');
    map1.set('second', '2');

    var iterator1 = map1[Symbol.iterator]();
    return iterator1;
  })());
    let processMyAsyncIterator = async () => {
      let $$break = false;
      while (!$$break) {
        let match = await asyncIterator.next();
        let done = match.done;
        $$break = done;
        if (done) {
          Pervasives.assertEqual(Option.isNone(match.value), true);
        }
        
      };
    };
    processMyAsyncIterator();
  });
});

Mocha.describe("AsyncIterator.value", () => {
  Mocha.test("AsyncIterator.value", () => {
    let context = {
      contents: 0
    };
    $$AsyncIterator.make(async () => {
      let currentValue = context.contents;
      context.contents = currentValue + 1 | 0;
      if (currentValue >= 3) {
        return $$AsyncIterator.done(undefined);
      } else {
        return $$AsyncIterator.value(currentValue);
      }
    });
  });
});

Mocha.describe("Belt.Array.blit", () => {
  Mocha.test("Belt.Array.blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
});

Mocha.describe("Belt.Array.cmp", () => {
  Mocha.test("Belt.Array.cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
});

Mocha.describe("Belt.Array.concat", () => {
  Mocha.test("Belt.Array.concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
});

Mocha.describe("Belt.Array.concatMany", () => {
  Mocha.test("Belt.Array.concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
});

Mocha.describe("Belt.Array.eq", () => {
  Mocha.test("Belt.Array.eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
});

Mocha.describe("Belt.Array.every", () => {
  Mocha.test("Belt.Array.every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt.Array.every2", () => {
  Mocha.test("Belt.Array.every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
});

Mocha.describe("Belt.Array.fill", () => {
  Mocha.test("Belt.Array.fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
});

Mocha.describe("Belt.Array.flatMap", () => {
  Mocha.test("Belt.Array.flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
});

Mocha.describe("Belt.Array.forEach", () => {
  Mocha.test("Belt.Array.forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
});

Mocha.describe("Belt.Array.forEachWithIndex", () => {
  Mocha.test("Belt.Array.forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
});

Mocha.describe("Belt.Array.get", () => {
  Mocha.test("Belt.Array.get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
});

Mocha.describe("Belt.Array.getBy", () => {
  Mocha.test("Belt.Array.getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt.Array.getIndexBy", () => {
  Mocha.test("Belt.Array.getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt.Array.joinWith", () => {
  Mocha.test("Belt.Array.joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
});

Mocha.describe("Belt.Array.keepMap", () => {
  Mocha.test("Belt.Array.keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
});

Mocha.describe("Belt.Array.keepWithIndex", () => {
  Mocha.test("Belt.Array.keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
});

Mocha.describe("Belt.Array.length", () => {
  Mocha.test("Belt.Array.length", () => {});
});

Mocha.describe("Belt.Array.makeBy", () => {
  Mocha.test("Belt.Array.makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => Math.imul(i, i)), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
});

Mocha.describe("Belt.Array.makeUninitialized", () => {
  Mocha.test("Belt.Array.makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
});

Mocha.describe("Belt.Array.makeUninitializedUnsafe", () => {
  Mocha.test("Belt.Array.makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
});

Mocha.describe("Belt.Array.map", () => {
  Mocha.test("Belt.Array.map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
});

Mocha.describe("Belt.Array.mapWithIndex", () => {
  Mocha.test("Belt.Array.mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt.Array.partition", () => {
  Mocha.test("Belt.Array.partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt.Array.range", () => {
  Mocha.test("Belt.Array.range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
});

Mocha.describe("Belt.Array.rangeBy", () => {
  Mocha.test("Belt.Array.rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
});

Mocha.describe("Belt.Array.reduce", () => {
  Mocha.test("Belt.Array.reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
});

Mocha.describe("Belt.Array.reduceReverse", () => {
  Mocha.test("Belt.Array.reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
});

Mocha.describe("Belt.Array.reduceReverse2", () => {
  Mocha.test("Belt.Array.reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
});

Mocha.describe("Belt.Array.reduceWithIndex", () => {
  Mocha.test("Belt.Array.reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
});

Mocha.describe("Belt.Array.reverse", () => {
  Mocha.test("Belt.Array.reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt.Array.reverseInPlace", () => {
  Mocha.test("Belt.Array.reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt.Array.slice", () => {
  Mocha.test("Belt.Array.slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt.Array.sliceToEnd", () => {
  Mocha.test("Belt.Array.sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt.Array.some", () => {
  Mocha.test("Belt.Array.some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt.Array.some2", () => {
  Mocha.test("Belt.Array.some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
});

Mocha.describe("Belt.Array.truncateToLengthUnsafe", () => {
  Mocha.test("Belt.Array.truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
});

Mocha.describe("Belt.Array.unzip", () => {
  Mocha.test("Belt.Array.unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
});

Mocha.describe("Belt.Array.zip", () => {
  Mocha.test("Belt.Array.zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt.Array.zipBy", () => {
  Mocha.test("Belt.Array.zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt.Float.*", () => {
  Mocha.test("Belt.Float.*", () => {
    Pervasives.assertEqual(2.0 * 2.0, 4.0);
  });
});

Mocha.describe("Belt.Float.+", () => {
  Mocha.test("Belt.Float.+", () => {
    Pervasives.assertEqual(2.0 + 2.0, 4.0);
  });
});

Mocha.describe("Belt.Float.-", () => {
  Mocha.test("Belt.Float.-", () => {
    Pervasives.assertEqual(2.0 - 1.0, 1.0);
  });
});

Mocha.describe("Belt.Float./", () => {
  Mocha.test("Belt.Float./", () => {
    Pervasives.assertEqual(4.0 / 2.0, 2.0);
  });
});

Mocha.describe("Belt.Float.fromInt", () => {
  Mocha.test("Belt.Float.fromInt", () => {
    console.log(1 === 1.0);
  });
});

Mocha.describe("Belt.Float.fromString", () => {
  Mocha.test("Belt.Float.fromString", () => {
    console.log(Belt_Float.fromString("1.0") === 1.0);
  });
});

Mocha.describe("Belt.Float.toInt", () => {
  Mocha.test("Belt.Float.toInt", () => {
    console.log(true);
  });
});

Mocha.describe("Belt.Float.toString", () => {
  Mocha.test("Belt.Float.toString", () => {
    console.log(String(1.0) === "1.0");
  });
});

Mocha.describe("Belt.HashMap", () => {
  Mocha.test("Belt.HashMap", () => {
    let I0 = Belt_Id.hashable(param => 65535, (a, b) => a === b);
    let s0 = Belt_HashMap.make(40, I0);
    let I1 = Belt_Id.hashable(param => 255, (a, b) => a === b);
    let s1 = Belt_HashMap.make(40, I1);
    Belt_HashMap.set(s0, 0, 3);
    Belt_HashMap.set(s1, 1, "3");
  });
});

Mocha.describe("Belt.HashMap.clear", () => {
  Mocha.test("Belt.HashMap.clear", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.fromArray([[
        1,
        "1"
      ]], IntHash);
    Belt_HashMap.clear(hMap);
    Belt_HashMap.isEmpty(hMap) === true;
  });
});

Mocha.describe("Belt.HashMap.copy", () => {
  Mocha.test("Belt.HashMap.copy", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntHash);
    let s1 = Belt_HashMap.copy(s0);
    Belt_HashMap.set(s0, 2, "3");
    Primitive_object.notequal(Belt_HashMap.get(s0, 2), Belt_HashMap.get(s1, 2));
  });
});

Mocha.describe("Belt.HashMap.forEach", () => {
  Mocha.test("Belt.HashMap.forEach", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.forEach(s0, (key, value) => {
      console.log(key, value);
    });
  });
});

Mocha.describe("Belt.HashMap.fromArray", () => {
  Mocha.test("Belt.HashMap.fromArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ], IntHash);
    Primitive_object.equal(Belt_HashMap.toArray(s0), [
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ]);
  });
});

Mocha.describe("Belt.HashMap.get", () => {
  Mocha.test("Belt.HashMap.get", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Primitive_object.equal(Belt_HashMap.get(s0, 1), "value1");
    Belt_HashMap.get(s0, 2) === undefined;
  });
});

Mocha.describe("Belt.HashMap.getBucketHistogram", () => {
  Mocha.test("Belt.HashMap.getBucketHistogram", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 1, "1");
    Belt_HashMap.getBucketHistogram(hMap);
  });
});

Mocha.describe("Belt.HashMap.has", () => {
  Mocha.test("Belt.HashMap.has", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.has(s0, 1) === true;
    Belt_HashMap.has(s0, 2) === false;
  });
});

Mocha.describe("Belt.HashMap.isEmpty", () => {
  Mocha.test("Belt.HashMap.isEmpty", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    Belt_HashMap.isEmpty(Belt_HashMap.fromArray([[
        1,
        "1"
      ]], IntHash)) === false;
  });
});

Mocha.describe("Belt.HashMap.keepMapInPlace", () => {
  Mocha.test("Belt.HashMap.keepMapInPlace", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Belt_HashMap.keepMapInPlace(s0, (key, value) => {
      if (key === 1) {
        return;
      } else {
        return value;
      }
    });
  });
});

Mocha.describe("Belt.HashMap.keysToArray", () => {
  Mocha.test("Belt.HashMap.keysToArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.keysToArray(s0), [
      1,
      2
    ]);
  });
});

Mocha.describe("Belt.HashMap.logStats", () => {
  Mocha.test("Belt.HashMap.logStats", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 1, "1");
    Belt_HashMap.logStats(hMap);
  });
});

Mocha.describe("Belt.HashMap.make", () => {
  Mocha.test("Belt.HashMap.make", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 0, "a");
  });
});

Mocha.describe("Belt.HashMap.mergeMany", () => {
  Mocha.test("Belt.HashMap.mergeMany", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.mergeMany(hMap, [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ]
    ]);
  });
});

Mocha.describe("Belt.HashMap.reduce", () => {
  Mocha.test("Belt.HashMap.reduce", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Pervasives.assertEqual(Belt_HashMap.reduce(s0, "", (acc, param, value) => acc + (", " + value)), ", value1, value2");
    console.log("lol");
  });
});

Mocha.describe("Belt.HashMap.remove", () => {
  Mocha.test("Belt.HashMap.remove", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.remove(s0, 1);
    Belt_HashMap.has(s0, 1) === false;
  });
});

Mocha.describe("Belt.HashMap.set", () => {
  Mocha.test("Belt.HashMap.set", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntHash);
    Belt_HashMap.set(s0, 2, "3");
    Primitive_object.equal(Belt_HashMap.valuesToArray(s0), [
      "1",
      "3",
      "3"
    ]);
  });
});

Mocha.describe("Belt.HashMap.size", () => {
  Mocha.test("Belt.HashMap.size", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Belt_HashMap.size(s0) === 2;
  });
});

Mocha.describe("Belt.HashMap.toArray", () => {
  Mocha.test("Belt.HashMap.toArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.toArray(s0), [
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ]);
  });
});

Mocha.describe("Belt.HashMap.valuesToArray", () => {
  Mocha.test("Belt.HashMap.valuesToArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.valuesToArray(s0), [
      "value1",
      "value2"
    ]);
  });
});

Mocha.describe("Belt.HashSet", () => {
  Mocha.test("Belt.HashSet", () => {
    let I0 = Belt_Id.hashable(a => a & 65535, (a, b) => a === b);
    Belt_HashSet.make(40, I0);
    let I1 = Belt_Id.hashable(a => a & 255, (a, b) => a === b);
    let s1 = Belt_HashSet.make(40, I1);
    Belt_HashSet.add(s1, 0);
    Belt_HashSet.add(s1, 1);
  });
});

Mocha.describe("Belt.Int.*", () => {
  Mocha.test("Belt.Int.*", () => {
    Pervasives.assertEqual(4, 4);
  });
});

Mocha.describe("Belt.Int.+", () => {
  Mocha.test("Belt.Int.+", () => {
    Pervasives.assertEqual(4, 4);
  });
});

Mocha.describe("Belt.Int.-", () => {
  Mocha.test("Belt.Int.-", () => {
    Pervasives.assertEqual(1, 1);
  });
});

Mocha.describe("Belt.Int./", () => {
  Mocha.test("Belt.Int./", () => {
    Pervasives.assertEqual(2, 2);
  });
});

Mocha.describe("Belt.Int.fromFloat", () => {
  Mocha.test("Belt.Int.fromFloat", () => {
    Pervasives.assertEqual(1, 1);
  });
});

Mocha.describe("Belt.Int.fromString", () => {
  Mocha.test("Belt.Int.fromString", () => {
    Pervasives.assertEqual(Belt_Int.fromString("1"), 1);
  });
});

Mocha.describe("Belt.Int.toFloat", () => {
  Mocha.test("Belt.Int.toFloat", () => {
    Pervasives.assertEqual(1, 1.0);
  });
});

Mocha.describe("Belt.Int.toString", () => {
  Mocha.test("Belt.Int.toString", () => {
    Pervasives.assertEqual(String(1), "1");
  });
});

Mocha.describe("Belt.List.add", () => {
  Mocha.test("Belt.List.add", () => {
    Belt_List.add({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, 1);
    Belt_List.add({
      hd: "World",
      tl: {
        hd: "!",
        tl: /* [] */0
      }
    }, "Hello");
  });
});

Mocha.describe("Belt.List.cmp", () => {
  Mocha.test("Belt.List.cmp", () => {
    Belt_List.cmp({
      hd: 3,
      tl: /* [] */0
    }, {
      hd: 3,
      tl: {
        hd: 7,
        tl: /* [] */0
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 5,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: /* [] */0
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
  });
});

Mocha.describe("Belt.List.cmpByLength", () => {
  Mocha.test("Belt.List.cmpByLength", () => {
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    });
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    });
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, {
      hd: 5,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    });
  });
});

Mocha.describe("Belt.List.concat", () => {
  Mocha.test("Belt.List.concat", () => {
    Belt_List.concat({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    });
  });
});

Mocha.describe("Belt.List.concatMany", () => {
  Mocha.test("Belt.List.concatMany", () => {
    Belt_List.concatMany([
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      /* [] */0,
      {
        hd: 3,
        tl: /* [] */0
      }
    ]);
  });
});

Mocha.describe("Belt.List.drop", () => {
  Mocha.test("Belt.List.drop", () => {
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 3);
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
});

Mocha.describe("Belt.List.eq", () => {
  Mocha.test("Belt.List.eq", () => {
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
});

Mocha.describe("Belt.List.every", () => {
  Mocha.test("Belt.List.every", () => {
    let isBelow10 = value => value < 10;
    Belt_List.every({
      hd: 1,
      tl: {
        hd: 9,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
    Belt_List.every({
      hd: 1,
      tl: {
        hd: 99,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
  });
});

Mocha.describe("Belt.List.every2", () => {
  Mocha.test("Belt.List.every2", () => {
    Belt_List.every2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Belt_List.every2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.every2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.every2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
});

Mocha.describe("Belt.List.filter", () => {
  Mocha.test("Belt.List.filter", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.filter({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    Belt_List.filter({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Belt_Option.isSome);
  });
});

Mocha.describe("Belt.List.filterWithIndex", () => {
  Mocha.test("Belt.List.filterWithIndex", () => {
    Belt_List.filterWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
});

Mocha.describe("Belt.List.flatten", () => {
  Mocha.test("Belt.List.flatten", () => {
    Belt_List.flatten({
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: /* [] */0,
        tl: {
          hd: {
            hd: 3,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt.List.forEach", () => {
  Mocha.test("Belt.List.forEach", () => {
    Belt_List.forEach({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, x => {
      console.log("Item: " + x);
    });
  });
});

Mocha.describe("Belt.List.forEach2", () => {
  Mocha.test("Belt.List.forEach2", () => {
    Belt_List.forEach2({
      hd: "Z",
      tl: {
        hd: "Y",
        tl: /* [] */0
      }
    }, {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    }, (x, y) => {
      console.log(x, y);
    });
  });
});

Mocha.describe("Belt.List.forEachWithIndex", () => {
  Mocha.test("Belt.List.forEachWithIndex", () => {
    Belt_List.forEachWithIndex({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, (index, x) => {
      console.log("Item " + String(index) + " is " + x);
    });
  });
});

Mocha.describe("Belt.List.fromArray", () => {
  Mocha.test("Belt.List.fromArray", () => {
    Belt_List.fromArray([
      1,
      2,
      3
    ]);
  });
});

Mocha.describe("Belt.List.get", () => {
  Mocha.test("Belt.List.get", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Belt_List.get(abc, 1);
    Belt_List.get(abc, 4);
  });
});

Mocha.describe("Belt.List.getAssoc", () => {
  Mocha.test("Belt.List.getAssoc", () => {
    Belt_List.getAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 3, (a, b) => a === b);
    Belt_List.getAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, (k, item) => k === item);
  });
});

Mocha.describe("Belt.List.getBy", () => {
  Mocha.test("Belt.List.getBy", () => {
    Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 3);
    Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 4);
  });
});

Mocha.describe("Belt.List.getExn", () => {
  Mocha.test("Belt.List.getExn", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Pervasives.assertEqual(Belt_List.getExn(abc, 1), "B");
    let exit = 0;
    let val;
    try {
      val = Belt_List.getExn(abc, 4);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          2266,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt.List.has", () => {
  Mocha.test("Belt.List.has", () => {
    Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => a === b);
    Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4, (a, b) => a === b);
    Belt_List.has({
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
});

Mocha.describe("Belt.List.hasAssoc", () => {
  Mocha.test("Belt.List.hasAssoc", () => {
    Belt_List.hasAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Belt_List.hasAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 25, (k, item) => k === item);
  });
});

Mocha.describe("Belt.List.head", () => {
  Mocha.test("Belt.List.head", () => {
    Belt_List.head(/* [] */0);
    Belt_List.head({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt.List.headExn", () => {
  Mocha.test("Belt.List.headExn", () => {
    Pervasives.assertEqual(Belt_List.headExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), 1);
    let exit = 0;
    let val;
    try {
      val = Belt_List.headExn(/* [] */0);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          2315,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt.List.keep", () => {
  Mocha.test("Belt.List.keep", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.keep({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    Belt_List.keep({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Belt_Option.isSome);
  });
});

Mocha.describe("Belt.List.keepMap", () => {
  Mocha.test("Belt.List.keepMap", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => {
      if (isEven(x)) {
        return x;
      }
      
    });
    Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: undefined,
          tl: /* [] */0
        }
      }
    }, x => x);
  });
});

Mocha.describe("Belt.List.keepWithIndex", () => {
  Mocha.test("Belt.List.keepWithIndex", () => {
    Belt_List.keepWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
});

Mocha.describe("Belt.List.length", () => {
  Mocha.test("Belt.List.length", () => {
    Belt_List.length({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt.List.make", () => {
  Mocha.test("Belt.List.make", () => {
    Belt_List.make(3, 1);
  });
});

Mocha.describe("Belt.List.makeBy", () => {
  Mocha.test("Belt.List.makeBy", () => {
    Belt_List.makeBy(5, i => i);
    Belt_List.makeBy(5, i => Math.imul(i, i));
  });
});

Mocha.describe("Belt.List.map", () => {
  Mocha.test("Belt.List.map", () => {
    Belt_List.map({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, x => x + 1 | 0);
  });
});

Mocha.describe("Belt.List.mapReverse", () => {
  Mocha.test("Belt.List.mapReverse", () => {
    Pervasives.assertEqual(Belt_List.mapReverse({
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, x => Math.imul(x, x)), {
      hd: 25,
      tl: {
        hd: 16,
        tl: {
          hd: 9,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt.List.mapReverse2", () => {
  Mocha.test("Belt.List.mapReverse2", () => {
    Belt_List.mapReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a + b | 0);
  });
});

Mocha.describe("Belt.List.mapWithIndex", () => {
  Mocha.test("Belt.List.mapWithIndex", () => {
    Belt_List.mapWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, (index, x) => index + x | 0);
  });
});

Mocha.describe("Belt.List.partition", () => {
  Mocha.test("Belt.List.partition", () => {
    Pervasives.assertEqual(Belt_List.partition({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 2), [
      {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      },
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    ]);
  });
});

Mocha.describe("Belt.List.reduce", () => {
  Mocha.test("Belt.List.reduce", () => {
    Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item) => acc + item | 0);
  });
});

Mocha.describe("Belt.List.reduce2", () => {
  Mocha.test("Belt.List.reduce2", () => {
    Belt_List.reduce2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + Math.imul(x, x) | 0) + y | 0);
  });
});

Mocha.describe("Belt.List.reduceReverse", () => {
  Mocha.test("Belt.List.reduceReverse", () => {
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 10, (a, b) => a - b | 0);
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, /* [] */0, Belt_List.add);
  });
});

Mocha.describe("Belt.List.reduceReverse2", () => {
  Mocha.test("Belt.List.reduceReverse2", () => {
    Belt_List.reduceReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + Math.imul(x, x) | 0) + y | 0);
  });
});

Mocha.describe("Belt.List.reduceWithIndex", () => {
  Mocha.test("Belt.List.reduceWithIndex", () => {
    Belt_List.reduceWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item, index) => (acc + item | 0) + index | 0);
  });
});

Mocha.describe("Belt.List.removeAssoc", () => {
  Mocha.test("Belt.List.removeAssoc", () => {
    Belt_List.removeAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Belt_List.removeAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 9, (k, item) => k === item);
  });
});

Mocha.describe("Belt.List.reverse", () => {
  Mocha.test("Belt.List.reverse", () => {
    Belt_List.reverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt.List.reverseConcat", () => {
  Mocha.test("Belt.List.reverseConcat", () => {
    Belt_List.reverseConcat({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    });
  });
});

Mocha.describe("Belt.List.setAssoc", () => {
  Mocha.test("Belt.List.setAssoc", () => {
    Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 2, "x", (a, b) => a === b);
    Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          3,
          "c"
        ],
        tl: /* [] */0
      }
    }, 2, "b", (a, b) => a === b);
    Belt_List.setAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          3,
          "morning?!"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, "afternoon", (a, b) => a % 12 === b % 12);
  });
});

Mocha.describe("Belt.List.shuffle", () => {
  Mocha.test("Belt.List.shuffle", () => {
    Belt_List.shuffle({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt.List.some", () => {
  Mocha.test("Belt.List.some", () => {
    let isAbove100 = value => value > 100;
    Belt_List.some({
      hd: 101,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
    Belt_List.some({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
  });
});

Mocha.describe("Belt.List.some2", () => {
  Mocha.test("Belt.List.some2", () => {
    Belt_List.some2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Belt_List.some2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.some2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.some2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
});

Mocha.describe("Belt.List.sort", () => {
  Mocha.test("Belt.List.sort", () => {
    Belt_List.sort({
      hd: 5,
      tl: {
        hd: 4,
        tl: {
          hd: 9,
          tl: {
            hd: 3,
            tl: {
              hd: 7,
              tl: /* [] */0
            }
          }
        }
      }
    }, (a, b) => a - b | 0);
  });
});

Mocha.describe("Belt.List.splitAt", () => {
  Mocha.test("Belt.List.splitAt", () => {
    Belt_List.splitAt({
      hd: "Hello",
      tl: {
        hd: "World",
        tl: /* [] */0
      }
    }, 1);
    Belt_List.splitAt({
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        }
      }
    }, 2);
  });
});

Mocha.describe("Belt.List.tail", () => {
  Mocha.test("Belt.List.tail", () => {
    Belt_List.tail({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
    Belt_List.tail(/* [] */0);
  });
});

Mocha.describe("Belt.List.tailExn", () => {
  Mocha.test("Belt.List.tailExn", () => {
    Pervasives.assertEqual(Belt_List.tailExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    });
    let exit = 0;
    let val;
    try {
      val = Belt_List.tailExn(/* [] */0);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          2619,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt.List.take", () => {
  Mocha.test("Belt.List.take", () => {
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 1);
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
});

Mocha.describe("Belt.List.toArray", () => {
  Mocha.test("Belt.List.toArray", () => {
    Belt_List.toArray({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt.List.unzip", () => {
  Mocha.test("Belt.List.unzip", () => {
    Belt_List.unzip({
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          3,
          4
        ],
        tl: /* [] */0
      }
    });
    Belt_List.unzip({
      hd: [
        "H",
        "W"
      ],
      tl: {
        hd: [
          "e",
          "o"
        ],
        tl: {
          hd: [
            "l",
            "r"
          ],
          tl: {
            hd: [
              "l",
              "l"
            ],
            tl: {
              hd: [
                "o",
                "d"
              ],
              tl: {
                hd: [
                  " ",
                  "!"
                ],
                tl: /* [] */0
              }
            }
          }
        }
      }
    });
  });
});

Mocha.describe("Belt.List.zip", () => {
  Mocha.test("Belt.List.zip", () => {
    Belt_List.zip({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt.List.zipBy", () => {
  Mocha.test("Belt.List.zipBy", () => {
    Belt_List.zipBy({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, (a, b) => (a << 1) + b | 0);
  });
});

Mocha.describe("Belt.Map.Dict.findFirstBy", () => {
  Mocha.test("Belt.Map.Dict.findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MapDict.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp.cmp);
    Primitive_object.equal(Belt_MapDict.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
});

Mocha.describe("Belt.Map.Int", () => {
  Mocha.test("Belt.Map.Int", () => {});
});

Mocha.describe("Belt.Map.Int.findFirstBy", () => {
  Mocha.test("Belt.Map.Int.findFirstBy", () => {
    let mapInt = Belt_MapInt.fromArray([
      [
        1,
        "one"
      ],
      [
        2,
        "two"
      ],
      [
        3,
        "three"
      ]
    ]);
    Pervasives.assertEqual(Belt_MapInt.findFirstBy(mapInt, (k, v) => {
      if (k === 1) {
        return v === "one";
      } else {
        return false;
      }
    }), [
      1,
      "one"
    ]);
  });
});

Mocha.describe("Belt.Map.String.findFirstBy", () => {
  Mocha.test("Belt.Map.String.findFirstBy", () => {
    let mapString = Belt_MapString.fromArray([
      [
        "1",
        "one"
      ],
      [
        "2",
        "two"
      ],
      [
        "3",
        "three"
      ]
    ]);
    Pervasives.assertEqual(Belt_MapString.findFirstBy(mapString, (k, v) => {
      if (k === "1") {
        return v === "one";
      } else {
        return false;
      }
    }), [
      "1",
      "one"
    ]);
  });
});

Mocha.describe("Belt.Map.findFirstBy", () => {
  Mocha.test("Belt.Map.findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        ""
      ]
    ], IntCmp);
    Pervasives.assertEqual(Belt_Map.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
});

Mocha.describe("Belt.Map.forEach", () => {
  Mocha.test("Belt.Map.forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        ""
      ]
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_Map.forEach(s0, (k, v) => {
      acc.contents = {
        hd: [
          k,
          v
        ],
        tl: acc.contents
      };
    });
    Primitive_object.equal(acc.contents, {
      hd: [
        4,
        "4"
      ],
      tl: {
        hd: [
          3,
          "3"
        ],
        tl: {
          hd: [
            2,
            "2"
          ],
          tl: {
            hd: [
              1,
              "1"
            ],
            tl: /* [] */0
          }
        }
      }
    });
  });
});

Mocha.describe("Belt.Map.fromArray", () => {
  Mocha.test("Belt.Map.fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.toArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ]);
  });
});

Mocha.describe("Belt.Map.get", () => {
  Mocha.test("Belt.Map.get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.get(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp), 2), "2");
    Belt_Map.get(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp), 2) === undefined;
  });
});

Mocha.describe("Belt.Map.has", () => {
  Mocha.test("Belt.Map.has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.has(Belt_Map.fromArray([[
        1,
        "1"
      ]], IntCmp), 1) === true;
  });
});

Mocha.describe("Belt.Map.isEmpty", () => {
  Mocha.test("Belt.Map.isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.isEmpty(Belt_Map.fromArray([[
        1,
        "1"
      ]], IntCmp)) === false;
  });
});

Mocha.describe("Belt.Map.keysToArray", () => {
  Mocha.test("Belt.Map.keysToArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.keysToArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      1,
      2,
      3
    ]);
  });
});

Mocha.describe("Belt.Map.make", () => {
  Mocha.test("Belt.Map.make", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let m = Belt_Map.make(IntCmp);
    Belt_Map.set(m, 0, "a");
  });
});

Mocha.describe("Belt.Map.reduce", () => {
  Mocha.test("Belt.Map.reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    Belt_Map.reduce(s0, /* [] */0, (acc, k, v) => ({
      hd: [
        k,
        v
      ],
      tl: acc
    }));
  });
});

Mocha.describe("Belt.Map.remove", () => {
  Mocha.test("Belt.Map.remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    let s1 = Belt_Map.remove(s0, 1);
    Belt_Map.remove(s1, 1);
    Primitive_object.equal(Belt_Map.keysToArray(s1), [
      2,
      3
    ]);
  });
});

Mocha.describe("Belt.Map.set", () => {
  Mocha.test("Belt.Map.set", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    let s1 = Belt_Map.set(s0, 2, "3");
    Primitive_object.equal(Belt_Map.valuesToArray(s1), [
      "1",
      "3",
      "3"
    ]);
  });
});

Mocha.describe("Belt.Map.size", () => {
  Mocha.test("Belt.Map.size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.size(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        2,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)) === 2;
  });
});

Mocha.describe("Belt.Map.toArray", () => {
  Mocha.test("Belt.Map.toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.toArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ]);
  });
});

Mocha.describe("Belt.Map.valuesToArray", () => {
  Mocha.test("Belt.Map.valuesToArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.valuesToArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      "1",
      "2",
      "3"
    ]);
  });
});

Mocha.describe("Belt.MutableSet", () => {
  Mocha.test("Belt.MutableSet", () => {
    let cmp = (param, param$1) => {
      let c = Primitive_object.compare(param[0], param$1[0]);
      if (c !== 0) {
        return c;
      } else {
        return Primitive_object.compare(param[1], param$1[1]);
      }
    };
    let PairComparator = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let mySet = Belt_MutableSet.make(PairComparator);
    Belt_MutableSet.add(mySet, [
      1,
      2
    ]);
  });
});

Mocha.describe("Belt.MutableSet.add", () => {
  Mocha.test("Belt.MutableSet.add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    Belt_MutableSet.add(s0, 1);
    Belt_MutableSet.add(s0, 2);
    Belt_MutableSet.add(s0, 2);
    Belt_MutableSet.toArray(s0);
  });
});

Mocha.describe("Belt.MutableSet.copy", () => {
  Mocha.test("Belt.MutableSet.copy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    let copied = Belt_MutableSet.copy(s0);
    Belt_MutableSet.toArray(copied);
  });
});

Mocha.describe("Belt.MutableSet.diff", () => {
  Mocha.test("Belt.MutableSet.diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    Belt_MutableSet.toArray(Belt_MutableSet.diff(s0, s1));
    Belt_MutableSet.toArray(Belt_MutableSet.diff(s1, s0));
  });
});

Mocha.describe("Belt.MutableSet.eq", () => {
  Mocha.test("Belt.MutableSet.eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      5
    ], IntCmp);
    Belt_MutableSet.eq(s0, s1);
  });
});

Mocha.describe("Belt.MutableSet.every", () => {
  Mocha.test("Belt.MutableSet.every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_MutableSet.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp);
    Belt_MutableSet.every(s0, isEven);
  });
});

Mocha.describe("Belt.MutableSet.forEach", () => {
  Mocha.test("Belt.MutableSet.forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_MutableSet.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
});

Mocha.describe("Belt.MutableSet.fromArray", () => {
  Mocha.test("Belt.MutableSet.fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    Belt_MutableSet.toArray(s0);
  });
});

Mocha.describe("Belt.MutableSet.get", () => {
  Mocha.test("Belt.MutableSet.get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    Belt_MutableSet.get(s0, 3);
    Belt_MutableSet.get(s0, 20);
  });
});

Mocha.describe("Belt.MutableSet.has", () => {
  Mocha.test("Belt.MutableSet.has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp);
    Belt_MutableSet.has(set, 3);
    Belt_MutableSet.has(set, 1);
  });
});

Mocha.describe("Belt.MutableSet.intersect", () => {
  Mocha.test("Belt.MutableSet.intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let intersect = Belt_MutableSet.intersect(s0, s1);
    Belt_MutableSet.toArray(intersect);
  });
});

Mocha.describe("Belt.MutableSet.isEmpty", () => {
  Mocha.test("Belt.MutableSet.isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_MutableSet.fromArray([], IntCmp);
    let notEmpty = Belt_MutableSet.fromArray([1], IntCmp);
    Belt_MutableSet.isEmpty(empty);
    Belt_MutableSet.isEmpty(notEmpty);
  });
});

Mocha.describe("Belt.MutableSet.keep", () => {
  Mocha.test("Belt.MutableSet.keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let s1 = Belt_MutableSet.keep(s0, isEven);
    Belt_MutableSet.toArray(s1);
  });
});

Mocha.describe("Belt.MutableSet.maxUndefined", () => {
  Mocha.test("Belt.MutableSet.maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.maxUndefined(s0);
    Belt_MutableSet.maxUndefined(s1);
  });
});

Mocha.describe("Belt.MutableSet.maximum", () => {
  Mocha.test("Belt.MutableSet.maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.maximum(s0);
    Belt_MutableSet.maximum(s1);
  });
});

Mocha.describe("Belt.MutableSet.mergeMany", () => {
  Mocha.test("Belt.MutableSet.mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.make(IntCmp);
    Belt_MutableSet.mergeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Belt_MutableSet.toArray(set);
  });
});

Mocha.describe("Belt.MutableSet.minUndefined", () => {
  Mocha.test("Belt.MutableSet.minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.minUndefined(s0);
    Belt_MutableSet.minUndefined(s1);
  });
});

Mocha.describe("Belt.MutableSet.minimum", () => {
  Mocha.test("Belt.MutableSet.minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.minimum(s0);
    Belt_MutableSet.minimum(s1);
  });
});

Mocha.describe("Belt.MutableSet.partition", () => {
  Mocha.test("Belt.MutableSet.partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_MutableSet.partition(s0, isOdd);
    Belt_MutableSet.toArray(match[0]);
    Belt_MutableSet.toArray(match[1]);
  });
});

Mocha.describe("Belt.MutableSet.reduce", () => {
  Mocha.test("Belt.MutableSet.reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    Belt_MutableSet.reduce(s0, /* [] */0, Belt_List.add);
  });
});

Mocha.describe("Belt.MutableSet.remove", () => {
  Mocha.test("Belt.MutableSet.remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp);
    Belt_MutableSet.remove(s0, 1);
    Belt_MutableSet.remove(s0, 3);
    Belt_MutableSet.remove(s0, 3);
    Belt_MutableSet.toArray(s0);
  });
});

Mocha.describe("Belt.MutableSet.removeMany", () => {
  Mocha.test("Belt.MutableSet.removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Belt_MutableSet.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Belt_MutableSet.toArray(set);
  });
});

Mocha.describe("Belt.MutableSet.size", () => {
  Mocha.test("Belt.MutableSet.size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Belt_MutableSet.size(s0);
  });
});

Mocha.describe("Belt.MutableSet.some", () => {
  Mocha.test("Belt.MutableSet.some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp);
    Belt_MutableSet.some(s0, isOdd);
  });
});

Mocha.describe("Belt.MutableSet.split", () => {
  Mocha.test("Belt.MutableSet.split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_MutableSet.split(s0, 3);
    let match$1 = match[0];
    Belt_MutableSet.toArray(match$1[0]);
    Belt_MutableSet.toArray(match$1[1]);
  });
});

Mocha.describe("Belt.MutableSet.subset", () => {
  Mocha.test("Belt.MutableSet.subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let s2 = Belt_MutableSet.intersect(s0, s1);
    Belt_MutableSet.subset(s2, s0);
    Belt_MutableSet.subset(s2, s1);
    Belt_MutableSet.subset(s1, s0);
  });
});

Mocha.describe("Belt.MutableSet.toArray", () => {
  Mocha.test("Belt.MutableSet.toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.toArray(s0);
  });
});

Mocha.describe("Belt.MutableSet.toList", () => {
  Mocha.test("Belt.MutableSet.toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.toList(s0);
  });
});

Mocha.describe("Belt.MutableSet.union", () => {
  Mocha.test("Belt.MutableSet.union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let union = Belt_MutableSet.union(s0, s1);
    Belt_MutableSet.toArray(union);
  });
});

Mocha.describe("Belt.Option", () => {
  Mocha.test("Belt.Option", () => {});
});

Mocha.describe("Belt.Option.cmp", () => {
  Mocha.test("Belt.Option.cmp", () => {
    let clockCompare = (a, b) => Primitive_int.compare(a % 12, b % 12);
    Belt_Option.cmp(3, 15, clockCompare);
    Belt_Option.cmp(3, 14, clockCompare);
    Belt_Option.cmp(2, 15, clockCompare);
    Belt_Option.cmp(undefined, 15, clockCompare);
    Belt_Option.cmp(14, undefined, clockCompare);
    Belt_Option.cmp(undefined, undefined, clockCompare);
  });
});

Mocha.describe("Belt.Option.eq", () => {
  Mocha.test("Belt.Option.eq", () => {
    let clockEqual = (a, b) => a % 12 === b % 12;
    Belt_Option.eq(3, 15, clockEqual);
    Belt_Option.eq(3, undefined, clockEqual);
    Belt_Option.eq(undefined, 3, clockEqual);
    Belt_Option.eq(undefined, undefined, clockEqual);
  });
});

Mocha.describe("Belt.Option.flatMap", () => {
  Mocha.test("Belt.Option.flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      }
      
    };
    Belt_Option.flatMap(2, addIfAboveOne);
    Belt_Option.flatMap(-4, addIfAboveOne);
    Belt_Option.flatMap(undefined, addIfAboveOne);
  });
});

Mocha.describe("Belt.Option.forEach", () => {
  Mocha.test("Belt.Option.forEach", () => {
    Belt_Option.forEach("thing", x => {
      console.log(x);
    });
    Belt_Option.forEach(undefined, x => {
      console.log(x);
    });
  });
});

Mocha.describe("Belt.Option.getExn", () => {
  Mocha.test("Belt.Option.getExn", () => {
    Pervasives.assertEqual(Belt_Option.getExn(3), 3);
    let exit = 0;
    let val;
    try {
      val = Belt_Option.getExn(undefined);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          3572,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt.Option.getWithDefault", () => {
  Mocha.test("Belt.Option.getWithDefault", () => {
    Belt_Option.getWithDefault(undefined, "Banana");
    Belt_Option.getWithDefault("Apple", "Banana");
    let greet = firstName => "Greetings " + Belt_Option.getWithDefault(firstName, "Anonymous");
    greet("Jane");
    greet(undefined);
  });
});

Mocha.describe("Belt.Option.isNone", () => {
  Mocha.test("Belt.Option.isNone", () => {
    Belt_Option.isNone(undefined);
    Belt_Option.isNone(1);
  });
});

Mocha.describe("Belt.Option.isSome", () => {
  Mocha.test("Belt.Option.isSome", () => {
    Belt_Option.isSome(undefined);
    Belt_Option.isSome(1);
  });
});

Mocha.describe("Belt.Option.keep", () => {
  Mocha.test("Belt.Option.keep", () => {
    Belt_Option.keep(10, x => x > 5);
    Belt_Option.keep(4, x => x > 5);
    Belt_Option.keep(undefined, x => x > 5);
  });
});

Mocha.describe("Belt.Option.map", () => {
  Mocha.test("Belt.Option.map", () => {
    Belt_Option.map(3, x => Math.imul(x, x));
    Belt_Option.map(undefined, x => Math.imul(x, x));
  });
});

Mocha.describe("Belt.Option.mapWithDefault", () => {
  Mocha.test("Belt.Option.mapWithDefault", () => {
    Belt_Option.mapWithDefault(3, 0, x => x + 5 | 0);
    Belt_Option.mapWithDefault(undefined, 0, x => x + 5 | 0);
  });
});

Mocha.describe("Belt.Option.orElse", () => {
  Mocha.test("Belt.Option.orElse", () => {
    Primitive_object.equal(Belt_Option.orElse(1812, 1066), 1812);
    Primitive_object.equal(Belt_Option.orElse(undefined, 1066), 1066);
    Belt_Option.orElse(undefined, undefined) === undefined;
  });
});

Mocha.describe("Belt.Range.every", () => {
  Mocha.test("Belt.Range.every", () => {
    Belt_Range.every(0, 4, i => i < 5);
    Belt_Range.every(0, 4, i => i < 4);
  });
});

Mocha.describe("Belt.Range.everyBy", () => {
  Mocha.test("Belt.Range.everyBy", () => {
    Belt_Range.everyBy(0, 4, 1, i => i % 2 === 0);
    Belt_Range.everyBy(0, 4, 2, i => i % 2 === 0);
  });
});

Mocha.describe("Belt.Range.forEach", () => {
  Mocha.test("Belt.Range.forEach", () => {
    Belt_Range.forEach(0, 4, i => {
      console.log(i);
    });
  });
});

Mocha.describe("Belt.Range.some", () => {
  Mocha.test("Belt.Range.some", () => {
    Belt_Range.some(0, 4, i => i > 5);
    Belt_Range.some(0, 4, i => i > 2);
  });
});

Mocha.describe("Belt.Range.someBy", () => {
  Mocha.test("Belt.Range.someBy", () => {
    Belt_Range.someBy(1, 5, 2, i => i % 2 === 0);
    Belt_Range.someBy(0, 4, 2, i => i % 2 === 0);
  });
});

Mocha.describe("Belt.Result.cmp", () => {
  Mocha.test("Belt.Result.cmp", () => {
    let mod10cmp = (a, b) => Primitive_int.compare(a % 10, b % 10);
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === 1;
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 57
    }, {
      TAG: "Ok",
      _0: 39
    }, mod10cmp) === -1;
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 1;
    Belt_Result.cmp({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === -1;
    Belt_Result.cmp({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 0;
  });
});

Mocha.describe("Belt.Result.eq", () => {
  Mocha.test("Belt.Result.eq", () => {
    let good1 = {
      TAG: "Ok",
      _0: 42
    };
    let good2 = {
      TAG: "Ok",
      _0: 32
    };
    let bad1 = {
      TAG: "Error",
      _0: "invalid"
    };
    let bad2 = {
      TAG: "Error",
      _0: "really invalid"
    };
    let mod10equal = (a, b) => a % 10 === b % 10;
    Belt_Result.eq(good1, good2, mod10equal) === true;
    Belt_Result.eq(good1, bad1, mod10equal) === false;
    Belt_Result.eq(bad2, good2, mod10equal) === false;
    Belt_Result.eq(bad1, bad2, mod10equal) === true;
  });
});

Mocha.describe("Belt.Result.flatMap", () => {
  Mocha.test("Belt.Result.flatMap", () => {
    let recip = x => {
      if (x !== 0.0) {
        return {
          TAG: "Ok",
          _0: 1.0 / x
        };
      } else {
        return {
          TAG: "Error",
          _0: "Divide by zero"
        };
      }
    };
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Ok",
      _0: 2.0
    }, recip), {
      TAG: "Ok",
      _0: 0.5
    });
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Ok",
      _0: 0.0
    }, recip), {
      TAG: "Error",
      _0: "Divide by zero"
    });
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Error",
      _0: "Already bad"
    }, recip), {
      TAG: "Error",
      _0: "Already bad"
    });
  });
});

Mocha.describe("Belt.Result.getExn", () => {
  Mocha.test("Belt.Result.getExn", () => {
    Pervasives.assertEqual(Belt_Result.getExn({
      TAG: "Ok",
      _0: 42
    }), 42);
    let exit = 0;
    let val;
    try {
      val = Belt_Result.getExn({
        TAG: "Error",
        _0: "Invalid data"
      });
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          3806,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt.Result.getWithDefault", () => {
  Mocha.test("Belt.Result.getWithDefault", () => {
    Belt_Result.getWithDefault({
      TAG: "Ok",
      _0: 42
    }, 0) === 42;
    Belt_Result.getWithDefault({
      TAG: "Error",
      _0: "Invalid Data"
    }, 0) === 0;
  });
});

Mocha.describe("Belt.Result.map", () => {
  Mocha.test("Belt.Result.map", () => {
    let f = x => Math.sqrt(x);
    Primitive_object.equal(Belt_Result.map({
      TAG: "Ok",
      _0: 64
    }, f), {
      TAG: "Ok",
      _0: 8.0
    });
    Primitive_object.equal(Belt_Result.map({
      TAG: "Error",
      _0: "Invalid data"
    }, f), {
      TAG: "Error",
      _0: "Invalid data"
    });
  });
});

Mocha.describe("Belt.Result.mapWithDefault", () => {
  Mocha.test("Belt.Result.mapWithDefault", () => {
    Belt_Result.mapWithDefault({
      TAG: "Ok",
      _0: 42
    }, 0, x => x / 2 | 0) === 21;
    Belt_Result.mapWithDefault({
      TAG: "Error",
      _0: "Invalid data"
    }, 0, x => x / 2 | 0) === 0;
  });
});

Mocha.describe("Belt.Set", () => {
  Mocha.test("Belt.Set", () => {
    let cmp = (param, param$1) => {
      let c = Primitive_object.compare(param[0], param$1[0]);
      if (c !== 0) {
        return c;
      } else {
        return Primitive_object.compare(param[1], param$1[1]);
      }
    };
    let PairComparator = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let mySet = Belt_Set.make(PairComparator);
    Belt_Set.add(mySet, [
      1,
      2
    ]);
    let cmp$1 = Primitive_object.compare;
    Belt_Id.MakeComparable({
      cmp: cmp$1
    });
  });
});

Mocha.describe("Belt.Set.Dict.add", () => {
  Mocha.test("Belt.Set.Dict.add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.add(undefined, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.add(s1, 2, IntCmp.cmp);
    let s3 = Belt_SetDict.add(s2, 2, IntCmp.cmp);
    Belt_SetDict.toArray(undefined);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Belt_SetDict.toArray(s3);
    Primitive_object.equal(s2, s3);
  });
});

Mocha.describe("Belt.Set.Dict.diff", () => {
  Mocha.test("Belt.Set.Dict.diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let diff1 = Belt_SetDict.diff(s0, s1, IntCmp.cmp);
    let diff2 = Belt_SetDict.diff(s1, s0, IntCmp.cmp);
    Belt_SetDict.toArray(diff1);
    Belt_SetDict.toArray(diff2);
  });
});

Mocha.describe("Belt.Set.Dict.empty", () => {
  Mocha.test("Belt.Set.Dict.empty", () => {});
});

Mocha.describe("Belt.Set.Dict.eq", () => {
  Mocha.test("Belt.Set.Dict.eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.eq(s0, s1, IntCmp.cmp);
  });
});

Mocha.describe("Belt.Set.Dict.every", () => {
  Mocha.test("Belt.Set.Dict.every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.every(s0, isEven);
  });
});

Mocha.describe("Belt.Set.Dict.forEach", () => {
  Mocha.test("Belt.Set.Dict.forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_SetDict.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
});

Mocha.describe("Belt.Set.Dict.fromArray", () => {
  Mocha.test("Belt.Set.Dict.fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
});

Mocha.describe("Belt.Set.Dict.get", () => {
  Mocha.test("Belt.Set.Dict.get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    Belt_SetDict.get(s0, 3, IntCmp.cmp);
    Belt_SetDict.get(s0, 20, IntCmp.cmp);
  });
});

Mocha.describe("Belt.Set.Dict.has", () => {
  Mocha.test("Belt.Set.Dict.has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.has(set, 3, IntCmp.cmp);
    Belt_SetDict.has(set, 1, IntCmp.cmp);
  });
});

Mocha.describe("Belt.Set.Dict.intersect", () => {
  Mocha.test("Belt.Set.Dict.intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let intersect = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(intersect);
  });
});

Mocha.describe("Belt.Set.Dict.isEmpty", () => {
  Mocha.test("Belt.Set.Dict.isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_SetDict.fromArray([], IntCmp.cmp);
    let notEmpty = Belt_SetDict.fromArray([1], IntCmp.cmp);
    Belt_SetDict.isEmpty(empty);
    Belt_SetDict.isEmpty(notEmpty);
  });
});

Mocha.describe("Belt.Set.Dict.keep", () => {
  Mocha.test("Belt.Set.Dict.keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.keep(s0, isEven);
    Belt_SetDict.toArray(s1);
  });
});

Mocha.describe("Belt.Set.Dict.maxUndefined", () => {
  Mocha.test("Belt.Set.Dict.maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maxUndefined(undefined);
    Belt_SetDict.maxUndefined(s1);
  });
});

Mocha.describe("Belt.Set.Dict.maximum", () => {
  Mocha.test("Belt.Set.Dict.maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maximum(undefined);
    Belt_SetDict.maximum(s1);
  });
});

Mocha.describe("Belt.Set.Dict.mergeMany", () => {
  Mocha.test("Belt.Set.Dict.mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let newSet = Belt_SetDict.mergeMany(undefined, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
});

Mocha.describe("Belt.Set.Dict.minUndefined", () => {
  Mocha.test("Belt.Set.Dict.minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minUndefined(undefined);
    Belt_SetDict.minUndefined(s1);
  });
});

Mocha.describe("Belt.Set.Dict.minimum", () => {
  Mocha.test("Belt.Set.Dict.minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minimum(undefined);
    Belt_SetDict.minimum(s1);
  });
});

Mocha.describe("Belt.Set.Dict.partition", () => {
  Mocha.test("Belt.Set.Dict.partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.partition(s0, isOdd);
    Belt_SetDict.toArray(match[0]);
    Belt_SetDict.toArray(match[1]);
  });
});

Mocha.describe("Belt.Set.Dict.reduce", () => {
  Mocha.test("Belt.Set.Dict.reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    Belt_SetDict.reduce(s0, /* [] */0, Belt_List.add);
  });
});

Mocha.describe("Belt.Set.Dict.remove", () => {
  Mocha.test("Belt.Set.Dict.remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.remove(s0, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.remove(s1, 3, IntCmp.cmp);
    let s3 = Belt_SetDict.remove(s2, 3, IntCmp.cmp);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Primitive_object.equal(s2, s3);
  });
});

Mocha.describe("Belt.Set.Dict.removeMany", () => {
  Mocha.test("Belt.Set.Dict.removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    let newSet = Belt_SetDict.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
});

Mocha.describe("Belt.Set.Dict.size", () => {
  Mocha.test("Belt.Set.Dict.size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    Belt_SetDict.size(s0);
  });
});

Mocha.describe("Belt.Set.Dict.some", () => {
  Mocha.test("Belt.Set.Dict.some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.some(s0, isOdd);
  });
});

Mocha.describe("Belt.Set.Dict.split", () => {
  Mocha.test("Belt.Set.Dict.split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.split(s0, 3, IntCmp.cmp);
    let match$1 = match[0];
    Belt_SetDict.toArray(match$1[0]);
    Belt_SetDict.toArray(match$1[1]);
  });
});

Mocha.describe("Belt.Set.Dict.subset", () => {
  Mocha.test("Belt.Set.Dict.subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let s2 = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.subset(s2, s0, IntCmp.cmp);
    Belt_SetDict.subset(s2, s1, IntCmp.cmp);
    Belt_SetDict.subset(s1, s0, IntCmp.cmp);
  });
});

Mocha.describe("Belt.Set.Dict.toArray", () => {
  Mocha.test("Belt.Set.Dict.toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
});

Mocha.describe("Belt.Set.Dict.toList", () => {
  Mocha.test("Belt.Set.Dict.toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toList(s0);
  });
});

Mocha.describe("Belt.Set.Dict.union", () => {
  Mocha.test("Belt.Set.Dict.union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let union = Belt_SetDict.union(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(union);
  });
});

Mocha.describe("Belt.Set.add", () => {
  Mocha.test("Belt.Set.add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.add(s0, 1);
    let s2 = Belt_Set.add(s1, 2);
    let s3 = Belt_Set.add(s2, 2);
    Pervasives.assertEqual(Belt_Set.toArray(s0), []);
    Pervasives.assertEqual(Belt_Set.toArray(s1), [1]);
    Pervasives.assertEqual(Belt_Set.toArray(s2), [
      1,
      2
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(s3), [
      1,
      2
    ]);
    Pervasives.assertEqual(s2, s3);
  });
});

Mocha.describe("Belt.Set.diff", () => {
  Mocha.test("Belt.Set.diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.toArray(Belt_Set.diff(s0, s1)), [6]);
    Pervasives.assertEqual(Belt_Set.toArray(Belt_Set.diff(s1, s0)), [
      1,
      4
    ]);
  });
});

Mocha.describe("Belt.Set.eq", () => {
  Mocha.test("Belt.Set.eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.eq(s0, s1), true);
  });
});

Mocha.describe("Belt.Set.every", () => {
  Mocha.test("Belt.Set.every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_Set.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.every(s0, isEven), true);
  });
});

Mocha.describe("Belt.Set.forEach", () => {
  Mocha.test("Belt.Set.forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_Set.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
    Pervasives.assertEqual(acc.contents, {
      hd: 6,
      tl: {
        hd: 5,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    });
  });
});

Mocha.describe("Belt.Set.fromArray", () => {
  Mocha.test("Belt.Set.fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.toArray(s0), [
      1,
      2,
      3,
      4
    ]);
  });
});

Mocha.describe("Belt.Set.get", () => {
  Mocha.test("Belt.Set.get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.get(s0, 3), 3);
    Pervasives.assertEqual(Belt_Set.get(s0, 20), undefined);
  });
});

Mocha.describe("Belt.Set.has", () => {
  Mocha.test("Belt.Set.has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.has(set, 3), false);
    Pervasives.assertEqual(Belt_Set.has(set, 1), true);
  });
});

Mocha.describe("Belt.Set.intersect", () => {
  Mocha.test("Belt.Set.intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let intersect = Belt_Set.intersect(s0, s1);
    Pervasives.assertEqual(Belt_Set.toArray(intersect), [
      2,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt.Set.isEmpty", () => {
  Mocha.test("Belt.Set.isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_Set.fromArray([], IntCmp);
    let notEmpty = Belt_Set.fromArray([1], IntCmp);
    Pervasives.assertEqual(Belt_Set.isEmpty(empty), true);
    Pervasives.assertEqual(Belt_Set.isEmpty(notEmpty), false);
  });
});

Mocha.describe("Belt.Set.keep", () => {
  Mocha.test("Belt.Set.keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let s1 = Belt_Set.keep(s0, isEven);
    Pervasives.assertEqual(Belt_Set.toArray(s1), [
      2,
      4
    ]);
  });
});

Mocha.describe("Belt.Set.make", () => {
  Mocha.test("Belt.Set.make", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.make(IntCmp);
    Pervasives.assertEqual(Belt_Set.isEmpty(set), true);
  });
});

Mocha.describe("Belt.Set.maxUndefined", () => {
  Mocha.test("Belt.Set.maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Primitive_option.fromUndefined(Belt_Set.maxUndefined(s0)), undefined);
    Pervasives.assertEqual(Primitive_option.fromUndefined(Belt_Set.maxUndefined(s1)), 5);
  });
});

Mocha.describe("Belt.Set.maximum", () => {
  Mocha.test("Belt.Set.maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.maximum(s0), undefined);
    Pervasives.assertEqual(Belt_Set.maximum(s1), 5);
  });
});

Mocha.describe("Belt.Set.mergeMany", () => {
  Mocha.test("Belt.Set.mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.make(IntCmp);
    let newSet = Belt_Set.mergeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(newSet), [
      1,
      2,
      3,
      4,
      5
    ]);
  });
});

Mocha.describe("Belt.Set.minUndefined", () => {
  Mocha.test("Belt.Set.minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Primitive_option.fromUndefined(Belt_Set.minUndefined(s0)), undefined);
    Pervasives.assertEqual(Primitive_option.fromUndefined(Belt_Set.minUndefined(s1)), 1);
  });
});

Mocha.describe("Belt.Set.minimum", () => {
  Mocha.test("Belt.Set.minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.minimum(s0), undefined);
    Pervasives.assertEqual(Belt_Set.minimum(s1), 1);
  });
});

Mocha.describe("Belt.Set.partition", () => {
  Mocha.test("Belt.Set.partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_Set.partition(s0, isOdd);
    Pervasives.assertEqual(Belt_Set.toArray(match[0]), [
      1,
      3,
      5
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(match[1]), [
      2,
      4
    ]);
  });
});

Mocha.describe("Belt.Set.reduce", () => {
  Mocha.test("Belt.Set.reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.reduce(s0, /* [] */0, Belt_List.add), {
      hd: 6,
      tl: {
        hd: 5,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    });
  });
});

Mocha.describe("Belt.Set.remove", () => {
  Mocha.test("Belt.Set.remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp);
    let s1 = Belt_Set.remove(s0, 1);
    let s2 = Belt_Set.remove(s1, 3);
    let s3 = Belt_Set.remove(s2, 3);
    Pervasives.assertEqual(Belt_Set.toArray(s1), [
      2,
      3,
      4,
      5
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(s2), [
      2,
      4,
      5
    ]);
    Pervasives.assertEqual(s2, s3);
  });
});

Mocha.describe("Belt.Set.removeMany", () => {
  Mocha.test("Belt.Set.removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    let newSet = Belt_Set.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(newSet), []);
  });
});

Mocha.describe("Belt.Set.size", () => {
  Mocha.test("Belt.Set.size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.size(s0), 4);
  });
});

Mocha.describe("Belt.Set.some", () => {
  Mocha.test("Belt.Set.some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.some(s0, isOdd), true);
  });
});

Mocha.describe("Belt.Set.split", () => {
  Mocha.test("Belt.Set.split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_Set.split(s0, 3);
    let match$1 = match[0];
    Pervasives.assertEqual(match[1], true);
    Pervasives.assertEqual(Belt_Set.toArray(match$1[0]), [
      1,
      2
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(match$1[1]), [
      4,
      5
    ]);
  });
});

Mocha.describe("Belt.Set.subset", () => {
  Mocha.test("Belt.Set.subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let s2 = Belt_Set.intersect(s0, s1);
    Pervasives.assertEqual(Belt_Set.subset(s2, s0), true);
    Pervasives.assertEqual(Belt_Set.subset(s2, s1), true);
    Pervasives.assertEqual(Belt_Set.subset(s1, s0), false);
  });
});

Mocha.describe("Belt.Set.toArray", () => {
  Mocha.test("Belt.Set.toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.toArray(s0), [
      1,
      2,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt.Set.toList", () => {
  Mocha.test("Belt.Set.toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.toList(s0), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    });
  });
});

Mocha.describe("Belt.Set.union", () => {
  Mocha.test("Belt.Set.union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let union = Belt_Set.union(s0, s1);
    Pervasives.assertEqual(Belt_Set.toArray(union), [
      1,
      2,
      3,
      4,
      5,
      6
    ]);
  });
});

Mocha.describe("Belt.SortArray.binarySearchBy", () => {
  Mocha.test("Belt.SortArray.binarySearchBy", () => {
    Belt_SortArray.binarySearchBy([
      1,
      2,
      3,
      4,
      33,
      35,
      36
    ], 33, Primitive_int.compare) === 4;
    Pervasives.lnot(Belt_SortArray.binarySearchBy([
      1,
      3,
      5,
      7
    ], 4, Primitive_int.compare)) === 2;
  });
});

Mocha.describe("Belt.SortArray.strictlySortedLength", () => {
  Mocha.test("Belt.SortArray.strictlySortedLength", () => {
    Belt_SortArray.strictlySortedLength([
      1,
      2,
      3,
      4,
      3
    ], (x, y) => x < y) === 4;
    Belt_SortArray.strictlySortedLength([], Primitive_object.lessthan) === 0;
    Belt_SortArray.strictlySortedLength([1], (x, y) => x < y) === 1;
    Belt_SortArray.strictlySortedLength([
      4,
      3,
      2,
      1
    ], (x, y) => x < y) === -4;
  });
});

Mocha.describe("Belt_Array.blit", () => {
  Mocha.test("Belt_Array.blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
});

Mocha.describe("Belt_Array.cmp", () => {
  Mocha.test("Belt_Array.cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
});

Mocha.describe("Belt_Array.concat", () => {
  Mocha.test("Belt_Array.concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
});

Mocha.describe("Belt_Array.concatMany", () => {
  Mocha.test("Belt_Array.concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
});

Mocha.describe("Belt_Array.eq", () => {
  Mocha.test("Belt_Array.eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
});

Mocha.describe("Belt_Array.every", () => {
  Mocha.test("Belt_Array.every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_Array.every2", () => {
  Mocha.test("Belt_Array.every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
});

Mocha.describe("Belt_Array.fill", () => {
  Mocha.test("Belt_Array.fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
});

Mocha.describe("Belt_Array.flatMap", () => {
  Mocha.test("Belt_Array.flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
});

Mocha.describe("Belt_Array.forEach", () => {
  Mocha.test("Belt_Array.forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
});

Mocha.describe("Belt_Array.forEachWithIndex", () => {
  Mocha.test("Belt_Array.forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
});

Mocha.describe("Belt_Array.get", () => {
  Mocha.test("Belt_Array.get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
});

Mocha.describe("Belt_Array.getBy", () => {
  Mocha.test("Belt_Array.getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_Array.getIndexBy", () => {
  Mocha.test("Belt_Array.getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_Array.joinWith", () => {
  Mocha.test("Belt_Array.joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
});

Mocha.describe("Belt_Array.keepMap", () => {
  Mocha.test("Belt_Array.keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
});

Mocha.describe("Belt_Array.keepWithIndex", () => {
  Mocha.test("Belt_Array.keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
});

Mocha.describe("Belt_Array.length", () => {
  Mocha.test("Belt_Array.length", () => {});
});

Mocha.describe("Belt_Array.makeBy", () => {
  Mocha.test("Belt_Array.makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => Math.imul(i, i)), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
});

Mocha.describe("Belt_Array.makeUninitialized", () => {
  Mocha.test("Belt_Array.makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
});

Mocha.describe("Belt_Array.makeUninitializedUnsafe", () => {
  Mocha.test("Belt_Array.makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
});

Mocha.describe("Belt_Array.map", () => {
  Mocha.test("Belt_Array.map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
});

Mocha.describe("Belt_Array.mapWithIndex", () => {
  Mocha.test("Belt_Array.mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt_Array.partition", () => {
  Mocha.test("Belt_Array.partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_Array.range", () => {
  Mocha.test("Belt_Array.range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
});

Mocha.describe("Belt_Array.rangeBy", () => {
  Mocha.test("Belt_Array.rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
});

Mocha.describe("Belt_Array.reduce", () => {
  Mocha.test("Belt_Array.reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
});

Mocha.describe("Belt_Array.reduceReverse", () => {
  Mocha.test("Belt_Array.reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
});

Mocha.describe("Belt_Array.reduceReverse2", () => {
  Mocha.test("Belt_Array.reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
});

Mocha.describe("Belt_Array.reduceWithIndex", () => {
  Mocha.test("Belt_Array.reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
});

Mocha.describe("Belt_Array.reverse", () => {
  Mocha.test("Belt_Array.reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_Array.reverseInPlace", () => {
  Mocha.test("Belt_Array.reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_Array.slice", () => {
  Mocha.test("Belt_Array.slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_Array.sliceToEnd", () => {
  Mocha.test("Belt_Array.sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_Array.some", () => {
  Mocha.test("Belt_Array.some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_Array.some2", () => {
  Mocha.test("Belt_Array.some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
});

Mocha.describe("Belt_Array.truncateToLengthUnsafe", () => {
  Mocha.test("Belt_Array.truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
});

Mocha.describe("Belt_Array.unzip", () => {
  Mocha.test("Belt_Array.unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
});

Mocha.describe("Belt_Array.zip", () => {
  Mocha.test("Belt_Array.zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_Array.zipBy", () => {
  Mocha.test("Belt_Array.zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt_Float.*", () => {
  Mocha.test("Belt_Float.*", () => {
    Pervasives.assertEqual(2.0 * 2.0, 4.0);
  });
});

Mocha.describe("Belt_Float.+", () => {
  Mocha.test("Belt_Float.+", () => {
    Pervasives.assertEqual(2.0 + 2.0, 4.0);
  });
});

Mocha.describe("Belt_Float.-", () => {
  Mocha.test("Belt_Float.-", () => {
    Pervasives.assertEqual(2.0 - 1.0, 1.0);
  });
});

Mocha.describe("Belt_Float./", () => {
  Mocha.test("Belt_Float./", () => {
    Pervasives.assertEqual(4.0 / 2.0, 2.0);
  });
});

Mocha.describe("Belt_Float.fromInt", () => {
  Mocha.test("Belt_Float.fromInt", () => {
    console.log(1 === 1.0);
  });
});

Mocha.describe("Belt_Float.fromString", () => {
  Mocha.test("Belt_Float.fromString", () => {
    console.log(Belt_Float.fromString("1.0") === 1.0);
  });
});

Mocha.describe("Belt_Float.toInt", () => {
  Mocha.test("Belt_Float.toInt", () => {
    console.log(true);
  });
});

Mocha.describe("Belt_Float.toString", () => {
  Mocha.test("Belt_Float.toString", () => {
    console.log(String(1.0) === "1.0");
  });
});

Mocha.describe("Belt_HashMap.clear", () => {
  Mocha.test("Belt_HashMap.clear", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.fromArray([[
        1,
        "1"
      ]], IntHash);
    Belt_HashMap.clear(hMap);
    Belt_HashMap.isEmpty(hMap) === true;
  });
});

Mocha.describe("Belt_HashMap.copy", () => {
  Mocha.test("Belt_HashMap.copy", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntHash);
    let s1 = Belt_HashMap.copy(s0);
    Belt_HashMap.set(s0, 2, "3");
    Primitive_object.notequal(Belt_HashMap.get(s0, 2), Belt_HashMap.get(s1, 2));
  });
});

Mocha.describe("Belt_HashMap.forEach", () => {
  Mocha.test("Belt_HashMap.forEach", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.forEach(s0, (key, value) => {
      console.log(key, value);
    });
  });
});

Mocha.describe("Belt_HashMap.fromArray", () => {
  Mocha.test("Belt_HashMap.fromArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ], IntHash);
    Primitive_object.equal(Belt_HashMap.toArray(s0), [
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ]);
  });
});

Mocha.describe("Belt_HashMap.get", () => {
  Mocha.test("Belt_HashMap.get", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Primitive_object.equal(Belt_HashMap.get(s0, 1), "value1");
    Belt_HashMap.get(s0, 2) === undefined;
  });
});

Mocha.describe("Belt_HashMap.getBucketHistogram", () => {
  Mocha.test("Belt_HashMap.getBucketHistogram", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 1, "1");
    Belt_HashMap.getBucketHistogram(hMap);
  });
});

Mocha.describe("Belt_HashMap.has", () => {
  Mocha.test("Belt_HashMap.has", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.has(s0, 1) === true;
    Belt_HashMap.has(s0, 2) === false;
  });
});

Mocha.describe("Belt_HashMap.isEmpty", () => {
  Mocha.test("Belt_HashMap.isEmpty", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    Belt_HashMap.isEmpty(Belt_HashMap.fromArray([[
        1,
        "1"
      ]], IntHash)) === false;
  });
});

Mocha.describe("Belt_HashMap.keepMapInPlace", () => {
  Mocha.test("Belt_HashMap.keepMapInPlace", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Belt_HashMap.keepMapInPlace(s0, (key, value) => {
      if (key === 1) {
        return;
      } else {
        return value;
      }
    });
  });
});

Mocha.describe("Belt_HashMap.keysToArray", () => {
  Mocha.test("Belt_HashMap.keysToArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.keysToArray(s0), [
      1,
      2
    ]);
  });
});

Mocha.describe("Belt_HashMap.logStats", () => {
  Mocha.test("Belt_HashMap.logStats", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 1, "1");
    Belt_HashMap.logStats(hMap);
  });
});

Mocha.describe("Belt_HashMap.make", () => {
  Mocha.test("Belt_HashMap.make", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 0, "a");
  });
});

Mocha.describe("Belt_HashMap.mergeMany", () => {
  Mocha.test("Belt_HashMap.mergeMany", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.mergeMany(hMap, [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ]
    ]);
  });
});

Mocha.describe("Belt_HashMap.reduce", () => {
  Mocha.test("Belt_HashMap.reduce", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Pervasives.assertEqual(Belt_HashMap.reduce(s0, "", (acc, param, value) => acc + (", " + value)), ", value1, value2");
    console.log("lol");
  });
});

Mocha.describe("Belt_HashMap.remove", () => {
  Mocha.test("Belt_HashMap.remove", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.remove(s0, 1);
    Belt_HashMap.has(s0, 1) === false;
  });
});

Mocha.describe("Belt_HashMap.set", () => {
  Mocha.test("Belt_HashMap.set", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntHash);
    Belt_HashMap.set(s0, 2, "3");
    Primitive_object.equal(Belt_HashMap.valuesToArray(s0), [
      "1",
      "3",
      "3"
    ]);
  });
});

Mocha.describe("Belt_HashMap.size", () => {
  Mocha.test("Belt_HashMap.size", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Belt_HashMap.size(s0) === 2;
  });
});

Mocha.describe("Belt_HashMap.toArray", () => {
  Mocha.test("Belt_HashMap.toArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.toArray(s0), [
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ]);
  });
});

Mocha.describe("Belt_HashMap.valuesToArray", () => {
  Mocha.test("Belt_HashMap.valuesToArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.valuesToArray(s0), [
      "value1",
      "value2"
    ]);
  });
});

Mocha.describe("Belt_Int.*", () => {
  Mocha.test("Belt_Int.*", () => {
    Pervasives.assertEqual(4, 4);
  });
});

Mocha.describe("Belt_Int.+", () => {
  Mocha.test("Belt_Int.+", () => {
    Pervasives.assertEqual(4, 4);
  });
});

Mocha.describe("Belt_Int.-", () => {
  Mocha.test("Belt_Int.-", () => {
    Pervasives.assertEqual(1, 1);
  });
});

Mocha.describe("Belt_Int./", () => {
  Mocha.test("Belt_Int./", () => {
    Pervasives.assertEqual(2, 2);
  });
});

Mocha.describe("Belt_Int.fromFloat", () => {
  Mocha.test("Belt_Int.fromFloat", () => {
    Pervasives.assertEqual(1, 1);
  });
});

Mocha.describe("Belt_Int.fromString", () => {
  Mocha.test("Belt_Int.fromString", () => {
    Pervasives.assertEqual(Belt_Int.fromString("1"), 1);
  });
});

Mocha.describe("Belt_Int.toFloat", () => {
  Mocha.test("Belt_Int.toFloat", () => {
    Pervasives.assertEqual(1, 1.0);
  });
});

Mocha.describe("Belt_Int.toString", () => {
  Mocha.test("Belt_Int.toString", () => {
    Pervasives.assertEqual(String(1), "1");
  });
});

Mocha.describe("Belt_List.add", () => {
  Mocha.test("Belt_List.add", () => {
    Belt_List.add({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, 1);
    Belt_List.add({
      hd: "World",
      tl: {
        hd: "!",
        tl: /* [] */0
      }
    }, "Hello");
  });
});

Mocha.describe("Belt_List.cmp", () => {
  Mocha.test("Belt_List.cmp", () => {
    Belt_List.cmp({
      hd: 3,
      tl: /* [] */0
    }, {
      hd: 3,
      tl: {
        hd: 7,
        tl: /* [] */0
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 5,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: /* [] */0
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
  });
});

Mocha.describe("Belt_List.cmpByLength", () => {
  Mocha.test("Belt_List.cmpByLength", () => {
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    });
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    });
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, {
      hd: 5,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    });
  });
});

Mocha.describe("Belt_List.concat", () => {
  Mocha.test("Belt_List.concat", () => {
    Belt_List.concat({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    });
  });
});

Mocha.describe("Belt_List.concatMany", () => {
  Mocha.test("Belt_List.concatMany", () => {
    Belt_List.concatMany([
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      /* [] */0,
      {
        hd: 3,
        tl: /* [] */0
      }
    ]);
  });
});

Mocha.describe("Belt_List.drop", () => {
  Mocha.test("Belt_List.drop", () => {
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 3);
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
});

Mocha.describe("Belt_List.eq", () => {
  Mocha.test("Belt_List.eq", () => {
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
});

Mocha.describe("Belt_List.every", () => {
  Mocha.test("Belt_List.every", () => {
    let isBelow10 = value => value < 10;
    Belt_List.every({
      hd: 1,
      tl: {
        hd: 9,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
    Belt_List.every({
      hd: 1,
      tl: {
        hd: 99,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
  });
});

Mocha.describe("Belt_List.every2", () => {
  Mocha.test("Belt_List.every2", () => {
    Belt_List.every2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Belt_List.every2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.every2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.every2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
});

Mocha.describe("Belt_List.filter", () => {
  Mocha.test("Belt_List.filter", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.filter({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    Belt_List.filter({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Belt_Option.isSome);
  });
});

Mocha.describe("Belt_List.filterWithIndex", () => {
  Mocha.test("Belt_List.filterWithIndex", () => {
    Belt_List.filterWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
});

Mocha.describe("Belt_List.flatten", () => {
  Mocha.test("Belt_List.flatten", () => {
    Belt_List.flatten({
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: /* [] */0,
        tl: {
          hd: {
            hd: 3,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt_List.forEach", () => {
  Mocha.test("Belt_List.forEach", () => {
    Belt_List.forEach({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, x => {
      console.log("Item: " + x);
    });
  });
});

Mocha.describe("Belt_List.forEach2", () => {
  Mocha.test("Belt_List.forEach2", () => {
    Belt_List.forEach2({
      hd: "Z",
      tl: {
        hd: "Y",
        tl: /* [] */0
      }
    }, {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    }, (x, y) => {
      console.log(x, y);
    });
  });
});

Mocha.describe("Belt_List.forEachWithIndex", () => {
  Mocha.test("Belt_List.forEachWithIndex", () => {
    Belt_List.forEachWithIndex({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, (index, x) => {
      console.log("Item " + String(index) + " is " + x);
    });
  });
});

Mocha.describe("Belt_List.fromArray", () => {
  Mocha.test("Belt_List.fromArray", () => {
    Belt_List.fromArray([
      1,
      2,
      3
    ]);
  });
});

Mocha.describe("Belt_List.get", () => {
  Mocha.test("Belt_List.get", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Belt_List.get(abc, 1);
    Belt_List.get(abc, 4);
  });
});

Mocha.describe("Belt_List.getAssoc", () => {
  Mocha.test("Belt_List.getAssoc", () => {
    Belt_List.getAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 3, (a, b) => a === b);
    Belt_List.getAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, (k, item) => k === item);
  });
});

Mocha.describe("Belt_List.getBy", () => {
  Mocha.test("Belt_List.getBy", () => {
    Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 3);
    Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 4);
  });
});

Mocha.describe("Belt_List.getExn", () => {
  Mocha.test("Belt_List.getExn", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Pervasives.assertEqual(Belt_List.getExn(abc, 1), "B");
    let exit = 0;
    let val;
    try {
      val = Belt_List.getExn(abc, 4);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          6148,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt_List.has", () => {
  Mocha.test("Belt_List.has", () => {
    Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => a === b);
    Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4, (a, b) => a === b);
    Belt_List.has({
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
});

Mocha.describe("Belt_List.hasAssoc", () => {
  Mocha.test("Belt_List.hasAssoc", () => {
    Belt_List.hasAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Belt_List.hasAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 25, (k, item) => k === item);
  });
});

Mocha.describe("Belt_List.head", () => {
  Mocha.test("Belt_List.head", () => {
    Belt_List.head(/* [] */0);
    Belt_List.head({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt_List.headExn", () => {
  Mocha.test("Belt_List.headExn", () => {
    Pervasives.assertEqual(Belt_List.headExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), 1);
    let exit = 0;
    let val;
    try {
      val = Belt_List.headExn(/* [] */0);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          6197,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt_List.keep", () => {
  Mocha.test("Belt_List.keep", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.keep({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    Belt_List.keep({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Belt_Option.isSome);
  });
});

Mocha.describe("Belt_List.keepMap", () => {
  Mocha.test("Belt_List.keepMap", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => {
      if (isEven(x)) {
        return x;
      }
      
    });
    Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: undefined,
          tl: /* [] */0
        }
      }
    }, x => x);
  });
});

Mocha.describe("Belt_List.keepWithIndex", () => {
  Mocha.test("Belt_List.keepWithIndex", () => {
    Belt_List.keepWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
});

Mocha.describe("Belt_List.length", () => {
  Mocha.test("Belt_List.length", () => {
    Belt_List.length({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt_List.make", () => {
  Mocha.test("Belt_List.make", () => {
    Belt_List.make(3, 1);
  });
});

Mocha.describe("Belt_List.makeBy", () => {
  Mocha.test("Belt_List.makeBy", () => {
    Belt_List.makeBy(5, i => i);
    Belt_List.makeBy(5, i => Math.imul(i, i));
  });
});

Mocha.describe("Belt_List.map", () => {
  Mocha.test("Belt_List.map", () => {
    Belt_List.map({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, x => x + 1 | 0);
  });
});

Mocha.describe("Belt_List.mapReverse", () => {
  Mocha.test("Belt_List.mapReverse", () => {
    Pervasives.assertEqual(Belt_List.mapReverse({
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, x => Math.imul(x, x)), {
      hd: 25,
      tl: {
        hd: 16,
        tl: {
          hd: 9,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt_List.mapReverse2", () => {
  Mocha.test("Belt_List.mapReverse2", () => {
    Belt_List.mapReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a + b | 0);
  });
});

Mocha.describe("Belt_List.mapWithIndex", () => {
  Mocha.test("Belt_List.mapWithIndex", () => {
    Belt_List.mapWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, (index, x) => index + x | 0);
  });
});

Mocha.describe("Belt_List.partition", () => {
  Mocha.test("Belt_List.partition", () => {
    Pervasives.assertEqual(Belt_List.partition({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 2), [
      {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      },
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    ]);
  });
});

Mocha.describe("Belt_List.reduce", () => {
  Mocha.test("Belt_List.reduce", () => {
    Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item) => acc + item | 0);
  });
});

Mocha.describe("Belt_List.reduce2", () => {
  Mocha.test("Belt_List.reduce2", () => {
    Belt_List.reduce2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + Math.imul(x, x) | 0) + y | 0);
  });
});

Mocha.describe("Belt_List.reduceReverse", () => {
  Mocha.test("Belt_List.reduceReverse", () => {
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 10, (a, b) => a - b | 0);
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, /* [] */0, Belt_List.add);
  });
});

Mocha.describe("Belt_List.reduceReverse2", () => {
  Mocha.test("Belt_List.reduceReverse2", () => {
    Belt_List.reduceReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + Math.imul(x, x) | 0) + y | 0);
  });
});

Mocha.describe("Belt_List.reduceWithIndex", () => {
  Mocha.test("Belt_List.reduceWithIndex", () => {
    Belt_List.reduceWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item, index) => (acc + item | 0) + index | 0);
  });
});

Mocha.describe("Belt_List.removeAssoc", () => {
  Mocha.test("Belt_List.removeAssoc", () => {
    Belt_List.removeAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Belt_List.removeAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 9, (k, item) => k === item);
  });
});

Mocha.describe("Belt_List.reverse", () => {
  Mocha.test("Belt_List.reverse", () => {
    Belt_List.reverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt_List.reverseConcat", () => {
  Mocha.test("Belt_List.reverseConcat", () => {
    Belt_List.reverseConcat({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    });
  });
});

Mocha.describe("Belt_List.setAssoc", () => {
  Mocha.test("Belt_List.setAssoc", () => {
    Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 2, "x", (a, b) => a === b);
    Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          3,
          "c"
        ],
        tl: /* [] */0
      }
    }, 2, "b", (a, b) => a === b);
    Belt_List.setAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          3,
          "morning?!"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, "afternoon", (a, b) => a % 12 === b % 12);
  });
});

Mocha.describe("Belt_List.shuffle", () => {
  Mocha.test("Belt_List.shuffle", () => {
    Belt_List.shuffle({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt_List.some", () => {
  Mocha.test("Belt_List.some", () => {
    let isAbove100 = value => value > 100;
    Belt_List.some({
      hd: 101,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
    Belt_List.some({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
  });
});

Mocha.describe("Belt_List.some2", () => {
  Mocha.test("Belt_List.some2", () => {
    Belt_List.some2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Belt_List.some2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.some2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.some2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
});

Mocha.describe("Belt_List.sort", () => {
  Mocha.test("Belt_List.sort", () => {
    Belt_List.sort({
      hd: 5,
      tl: {
        hd: 4,
        tl: {
          hd: 9,
          tl: {
            hd: 3,
            tl: {
              hd: 7,
              tl: /* [] */0
            }
          }
        }
      }
    }, (a, b) => a - b | 0);
  });
});

Mocha.describe("Belt_List.splitAt", () => {
  Mocha.test("Belt_List.splitAt", () => {
    Belt_List.splitAt({
      hd: "Hello",
      tl: {
        hd: "World",
        tl: /* [] */0
      }
    }, 1);
    Belt_List.splitAt({
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        }
      }
    }, 2);
  });
});

Mocha.describe("Belt_List.tail", () => {
  Mocha.test("Belt_List.tail", () => {
    Belt_List.tail({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
    Belt_List.tail(/* [] */0);
  });
});

Mocha.describe("Belt_List.tailExn", () => {
  Mocha.test("Belt_List.tailExn", () => {
    Pervasives.assertEqual(Belt_List.tailExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    });
    let exit = 0;
    let val;
    try {
      val = Belt_List.tailExn(/* [] */0);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          6501,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt_List.take", () => {
  Mocha.test("Belt_List.take", () => {
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 1);
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
});

Mocha.describe("Belt_List.toArray", () => {
  Mocha.test("Belt_List.toArray", () => {
    Belt_List.toArray({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt_List.unzip", () => {
  Mocha.test("Belt_List.unzip", () => {
    Belt_List.unzip({
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          3,
          4
        ],
        tl: /* [] */0
      }
    });
    Belt_List.unzip({
      hd: [
        "H",
        "W"
      ],
      tl: {
        hd: [
          "e",
          "o"
        ],
        tl: {
          hd: [
            "l",
            "r"
          ],
          tl: {
            hd: [
              "l",
              "l"
            ],
            tl: {
              hd: [
                "o",
                "d"
              ],
              tl: {
                hd: [
                  " ",
                  "!"
                ],
                tl: /* [] */0
              }
            }
          }
        }
      }
    });
  });
});

Mocha.describe("Belt_List.zip", () => {
  Mocha.test("Belt_List.zip", () => {
    Belt_List.zip({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("Belt_List.zipBy", () => {
  Mocha.test("Belt_List.zipBy", () => {
    Belt_List.zipBy({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, (a, b) => (a << 1) + b | 0);
  });
});

Mocha.describe("Belt_Map.Dict.findFirstBy", () => {
  Mocha.test("Belt_Map.Dict.findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MapDict.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp.cmp);
    Primitive_object.equal(Belt_MapDict.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
});

Mocha.describe("Belt_Map.Int", () => {
  Mocha.test("Belt_Map.Int", () => {});
});

Mocha.describe("Belt_Map.Int.findFirstBy", () => {
  Mocha.test("Belt_Map.Int.findFirstBy", () => {
    let mapInt = Belt_MapInt.fromArray([
      [
        1,
        "one"
      ],
      [
        2,
        "two"
      ],
      [
        3,
        "three"
      ]
    ]);
    Pervasives.assertEqual(Belt_MapInt.findFirstBy(mapInt, (k, v) => {
      if (k === 1) {
        return v === "one";
      } else {
        return false;
      }
    }), [
      1,
      "one"
    ]);
  });
});

Mocha.describe("Belt_Map.String.findFirstBy", () => {
  Mocha.test("Belt_Map.String.findFirstBy", () => {
    let mapString = Belt_MapString.fromArray([
      [
        "1",
        "one"
      ],
      [
        "2",
        "two"
      ],
      [
        "3",
        "three"
      ]
    ]);
    Pervasives.assertEqual(Belt_MapString.findFirstBy(mapString, (k, v) => {
      if (k === "1") {
        return v === "one";
      } else {
        return false;
      }
    }), [
      "1",
      "one"
    ]);
  });
});

Mocha.describe("Belt_Map.findFirstBy", () => {
  Mocha.test("Belt_Map.findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        ""
      ]
    ], IntCmp);
    Pervasives.assertEqual(Belt_Map.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
});

Mocha.describe("Belt_Map.forEach", () => {
  Mocha.test("Belt_Map.forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        ""
      ]
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_Map.forEach(s0, (k, v) => {
      acc.contents = {
        hd: [
          k,
          v
        ],
        tl: acc.contents
      };
    });
    Primitive_object.equal(acc.contents, {
      hd: [
        4,
        "4"
      ],
      tl: {
        hd: [
          3,
          "3"
        ],
        tl: {
          hd: [
            2,
            "2"
          ],
          tl: {
            hd: [
              1,
              "1"
            ],
            tl: /* [] */0
          }
        }
      }
    });
  });
});

Mocha.describe("Belt_Map.fromArray", () => {
  Mocha.test("Belt_Map.fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.toArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ]);
  });
});

Mocha.describe("Belt_Map.get", () => {
  Mocha.test("Belt_Map.get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.get(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp), 2), "2");
    Belt_Map.get(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp), 2) === undefined;
  });
});

Mocha.describe("Belt_Map.has", () => {
  Mocha.test("Belt_Map.has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.has(Belt_Map.fromArray([[
        1,
        "1"
      ]], IntCmp), 1) === true;
  });
});

Mocha.describe("Belt_Map.isEmpty", () => {
  Mocha.test("Belt_Map.isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.isEmpty(Belt_Map.fromArray([[
        1,
        "1"
      ]], IntCmp)) === false;
  });
});

Mocha.describe("Belt_Map.keysToArray", () => {
  Mocha.test("Belt_Map.keysToArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.keysToArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      1,
      2,
      3
    ]);
  });
});

Mocha.describe("Belt_Map.make", () => {
  Mocha.test("Belt_Map.make", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let m = Belt_Map.make(IntCmp);
    Belt_Map.set(m, 0, "a");
  });
});

Mocha.describe("Belt_Map.reduce", () => {
  Mocha.test("Belt_Map.reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    Belt_Map.reduce(s0, /* [] */0, (acc, k, v) => ({
      hd: [
        k,
        v
      ],
      tl: acc
    }));
  });
});

Mocha.describe("Belt_Map.remove", () => {
  Mocha.test("Belt_Map.remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    let s1 = Belt_Map.remove(s0, 1);
    Belt_Map.remove(s1, 1);
    Primitive_object.equal(Belt_Map.keysToArray(s1), [
      2,
      3
    ]);
  });
});

Mocha.describe("Belt_Map.set", () => {
  Mocha.test("Belt_Map.set", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    let s1 = Belt_Map.set(s0, 2, "3");
    Primitive_object.equal(Belt_Map.valuesToArray(s1), [
      "1",
      "3",
      "3"
    ]);
  });
});

Mocha.describe("Belt_Map.size", () => {
  Mocha.test("Belt_Map.size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.size(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        2,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)) === 2;
  });
});

Mocha.describe("Belt_Map.toArray", () => {
  Mocha.test("Belt_Map.toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.toArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ]);
  });
});

Mocha.describe("Belt_Map.valuesToArray", () => {
  Mocha.test("Belt_Map.valuesToArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.valuesToArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      "1",
      "2",
      "3"
    ]);
  });
});

Mocha.describe("Belt_MapDict.findFirstBy", () => {
  Mocha.test("Belt_MapDict.findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MapDict.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp.cmp);
    Primitive_object.equal(Belt_MapDict.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
});

Mocha.describe("Belt_MapInt.findFirstBy", () => {
  Mocha.test("Belt_MapInt.findFirstBy", () => {
    let mapInt = Belt_MapInt.fromArray([
      [
        1,
        "one"
      ],
      [
        2,
        "two"
      ],
      [
        3,
        "three"
      ]
    ]);
    Pervasives.assertEqual(Belt_MapInt.findFirstBy(mapInt, (k, v) => {
      if (k === 1) {
        return v === "one";
      } else {
        return false;
      }
    }), [
      1,
      "one"
    ]);
  });
});

Mocha.describe("Belt_MapString.findFirstBy", () => {
  Mocha.test("Belt_MapString.findFirstBy", () => {
    let mapString = Belt_MapString.fromArray([
      [
        "1",
        "one"
      ],
      [
        "2",
        "two"
      ],
      [
        "3",
        "three"
      ]
    ]);
    Pervasives.assertEqual(Belt_MapString.findFirstBy(mapString, (k, v) => {
      if (k === "1") {
        return v === "one";
      } else {
        return false;
      }
    }), [
      "1",
      "one"
    ]);
  });
});

Mocha.describe("Belt_MutableSet.add", () => {
  Mocha.test("Belt_MutableSet.add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    Belt_MutableSet.add(s0, 1);
    Belt_MutableSet.add(s0, 2);
    Belt_MutableSet.add(s0, 2);
    Belt_MutableSet.toArray(s0);
  });
});

Mocha.describe("Belt_MutableSet.copy", () => {
  Mocha.test("Belt_MutableSet.copy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    let copied = Belt_MutableSet.copy(s0);
    Belt_MutableSet.toArray(copied);
  });
});

Mocha.describe("Belt_MutableSet.diff", () => {
  Mocha.test("Belt_MutableSet.diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    Belt_MutableSet.toArray(Belt_MutableSet.diff(s0, s1));
    Belt_MutableSet.toArray(Belt_MutableSet.diff(s1, s0));
  });
});

Mocha.describe("Belt_MutableSet.eq", () => {
  Mocha.test("Belt_MutableSet.eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      5
    ], IntCmp);
    Belt_MutableSet.eq(s0, s1);
  });
});

Mocha.describe("Belt_MutableSet.every", () => {
  Mocha.test("Belt_MutableSet.every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_MutableSet.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp);
    Belt_MutableSet.every(s0, isEven);
  });
});

Mocha.describe("Belt_MutableSet.forEach", () => {
  Mocha.test("Belt_MutableSet.forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_MutableSet.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
});

Mocha.describe("Belt_MutableSet.fromArray", () => {
  Mocha.test("Belt_MutableSet.fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    Belt_MutableSet.toArray(s0);
  });
});

Mocha.describe("Belt_MutableSet.get", () => {
  Mocha.test("Belt_MutableSet.get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    Belt_MutableSet.get(s0, 3);
    Belt_MutableSet.get(s0, 20);
  });
});

Mocha.describe("Belt_MutableSet.has", () => {
  Mocha.test("Belt_MutableSet.has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp);
    Belt_MutableSet.has(set, 3);
    Belt_MutableSet.has(set, 1);
  });
});

Mocha.describe("Belt_MutableSet.intersect", () => {
  Mocha.test("Belt_MutableSet.intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let intersect = Belt_MutableSet.intersect(s0, s1);
    Belt_MutableSet.toArray(intersect);
  });
});

Mocha.describe("Belt_MutableSet.isEmpty", () => {
  Mocha.test("Belt_MutableSet.isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_MutableSet.fromArray([], IntCmp);
    let notEmpty = Belt_MutableSet.fromArray([1], IntCmp);
    Belt_MutableSet.isEmpty(empty);
    Belt_MutableSet.isEmpty(notEmpty);
  });
});

Mocha.describe("Belt_MutableSet.keep", () => {
  Mocha.test("Belt_MutableSet.keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let s1 = Belt_MutableSet.keep(s0, isEven);
    Belt_MutableSet.toArray(s1);
  });
});

Mocha.describe("Belt_MutableSet.maxUndefined", () => {
  Mocha.test("Belt_MutableSet.maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.maxUndefined(s0);
    Belt_MutableSet.maxUndefined(s1);
  });
});

Mocha.describe("Belt_MutableSet.maximum", () => {
  Mocha.test("Belt_MutableSet.maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.maximum(s0);
    Belt_MutableSet.maximum(s1);
  });
});

Mocha.describe("Belt_MutableSet.mergeMany", () => {
  Mocha.test("Belt_MutableSet.mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.make(IntCmp);
    Belt_MutableSet.mergeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Belt_MutableSet.toArray(set);
  });
});

Mocha.describe("Belt_MutableSet.minUndefined", () => {
  Mocha.test("Belt_MutableSet.minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.minUndefined(s0);
    Belt_MutableSet.minUndefined(s1);
  });
});

Mocha.describe("Belt_MutableSet.minimum", () => {
  Mocha.test("Belt_MutableSet.minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.minimum(s0);
    Belt_MutableSet.minimum(s1);
  });
});

Mocha.describe("Belt_MutableSet.partition", () => {
  Mocha.test("Belt_MutableSet.partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_MutableSet.partition(s0, isOdd);
    Belt_MutableSet.toArray(match[0]);
    Belt_MutableSet.toArray(match[1]);
  });
});

Mocha.describe("Belt_MutableSet.reduce", () => {
  Mocha.test("Belt_MutableSet.reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    Belt_MutableSet.reduce(s0, /* [] */0, Belt_List.add);
  });
});

Mocha.describe("Belt_MutableSet.remove", () => {
  Mocha.test("Belt_MutableSet.remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp);
    Belt_MutableSet.remove(s0, 1);
    Belt_MutableSet.remove(s0, 3);
    Belt_MutableSet.remove(s0, 3);
    Belt_MutableSet.toArray(s0);
  });
});

Mocha.describe("Belt_MutableSet.removeMany", () => {
  Mocha.test("Belt_MutableSet.removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Belt_MutableSet.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Belt_MutableSet.toArray(set);
  });
});

Mocha.describe("Belt_MutableSet.size", () => {
  Mocha.test("Belt_MutableSet.size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Belt_MutableSet.size(s0);
  });
});

Mocha.describe("Belt_MutableSet.some", () => {
  Mocha.test("Belt_MutableSet.some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp);
    Belt_MutableSet.some(s0, isOdd);
  });
});

Mocha.describe("Belt_MutableSet.split", () => {
  Mocha.test("Belt_MutableSet.split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_MutableSet.split(s0, 3);
    let match$1 = match[0];
    Belt_MutableSet.toArray(match$1[0]);
    Belt_MutableSet.toArray(match$1[1]);
  });
});

Mocha.describe("Belt_MutableSet.subset", () => {
  Mocha.test("Belt_MutableSet.subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let s2 = Belt_MutableSet.intersect(s0, s1);
    Belt_MutableSet.subset(s2, s0);
    Belt_MutableSet.subset(s2, s1);
    Belt_MutableSet.subset(s1, s0);
  });
});

Mocha.describe("Belt_MutableSet.toArray", () => {
  Mocha.test("Belt_MutableSet.toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.toArray(s0);
  });
});

Mocha.describe("Belt_MutableSet.toList", () => {
  Mocha.test("Belt_MutableSet.toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.toList(s0);
  });
});

Mocha.describe("Belt_MutableSet.union", () => {
  Mocha.test("Belt_MutableSet.union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let union = Belt_MutableSet.union(s0, s1);
    Belt_MutableSet.toArray(union);
  });
});

Mocha.describe("Belt_Option.cmp", () => {
  Mocha.test("Belt_Option.cmp", () => {
    let clockCompare = (a, b) => Primitive_int.compare(a % 12, b % 12);
    Belt_Option.cmp(3, 15, clockCompare);
    Belt_Option.cmp(3, 14, clockCompare);
    Belt_Option.cmp(2, 15, clockCompare);
    Belt_Option.cmp(undefined, 15, clockCompare);
    Belt_Option.cmp(14, undefined, clockCompare);
    Belt_Option.cmp(undefined, undefined, clockCompare);
  });
});

Mocha.describe("Belt_Option.eq", () => {
  Mocha.test("Belt_Option.eq", () => {
    let clockEqual = (a, b) => a % 12 === b % 12;
    Belt_Option.eq(3, 15, clockEqual);
    Belt_Option.eq(3, undefined, clockEqual);
    Belt_Option.eq(undefined, 3, clockEqual);
    Belt_Option.eq(undefined, undefined, clockEqual);
  });
});

Mocha.describe("Belt_Option.flatMap", () => {
  Mocha.test("Belt_Option.flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      }
      
    };
    Belt_Option.flatMap(2, addIfAboveOne);
    Belt_Option.flatMap(-4, addIfAboveOne);
    Belt_Option.flatMap(undefined, addIfAboveOne);
  });
});

Mocha.describe("Belt_Option.forEach", () => {
  Mocha.test("Belt_Option.forEach", () => {
    Belt_Option.forEach("thing", x => {
      console.log(x);
    });
    Belt_Option.forEach(undefined, x => {
      console.log(x);
    });
  });
});

Mocha.describe("Belt_Option.getExn", () => {
  Mocha.test("Belt_Option.getExn", () => {
    Pervasives.assertEqual(Belt_Option.getExn(3), 3);
    let exit = 0;
    let val;
    try {
      val = Belt_Option.getExn(undefined);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          7466,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt_Option.getWithDefault", () => {
  Mocha.test("Belt_Option.getWithDefault", () => {
    Belt_Option.getWithDefault(undefined, "Banana");
    Belt_Option.getWithDefault("Apple", "Banana");
    let greet = firstName => "Greetings " + Belt_Option.getWithDefault(firstName, "Anonymous");
    greet("Jane");
    greet(undefined);
  });
});

Mocha.describe("Belt_Option.isNone", () => {
  Mocha.test("Belt_Option.isNone", () => {
    Belt_Option.isNone(undefined);
    Belt_Option.isNone(1);
  });
});

Mocha.describe("Belt_Option.isSome", () => {
  Mocha.test("Belt_Option.isSome", () => {
    Belt_Option.isSome(undefined);
    Belt_Option.isSome(1);
  });
});

Mocha.describe("Belt_Option.keep", () => {
  Mocha.test("Belt_Option.keep", () => {
    Belt_Option.keep(10, x => x > 5);
    Belt_Option.keep(4, x => x > 5);
    Belt_Option.keep(undefined, x => x > 5);
  });
});

Mocha.describe("Belt_Option.map", () => {
  Mocha.test("Belt_Option.map", () => {
    Belt_Option.map(3, x => Math.imul(x, x));
    Belt_Option.map(undefined, x => Math.imul(x, x));
  });
});

Mocha.describe("Belt_Option.mapWithDefault", () => {
  Mocha.test("Belt_Option.mapWithDefault", () => {
    Belt_Option.mapWithDefault(3, 0, x => x + 5 | 0);
    Belt_Option.mapWithDefault(undefined, 0, x => x + 5 | 0);
  });
});

Mocha.describe("Belt_Option.orElse", () => {
  Mocha.test("Belt_Option.orElse", () => {
    Primitive_object.equal(Belt_Option.orElse(1812, 1066), 1812);
    Primitive_object.equal(Belt_Option.orElse(undefined, 1066), 1066);
    Belt_Option.orElse(undefined, undefined) === undefined;
  });
});

Mocha.describe("Belt_Range.every", () => {
  Mocha.test("Belt_Range.every", () => {
    Belt_Range.every(0, 4, i => i < 5);
    Belt_Range.every(0, 4, i => i < 4);
  });
});

Mocha.describe("Belt_Range.everyBy", () => {
  Mocha.test("Belt_Range.everyBy", () => {
    Belt_Range.everyBy(0, 4, 1, i => i % 2 === 0);
    Belt_Range.everyBy(0, 4, 2, i => i % 2 === 0);
  });
});

Mocha.describe("Belt_Range.forEach", () => {
  Mocha.test("Belt_Range.forEach", () => {
    Belt_Range.forEach(0, 4, i => {
      console.log(i);
    });
  });
});

Mocha.describe("Belt_Range.some", () => {
  Mocha.test("Belt_Range.some", () => {
    Belt_Range.some(0, 4, i => i > 5);
    Belt_Range.some(0, 4, i => i > 2);
  });
});

Mocha.describe("Belt_Range.someBy", () => {
  Mocha.test("Belt_Range.someBy", () => {
    Belt_Range.someBy(1, 5, 2, i => i % 2 === 0);
    Belt_Range.someBy(0, 4, 2, i => i % 2 === 0);
  });
});

Mocha.describe("Belt_Result.cmp", () => {
  Mocha.test("Belt_Result.cmp", () => {
    let mod10cmp = (a, b) => Primitive_int.compare(a % 10, b % 10);
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === 1;
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 57
    }, {
      TAG: "Ok",
      _0: 39
    }, mod10cmp) === -1;
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 1;
    Belt_Result.cmp({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === -1;
    Belt_Result.cmp({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 0;
  });
});

Mocha.describe("Belt_Result.eq", () => {
  Mocha.test("Belt_Result.eq", () => {
    let good1 = {
      TAG: "Ok",
      _0: 42
    };
    let good2 = {
      TAG: "Ok",
      _0: 32
    };
    let bad1 = {
      TAG: "Error",
      _0: "invalid"
    };
    let bad2 = {
      TAG: "Error",
      _0: "really invalid"
    };
    let mod10equal = (a, b) => a % 10 === b % 10;
    Belt_Result.eq(good1, good2, mod10equal) === true;
    Belt_Result.eq(good1, bad1, mod10equal) === false;
    Belt_Result.eq(bad2, good2, mod10equal) === false;
    Belt_Result.eq(bad1, bad2, mod10equal) === true;
  });
});

Mocha.describe("Belt_Result.flatMap", () => {
  Mocha.test("Belt_Result.flatMap", () => {
    let recip = x => {
      if (x !== 0.0) {
        return {
          TAG: "Ok",
          _0: 1.0 / x
        };
      } else {
        return {
          TAG: "Error",
          _0: "Divide by zero"
        };
      }
    };
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Ok",
      _0: 2.0
    }, recip), {
      TAG: "Ok",
      _0: 0.5
    });
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Ok",
      _0: 0.0
    }, recip), {
      TAG: "Error",
      _0: "Divide by zero"
    });
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Error",
      _0: "Already bad"
    }, recip), {
      TAG: "Error",
      _0: "Already bad"
    });
  });
});

Mocha.describe("Belt_Result.getExn", () => {
  Mocha.test("Belt_Result.getExn", () => {
    Pervasives.assertEqual(Belt_Result.getExn({
      TAG: "Ok",
      _0: 42
    }), 42);
    let exit = 0;
    let val;
    try {
      val = Belt_Result.getExn({
        TAG: "Error",
        _0: "Invalid data"
      });
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          7700,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Belt_Result.getWithDefault", () => {
  Mocha.test("Belt_Result.getWithDefault", () => {
    Belt_Result.getWithDefault({
      TAG: "Ok",
      _0: 42
    }, 0) === 42;
    Belt_Result.getWithDefault({
      TAG: "Error",
      _0: "Invalid Data"
    }, 0) === 0;
  });
});

Mocha.describe("Belt_Result.map", () => {
  Mocha.test("Belt_Result.map", () => {
    let f = x => Math.sqrt(x);
    Primitive_object.equal(Belt_Result.map({
      TAG: "Ok",
      _0: 64
    }, f), {
      TAG: "Ok",
      _0: 8.0
    });
    Primitive_object.equal(Belt_Result.map({
      TAG: "Error",
      _0: "Invalid data"
    }, f), {
      TAG: "Error",
      _0: "Invalid data"
    });
  });
});

Mocha.describe("Belt_Result.mapWithDefault", () => {
  Mocha.test("Belt_Result.mapWithDefault", () => {
    Belt_Result.mapWithDefault({
      TAG: "Ok",
      _0: 42
    }, 0, x => x / 2 | 0) === 21;
    Belt_Result.mapWithDefault({
      TAG: "Error",
      _0: "Invalid data"
    }, 0, x => x / 2 | 0) === 0;
  });
});

Mocha.describe("Belt_Set.Dict.add", () => {
  Mocha.test("Belt_Set.Dict.add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.add(undefined, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.add(s1, 2, IntCmp.cmp);
    let s3 = Belt_SetDict.add(s2, 2, IntCmp.cmp);
    Belt_SetDict.toArray(undefined);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Belt_SetDict.toArray(s3);
    Primitive_object.equal(s2, s3);
  });
});

Mocha.describe("Belt_Set.Dict.diff", () => {
  Mocha.test("Belt_Set.Dict.diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let diff1 = Belt_SetDict.diff(s0, s1, IntCmp.cmp);
    let diff2 = Belt_SetDict.diff(s1, s0, IntCmp.cmp);
    Belt_SetDict.toArray(diff1);
    Belt_SetDict.toArray(diff2);
  });
});

Mocha.describe("Belt_Set.Dict.empty", () => {
  Mocha.test("Belt_Set.Dict.empty", () => {});
});

Mocha.describe("Belt_Set.Dict.eq", () => {
  Mocha.test("Belt_Set.Dict.eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.eq(s0, s1, IntCmp.cmp);
  });
});

Mocha.describe("Belt_Set.Dict.every", () => {
  Mocha.test("Belt_Set.Dict.every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.every(s0, isEven);
  });
});

Mocha.describe("Belt_Set.Dict.forEach", () => {
  Mocha.test("Belt_Set.Dict.forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_SetDict.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
});

Mocha.describe("Belt_Set.Dict.fromArray", () => {
  Mocha.test("Belt_Set.Dict.fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
});

Mocha.describe("Belt_Set.Dict.get", () => {
  Mocha.test("Belt_Set.Dict.get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    Belt_SetDict.get(s0, 3, IntCmp.cmp);
    Belt_SetDict.get(s0, 20, IntCmp.cmp);
  });
});

Mocha.describe("Belt_Set.Dict.has", () => {
  Mocha.test("Belt_Set.Dict.has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.has(set, 3, IntCmp.cmp);
    Belt_SetDict.has(set, 1, IntCmp.cmp);
  });
});

Mocha.describe("Belt_Set.Dict.intersect", () => {
  Mocha.test("Belt_Set.Dict.intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let intersect = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(intersect);
  });
});

Mocha.describe("Belt_Set.Dict.isEmpty", () => {
  Mocha.test("Belt_Set.Dict.isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_SetDict.fromArray([], IntCmp.cmp);
    let notEmpty = Belt_SetDict.fromArray([1], IntCmp.cmp);
    Belt_SetDict.isEmpty(empty);
    Belt_SetDict.isEmpty(notEmpty);
  });
});

Mocha.describe("Belt_Set.Dict.keep", () => {
  Mocha.test("Belt_Set.Dict.keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.keep(s0, isEven);
    Belt_SetDict.toArray(s1);
  });
});

Mocha.describe("Belt_Set.Dict.maxUndefined", () => {
  Mocha.test("Belt_Set.Dict.maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maxUndefined(undefined);
    Belt_SetDict.maxUndefined(s1);
  });
});

Mocha.describe("Belt_Set.Dict.maximum", () => {
  Mocha.test("Belt_Set.Dict.maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maximum(undefined);
    Belt_SetDict.maximum(s1);
  });
});

Mocha.describe("Belt_Set.Dict.mergeMany", () => {
  Mocha.test("Belt_Set.Dict.mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let newSet = Belt_SetDict.mergeMany(undefined, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
});

Mocha.describe("Belt_Set.Dict.minUndefined", () => {
  Mocha.test("Belt_Set.Dict.minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minUndefined(undefined);
    Belt_SetDict.minUndefined(s1);
  });
});

Mocha.describe("Belt_Set.Dict.minimum", () => {
  Mocha.test("Belt_Set.Dict.minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minimum(undefined);
    Belt_SetDict.minimum(s1);
  });
});

Mocha.describe("Belt_Set.Dict.partition", () => {
  Mocha.test("Belt_Set.Dict.partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.partition(s0, isOdd);
    Belt_SetDict.toArray(match[0]);
    Belt_SetDict.toArray(match[1]);
  });
});

Mocha.describe("Belt_Set.Dict.reduce", () => {
  Mocha.test("Belt_Set.Dict.reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    Belt_SetDict.reduce(s0, /* [] */0, Belt_List.add);
  });
});

Mocha.describe("Belt_Set.Dict.remove", () => {
  Mocha.test("Belt_Set.Dict.remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.remove(s0, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.remove(s1, 3, IntCmp.cmp);
    let s3 = Belt_SetDict.remove(s2, 3, IntCmp.cmp);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Primitive_object.equal(s2, s3);
  });
});

Mocha.describe("Belt_Set.Dict.removeMany", () => {
  Mocha.test("Belt_Set.Dict.removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    let newSet = Belt_SetDict.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
});

Mocha.describe("Belt_Set.Dict.size", () => {
  Mocha.test("Belt_Set.Dict.size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    Belt_SetDict.size(s0);
  });
});

Mocha.describe("Belt_Set.Dict.some", () => {
  Mocha.test("Belt_Set.Dict.some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.some(s0, isOdd);
  });
});

Mocha.describe("Belt_Set.Dict.split", () => {
  Mocha.test("Belt_Set.Dict.split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.split(s0, 3, IntCmp.cmp);
    let match$1 = match[0];
    Belt_SetDict.toArray(match$1[0]);
    Belt_SetDict.toArray(match$1[1]);
  });
});

Mocha.describe("Belt_Set.Dict.subset", () => {
  Mocha.test("Belt_Set.Dict.subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let s2 = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.subset(s2, s0, IntCmp.cmp);
    Belt_SetDict.subset(s2, s1, IntCmp.cmp);
    Belt_SetDict.subset(s1, s0, IntCmp.cmp);
  });
});

Mocha.describe("Belt_Set.Dict.toArray", () => {
  Mocha.test("Belt_Set.Dict.toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
});

Mocha.describe("Belt_Set.Dict.toList", () => {
  Mocha.test("Belt_Set.Dict.toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toList(s0);
  });
});

Mocha.describe("Belt_Set.Dict.union", () => {
  Mocha.test("Belt_Set.Dict.union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let union = Belt_SetDict.union(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(union);
  });
});

Mocha.describe("Belt_Set.add", () => {
  Mocha.test("Belt_Set.add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.add(s0, 1);
    let s2 = Belt_Set.add(s1, 2);
    let s3 = Belt_Set.add(s2, 2);
    Pervasives.assertEqual(Belt_Set.toArray(s0), []);
    Pervasives.assertEqual(Belt_Set.toArray(s1), [1]);
    Pervasives.assertEqual(Belt_Set.toArray(s2), [
      1,
      2
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(s3), [
      1,
      2
    ]);
    Pervasives.assertEqual(s2, s3);
  });
});

Mocha.describe("Belt_Set.diff", () => {
  Mocha.test("Belt_Set.diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.toArray(Belt_Set.diff(s0, s1)), [6]);
    Pervasives.assertEqual(Belt_Set.toArray(Belt_Set.diff(s1, s0)), [
      1,
      4
    ]);
  });
});

Mocha.describe("Belt_Set.eq", () => {
  Mocha.test("Belt_Set.eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.eq(s0, s1), true);
  });
});

Mocha.describe("Belt_Set.every", () => {
  Mocha.test("Belt_Set.every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_Set.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.every(s0, isEven), true);
  });
});

Mocha.describe("Belt_Set.forEach", () => {
  Mocha.test("Belt_Set.forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_Set.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
    Pervasives.assertEqual(acc.contents, {
      hd: 6,
      tl: {
        hd: 5,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    });
  });
});

Mocha.describe("Belt_Set.fromArray", () => {
  Mocha.test("Belt_Set.fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.toArray(s0), [
      1,
      2,
      3,
      4
    ]);
  });
});

Mocha.describe("Belt_Set.get", () => {
  Mocha.test("Belt_Set.get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.get(s0, 3), 3);
    Pervasives.assertEqual(Belt_Set.get(s0, 20), undefined);
  });
});

Mocha.describe("Belt_Set.has", () => {
  Mocha.test("Belt_Set.has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.has(set, 3), false);
    Pervasives.assertEqual(Belt_Set.has(set, 1), true);
  });
});

Mocha.describe("Belt_Set.intersect", () => {
  Mocha.test("Belt_Set.intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let intersect = Belt_Set.intersect(s0, s1);
    Pervasives.assertEqual(Belt_Set.toArray(intersect), [
      2,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt_Set.isEmpty", () => {
  Mocha.test("Belt_Set.isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_Set.fromArray([], IntCmp);
    let notEmpty = Belt_Set.fromArray([1], IntCmp);
    Pervasives.assertEqual(Belt_Set.isEmpty(empty), true);
    Pervasives.assertEqual(Belt_Set.isEmpty(notEmpty), false);
  });
});

Mocha.describe("Belt_Set.keep", () => {
  Mocha.test("Belt_Set.keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let s1 = Belt_Set.keep(s0, isEven);
    Pervasives.assertEqual(Belt_Set.toArray(s1), [
      2,
      4
    ]);
  });
});

Mocha.describe("Belt_Set.make", () => {
  Mocha.test("Belt_Set.make", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.make(IntCmp);
    Pervasives.assertEqual(Belt_Set.isEmpty(set), true);
  });
});

Mocha.describe("Belt_Set.maxUndefined", () => {
  Mocha.test("Belt_Set.maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Primitive_option.fromUndefined(Belt_Set.maxUndefined(s0)), undefined);
    Pervasives.assertEqual(Primitive_option.fromUndefined(Belt_Set.maxUndefined(s1)), 5);
  });
});

Mocha.describe("Belt_Set.maximum", () => {
  Mocha.test("Belt_Set.maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.maximum(s0), undefined);
    Pervasives.assertEqual(Belt_Set.maximum(s1), 5);
  });
});

Mocha.describe("Belt_Set.mergeMany", () => {
  Mocha.test("Belt_Set.mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.make(IntCmp);
    let newSet = Belt_Set.mergeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(newSet), [
      1,
      2,
      3,
      4,
      5
    ]);
  });
});

Mocha.describe("Belt_Set.minUndefined", () => {
  Mocha.test("Belt_Set.minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Primitive_option.fromUndefined(Belt_Set.minUndefined(s0)), undefined);
    Pervasives.assertEqual(Primitive_option.fromUndefined(Belt_Set.minUndefined(s1)), 1);
  });
});

Mocha.describe("Belt_Set.minimum", () => {
  Mocha.test("Belt_Set.minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.minimum(s0), undefined);
    Pervasives.assertEqual(Belt_Set.minimum(s1), 1);
  });
});

Mocha.describe("Belt_Set.partition", () => {
  Mocha.test("Belt_Set.partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_Set.partition(s0, isOdd);
    Pervasives.assertEqual(Belt_Set.toArray(match[0]), [
      1,
      3,
      5
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(match[1]), [
      2,
      4
    ]);
  });
});

Mocha.describe("Belt_Set.reduce", () => {
  Mocha.test("Belt_Set.reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.reduce(s0, /* [] */0, Belt_List.add), {
      hd: 6,
      tl: {
        hd: 5,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    });
  });
});

Mocha.describe("Belt_Set.remove", () => {
  Mocha.test("Belt_Set.remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp);
    let s1 = Belt_Set.remove(s0, 1);
    let s2 = Belt_Set.remove(s1, 3);
    let s3 = Belt_Set.remove(s2, 3);
    Pervasives.assertEqual(Belt_Set.toArray(s1), [
      2,
      3,
      4,
      5
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(s2), [
      2,
      4,
      5
    ]);
    Pervasives.assertEqual(s2, s3);
  });
});

Mocha.describe("Belt_Set.removeMany", () => {
  Mocha.test("Belt_Set.removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    let newSet = Belt_Set.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(newSet), []);
  });
});

Mocha.describe("Belt_Set.size", () => {
  Mocha.test("Belt_Set.size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.size(s0), 4);
  });
});

Mocha.describe("Belt_Set.some", () => {
  Mocha.test("Belt_Set.some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.some(s0, isOdd), true);
  });
});

Mocha.describe("Belt_Set.split", () => {
  Mocha.test("Belt_Set.split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_Set.split(s0, 3);
    let match$1 = match[0];
    Pervasives.assertEqual(match[1], true);
    Pervasives.assertEqual(Belt_Set.toArray(match$1[0]), [
      1,
      2
    ]);
    Pervasives.assertEqual(Belt_Set.toArray(match$1[1]), [
      4,
      5
    ]);
  });
});

Mocha.describe("Belt_Set.subset", () => {
  Mocha.test("Belt_Set.subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let s2 = Belt_Set.intersect(s0, s1);
    Pervasives.assertEqual(Belt_Set.subset(s2, s0), true);
    Pervasives.assertEqual(Belt_Set.subset(s2, s1), true);
    Pervasives.assertEqual(Belt_Set.subset(s1, s0), false);
  });
});

Mocha.describe("Belt_Set.toArray", () => {
  Mocha.test("Belt_Set.toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.toArray(s0), [
      1,
      2,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt_Set.toList", () => {
  Mocha.test("Belt_Set.toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Pervasives.assertEqual(Belt_Set.toList(s0), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    });
  });
});

Mocha.describe("Belt_Set.union", () => {
  Mocha.test("Belt_Set.union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let union = Belt_Set.union(s0, s1);
    Pervasives.assertEqual(Belt_Set.toArray(union), [
      1,
      2,
      3,
      4,
      5,
      6
    ]);
  });
});

Mocha.describe("Belt_SetDict.add", () => {
  Mocha.test("Belt_SetDict.add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.add(undefined, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.add(s1, 2, IntCmp.cmp);
    let s3 = Belt_SetDict.add(s2, 2, IntCmp.cmp);
    Belt_SetDict.toArray(undefined);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Belt_SetDict.toArray(s3);
    Primitive_object.equal(s2, s3);
  });
});

Mocha.describe("Belt_SetDict.diff", () => {
  Mocha.test("Belt_SetDict.diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let diff1 = Belt_SetDict.diff(s0, s1, IntCmp.cmp);
    let diff2 = Belt_SetDict.diff(s1, s0, IntCmp.cmp);
    Belt_SetDict.toArray(diff1);
    Belt_SetDict.toArray(diff2);
  });
});

Mocha.describe("Belt_SetDict.empty", () => {
  Mocha.test("Belt_SetDict.empty", () => {});
});

Mocha.describe("Belt_SetDict.eq", () => {
  Mocha.test("Belt_SetDict.eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.eq(s0, s1, IntCmp.cmp);
  });
});

Mocha.describe("Belt_SetDict.every", () => {
  Mocha.test("Belt_SetDict.every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.every(s0, isEven);
  });
});

Mocha.describe("Belt_SetDict.forEach", () => {
  Mocha.test("Belt_SetDict.forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_SetDict.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
});

Mocha.describe("Belt_SetDict.fromArray", () => {
  Mocha.test("Belt_SetDict.fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
});

Mocha.describe("Belt_SetDict.get", () => {
  Mocha.test("Belt_SetDict.get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    Belt_SetDict.get(s0, 3, IntCmp.cmp);
    Belt_SetDict.get(s0, 20, IntCmp.cmp);
  });
});

Mocha.describe("Belt_SetDict.has", () => {
  Mocha.test("Belt_SetDict.has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.has(set, 3, IntCmp.cmp);
    Belt_SetDict.has(set, 1, IntCmp.cmp);
  });
});

Mocha.describe("Belt_SetDict.intersect", () => {
  Mocha.test("Belt_SetDict.intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let intersect = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(intersect);
  });
});

Mocha.describe("Belt_SetDict.isEmpty", () => {
  Mocha.test("Belt_SetDict.isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_SetDict.fromArray([], IntCmp.cmp);
    let notEmpty = Belt_SetDict.fromArray([1], IntCmp.cmp);
    Belt_SetDict.isEmpty(empty);
    Belt_SetDict.isEmpty(notEmpty);
  });
});

Mocha.describe("Belt_SetDict.keep", () => {
  Mocha.test("Belt_SetDict.keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.keep(s0, isEven);
    Belt_SetDict.toArray(s1);
  });
});

Mocha.describe("Belt_SetDict.maxUndefined", () => {
  Mocha.test("Belt_SetDict.maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maxUndefined(undefined);
    Belt_SetDict.maxUndefined(s1);
  });
});

Mocha.describe("Belt_SetDict.maximum", () => {
  Mocha.test("Belt_SetDict.maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maximum(undefined);
    Belt_SetDict.maximum(s1);
  });
});

Mocha.describe("Belt_SetDict.mergeMany", () => {
  Mocha.test("Belt_SetDict.mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let newSet = Belt_SetDict.mergeMany(undefined, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
});

Mocha.describe("Belt_SetDict.minUndefined", () => {
  Mocha.test("Belt_SetDict.minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minUndefined(undefined);
    Belt_SetDict.minUndefined(s1);
  });
});

Mocha.describe("Belt_SetDict.minimum", () => {
  Mocha.test("Belt_SetDict.minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minimum(undefined);
    Belt_SetDict.minimum(s1);
  });
});

Mocha.describe("Belt_SetDict.partition", () => {
  Mocha.test("Belt_SetDict.partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.partition(s0, isOdd);
    Belt_SetDict.toArray(match[0]);
    Belt_SetDict.toArray(match[1]);
  });
});

Mocha.describe("Belt_SetDict.reduce", () => {
  Mocha.test("Belt_SetDict.reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    Belt_SetDict.reduce(s0, /* [] */0, Belt_List.add);
  });
});

Mocha.describe("Belt_SetDict.remove", () => {
  Mocha.test("Belt_SetDict.remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.remove(s0, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.remove(s1, 3, IntCmp.cmp);
    let s3 = Belt_SetDict.remove(s2, 3, IntCmp.cmp);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Primitive_object.equal(s2, s3);
  });
});

Mocha.describe("Belt_SetDict.removeMany", () => {
  Mocha.test("Belt_SetDict.removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    let newSet = Belt_SetDict.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
});

Mocha.describe("Belt_SetDict.size", () => {
  Mocha.test("Belt_SetDict.size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    Belt_SetDict.size(s0);
  });
});

Mocha.describe("Belt_SetDict.some", () => {
  Mocha.test("Belt_SetDict.some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.some(s0, isOdd);
  });
});

Mocha.describe("Belt_SetDict.split", () => {
  Mocha.test("Belt_SetDict.split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.split(s0, 3, IntCmp.cmp);
    let match$1 = match[0];
    Belt_SetDict.toArray(match$1[0]);
    Belt_SetDict.toArray(match$1[1]);
  });
});

Mocha.describe("Belt_SetDict.subset", () => {
  Mocha.test("Belt_SetDict.subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let s2 = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.subset(s2, s0, IntCmp.cmp);
    Belt_SetDict.subset(s2, s1, IntCmp.cmp);
    Belt_SetDict.subset(s1, s0, IntCmp.cmp);
  });
});

Mocha.describe("Belt_SetDict.toArray", () => {
  Mocha.test("Belt_SetDict.toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
});

Mocha.describe("Belt_SetDict.toList", () => {
  Mocha.test("Belt_SetDict.toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toList(s0);
  });
});

Mocha.describe("Belt_SetDict.union", () => {
  Mocha.test("Belt_SetDict.union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let union = Belt_SetDict.union(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(union);
  });
});

Mocha.describe("Belt_SortArray.binarySearchBy", () => {
  Mocha.test("Belt_SortArray.binarySearchBy", () => {
    Belt_SortArray.binarySearchBy([
      1,
      2,
      3,
      4,
      33,
      35,
      36
    ], 33, Primitive_int.compare) === 4;
    Pervasives.lnot(Belt_SortArray.binarySearchBy([
      1,
      3,
      5,
      7
    ], 4, Primitive_int.compare)) === 2;
  });
});

Mocha.describe("Belt_SortArray.strictlySortedLength", () => {
  Mocha.test("Belt_SortArray.strictlySortedLength", () => {
    Belt_SortArray.strictlySortedLength([
      1,
      2,
      3,
      4,
      3
    ], (x, y) => x < y) === 4;
    Belt_SortArray.strictlySortedLength([], Primitive_object.lessthan) === 0;
    Belt_SortArray.strictlySortedLength([1], (x, y) => x < y) === 1;
    Belt_SortArray.strictlySortedLength([
      4,
      3,
      2,
      1
    ], (x, y) => x < y) === -4;
  });
});

Mocha.describe("Belt_internalMapInt.A.blit", () => {
  Mocha.test("Belt_internalMapInt.A.blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.cmp", () => {
  Mocha.test("Belt_internalMapInt.A.cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
});

Mocha.describe("Belt_internalMapInt.A.concat", () => {
  Mocha.test("Belt_internalMapInt.A.concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.concatMany", () => {
  Mocha.test("Belt_internalMapInt.A.concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.eq", () => {
  Mocha.test("Belt_internalMapInt.A.eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
});

Mocha.describe("Belt_internalMapInt.A.every", () => {
  Mocha.test("Belt_internalMapInt.A.every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_internalMapInt.A.every2", () => {
  Mocha.test("Belt_internalMapInt.A.every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
});

Mocha.describe("Belt_internalMapInt.A.fill", () => {
  Mocha.test("Belt_internalMapInt.A.fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.flatMap", () => {
  Mocha.test("Belt_internalMapInt.A.flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.forEach", () => {
  Mocha.test("Belt_internalMapInt.A.forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
});

Mocha.describe("Belt_internalMapInt.A.forEachWithIndex", () => {
  Mocha.test("Belt_internalMapInt.A.forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
});

Mocha.describe("Belt_internalMapInt.A.get", () => {
  Mocha.test("Belt_internalMapInt.A.get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
});

Mocha.describe("Belt_internalMapInt.A.getBy", () => {
  Mocha.test("Belt_internalMapInt.A.getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_internalMapInt.A.getIndexBy", () => {
  Mocha.test("Belt_internalMapInt.A.getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_internalMapInt.A.joinWith", () => {
  Mocha.test("Belt_internalMapInt.A.joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
});

Mocha.describe("Belt_internalMapInt.A.keepMap", () => {
  Mocha.test("Belt_internalMapInt.A.keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
});

Mocha.describe("Belt_internalMapInt.A.keepWithIndex", () => {
  Mocha.test("Belt_internalMapInt.A.keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
});

Mocha.describe("Belt_internalMapInt.A.length", () => {
  Mocha.test("Belt_internalMapInt.A.length", () => {});
});

Mocha.describe("Belt_internalMapInt.A.makeBy", () => {
  Mocha.test("Belt_internalMapInt.A.makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => Math.imul(i, i)), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.makeUninitialized", () => {
  Mocha.test("Belt_internalMapInt.A.makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
});

Mocha.describe("Belt_internalMapInt.A.makeUninitializedUnsafe", () => {
  Mocha.test("Belt_internalMapInt.A.makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
});

Mocha.describe("Belt_internalMapInt.A.map", () => {
  Mocha.test("Belt_internalMapInt.A.map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.mapWithIndex", () => {
  Mocha.test("Belt_internalMapInt.A.mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.partition", () => {
  Mocha.test("Belt_internalMapInt.A.partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.range", () => {
  Mocha.test("Belt_internalMapInt.A.range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
});

Mocha.describe("Belt_internalMapInt.A.rangeBy", () => {
  Mocha.test("Belt_internalMapInt.A.rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
});

Mocha.describe("Belt_internalMapInt.A.reduce", () => {
  Mocha.test("Belt_internalMapInt.A.reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
});

Mocha.describe("Belt_internalMapInt.A.reduceReverse", () => {
  Mocha.test("Belt_internalMapInt.A.reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
});

Mocha.describe("Belt_internalMapInt.A.reduceReverse2", () => {
  Mocha.test("Belt_internalMapInt.A.reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
});

Mocha.describe("Belt_internalMapInt.A.reduceWithIndex", () => {
  Mocha.test("Belt_internalMapInt.A.reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
});

Mocha.describe("Belt_internalMapInt.A.reverse", () => {
  Mocha.test("Belt_internalMapInt.A.reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.reverseInPlace", () => {
  Mocha.test("Belt_internalMapInt.A.reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.slice", () => {
  Mocha.test("Belt_internalMapInt.A.slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.sliceToEnd", () => {
  Mocha.test("Belt_internalMapInt.A.sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.some", () => {
  Mocha.test("Belt_internalMapInt.A.some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_internalMapInt.A.some2", () => {
  Mocha.test("Belt_internalMapInt.A.some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
});

Mocha.describe("Belt_internalMapInt.A.truncateToLengthUnsafe", () => {
  Mocha.test("Belt_internalMapInt.A.truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.unzip", () => {
  Mocha.test("Belt_internalMapInt.A.unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.zip", () => {
  Mocha.test("Belt_internalMapInt.A.zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.A.zipBy", () => {
  Mocha.test("Belt_internalMapInt.A.zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.S.binarySearchBy", () => {
  Mocha.test("Belt_internalMapInt.S.binarySearchBy", () => {
    Belt_SortArray.binarySearchBy([
      1,
      2,
      3,
      4,
      33,
      35,
      36
    ], 33, Primitive_int.compare) === 4;
    Pervasives.lnot(Belt_SortArray.binarySearchBy([
      1,
      3,
      5,
      7
    ], 4, Primitive_int.compare)) === 2;
  });
});

Mocha.describe("Belt_internalMapInt.S.strictlySortedLength", () => {
  Mocha.test("Belt_internalMapInt.S.strictlySortedLength", () => {
    Belt_SortArray.strictlySortedLength([
      1,
      2,
      3,
      4,
      3
    ], (x, y) => x < y) === 4;
    Belt_SortArray.strictlySortedLength([], Primitive_object.lessthan) === 0;
    Belt_SortArray.strictlySortedLength([1], (x, y) => x < y) === 1;
    Belt_SortArray.strictlySortedLength([
      4,
      3,
      2,
      1
    ], (x, y) => x < y) === -4;
  });
});

Mocha.describe("Belt_internalMapString.A.blit", () => {
  Mocha.test("Belt_internalMapString.A.blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.cmp", () => {
  Mocha.test("Belt_internalMapString.A.cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
});

Mocha.describe("Belt_internalMapString.A.concat", () => {
  Mocha.test("Belt_internalMapString.A.concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.concatMany", () => {
  Mocha.test("Belt_internalMapString.A.concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.eq", () => {
  Mocha.test("Belt_internalMapString.A.eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
});

Mocha.describe("Belt_internalMapString.A.every", () => {
  Mocha.test("Belt_internalMapString.A.every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_internalMapString.A.every2", () => {
  Mocha.test("Belt_internalMapString.A.every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
});

Mocha.describe("Belt_internalMapString.A.fill", () => {
  Mocha.test("Belt_internalMapString.A.fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.flatMap", () => {
  Mocha.test("Belt_internalMapString.A.flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.forEach", () => {
  Mocha.test("Belt_internalMapString.A.forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
});

Mocha.describe("Belt_internalMapString.A.forEachWithIndex", () => {
  Mocha.test("Belt_internalMapString.A.forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
});

Mocha.describe("Belt_internalMapString.A.get", () => {
  Mocha.test("Belt_internalMapString.A.get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
});

Mocha.describe("Belt_internalMapString.A.getBy", () => {
  Mocha.test("Belt_internalMapString.A.getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_internalMapString.A.getIndexBy", () => {
  Mocha.test("Belt_internalMapString.A.getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_internalMapString.A.joinWith", () => {
  Mocha.test("Belt_internalMapString.A.joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
});

Mocha.describe("Belt_internalMapString.A.keepMap", () => {
  Mocha.test("Belt_internalMapString.A.keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
});

Mocha.describe("Belt_internalMapString.A.keepWithIndex", () => {
  Mocha.test("Belt_internalMapString.A.keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
});

Mocha.describe("Belt_internalMapString.A.length", () => {
  Mocha.test("Belt_internalMapString.A.length", () => {});
});

Mocha.describe("Belt_internalMapString.A.makeBy", () => {
  Mocha.test("Belt_internalMapString.A.makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => Math.imul(i, i)), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.makeUninitialized", () => {
  Mocha.test("Belt_internalMapString.A.makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
});

Mocha.describe("Belt_internalMapString.A.makeUninitializedUnsafe", () => {
  Mocha.test("Belt_internalMapString.A.makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
});

Mocha.describe("Belt_internalMapString.A.map", () => {
  Mocha.test("Belt_internalMapString.A.map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.mapWithIndex", () => {
  Mocha.test("Belt_internalMapString.A.mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.partition", () => {
  Mocha.test("Belt_internalMapString.A.partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.range", () => {
  Mocha.test("Belt_internalMapString.A.range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
});

Mocha.describe("Belt_internalMapString.A.rangeBy", () => {
  Mocha.test("Belt_internalMapString.A.rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
});

Mocha.describe("Belt_internalMapString.A.reduce", () => {
  Mocha.test("Belt_internalMapString.A.reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
});

Mocha.describe("Belt_internalMapString.A.reduceReverse", () => {
  Mocha.test("Belt_internalMapString.A.reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
});

Mocha.describe("Belt_internalMapString.A.reduceReverse2", () => {
  Mocha.test("Belt_internalMapString.A.reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
});

Mocha.describe("Belt_internalMapString.A.reduceWithIndex", () => {
  Mocha.test("Belt_internalMapString.A.reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
});

Mocha.describe("Belt_internalMapString.A.reverse", () => {
  Mocha.test("Belt_internalMapString.A.reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.reverseInPlace", () => {
  Mocha.test("Belt_internalMapString.A.reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.slice", () => {
  Mocha.test("Belt_internalMapString.A.slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.sliceToEnd", () => {
  Mocha.test("Belt_internalMapString.A.sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.some", () => {
  Mocha.test("Belt_internalMapString.A.some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_internalMapString.A.some2", () => {
  Mocha.test("Belt_internalMapString.A.some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
});

Mocha.describe("Belt_internalMapString.A.truncateToLengthUnsafe", () => {
  Mocha.test("Belt_internalMapString.A.truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.unzip", () => {
  Mocha.test("Belt_internalMapString.A.unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.zip", () => {
  Mocha.test("Belt_internalMapString.A.zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_internalMapString.A.zipBy", () => {
  Mocha.test("Belt_internalMapString.A.zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt_internalMapString.S.binarySearchBy", () => {
  Mocha.test("Belt_internalMapString.S.binarySearchBy", () => {
    Belt_SortArray.binarySearchBy([
      1,
      2,
      3,
      4,
      33,
      35,
      36
    ], 33, Primitive_int.compare) === 4;
    Pervasives.lnot(Belt_SortArray.binarySearchBy([
      1,
      3,
      5,
      7
    ], 4, Primitive_int.compare)) === 2;
  });
});

Mocha.describe("Belt_internalMapString.S.strictlySortedLength", () => {
  Mocha.test("Belt_internalMapString.S.strictlySortedLength", () => {
    Belt_SortArray.strictlySortedLength([
      1,
      2,
      3,
      4,
      3
    ], (x, y) => x < y) === 4;
    Belt_SortArray.strictlySortedLength([], Primitive_object.lessthan) === 0;
    Belt_SortArray.strictlySortedLength([1], (x, y) => x < y) === 1;
    Belt_SortArray.strictlySortedLength([
      4,
      3,
      2,
      1
    ], (x, y) => x < y) === -4;
  });
});

Mocha.describe("Belt_internalSetInt.A.blit", () => {
  Mocha.test("Belt_internalSetInt.A.blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.cmp", () => {
  Mocha.test("Belt_internalSetInt.A.cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
});

Mocha.describe("Belt_internalSetInt.A.concat", () => {
  Mocha.test("Belt_internalSetInt.A.concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.concatMany", () => {
  Mocha.test("Belt_internalSetInt.A.concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.eq", () => {
  Mocha.test("Belt_internalSetInt.A.eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
});

Mocha.describe("Belt_internalSetInt.A.every", () => {
  Mocha.test("Belt_internalSetInt.A.every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_internalSetInt.A.every2", () => {
  Mocha.test("Belt_internalSetInt.A.every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
});

Mocha.describe("Belt_internalSetInt.A.fill", () => {
  Mocha.test("Belt_internalSetInt.A.fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.flatMap", () => {
  Mocha.test("Belt_internalSetInt.A.flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.forEach", () => {
  Mocha.test("Belt_internalSetInt.A.forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
});

Mocha.describe("Belt_internalSetInt.A.forEachWithIndex", () => {
  Mocha.test("Belt_internalSetInt.A.forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
});

Mocha.describe("Belt_internalSetInt.A.get", () => {
  Mocha.test("Belt_internalSetInt.A.get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
});

Mocha.describe("Belt_internalSetInt.A.getBy", () => {
  Mocha.test("Belt_internalSetInt.A.getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_internalSetInt.A.getIndexBy", () => {
  Mocha.test("Belt_internalSetInt.A.getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_internalSetInt.A.joinWith", () => {
  Mocha.test("Belt_internalSetInt.A.joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
});

Mocha.describe("Belt_internalSetInt.A.keepMap", () => {
  Mocha.test("Belt_internalSetInt.A.keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
});

Mocha.describe("Belt_internalSetInt.A.keepWithIndex", () => {
  Mocha.test("Belt_internalSetInt.A.keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
});

Mocha.describe("Belt_internalSetInt.A.length", () => {
  Mocha.test("Belt_internalSetInt.A.length", () => {});
});

Mocha.describe("Belt_internalSetInt.A.makeBy", () => {
  Mocha.test("Belt_internalSetInt.A.makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => Math.imul(i, i)), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.makeUninitialized", () => {
  Mocha.test("Belt_internalSetInt.A.makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
});

Mocha.describe("Belt_internalSetInt.A.makeUninitializedUnsafe", () => {
  Mocha.test("Belt_internalSetInt.A.makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
});

Mocha.describe("Belt_internalSetInt.A.map", () => {
  Mocha.test("Belt_internalSetInt.A.map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.mapWithIndex", () => {
  Mocha.test("Belt_internalSetInt.A.mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.partition", () => {
  Mocha.test("Belt_internalSetInt.A.partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.range", () => {
  Mocha.test("Belt_internalSetInt.A.range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
});

Mocha.describe("Belt_internalSetInt.A.rangeBy", () => {
  Mocha.test("Belt_internalSetInt.A.rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
});

Mocha.describe("Belt_internalSetInt.A.reduce", () => {
  Mocha.test("Belt_internalSetInt.A.reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
});

Mocha.describe("Belt_internalSetInt.A.reduceReverse", () => {
  Mocha.test("Belt_internalSetInt.A.reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
});

Mocha.describe("Belt_internalSetInt.A.reduceReverse2", () => {
  Mocha.test("Belt_internalSetInt.A.reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
});

Mocha.describe("Belt_internalSetInt.A.reduceWithIndex", () => {
  Mocha.test("Belt_internalSetInt.A.reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
});

Mocha.describe("Belt_internalSetInt.A.reverse", () => {
  Mocha.test("Belt_internalSetInt.A.reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.reverseInPlace", () => {
  Mocha.test("Belt_internalSetInt.A.reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.slice", () => {
  Mocha.test("Belt_internalSetInt.A.slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.sliceToEnd", () => {
  Mocha.test("Belt_internalSetInt.A.sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.some", () => {
  Mocha.test("Belt_internalSetInt.A.some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_internalSetInt.A.some2", () => {
  Mocha.test("Belt_internalSetInt.A.some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
});

Mocha.describe("Belt_internalSetInt.A.truncateToLengthUnsafe", () => {
  Mocha.test("Belt_internalSetInt.A.truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.unzip", () => {
  Mocha.test("Belt_internalSetInt.A.unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.zip", () => {
  Mocha.test("Belt_internalSetInt.A.zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_internalSetInt.A.zipBy", () => {
  Mocha.test("Belt_internalSetInt.A.zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.blit", () => {
  Mocha.test("Belt_internalSetString.A.blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.cmp", () => {
  Mocha.test("Belt_internalSetString.A.cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
});

Mocha.describe("Belt_internalSetString.A.concat", () => {
  Mocha.test("Belt_internalSetString.A.concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.concatMany", () => {
  Mocha.test("Belt_internalSetString.A.concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.eq", () => {
  Mocha.test("Belt_internalSetString.A.eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
});

Mocha.describe("Belt_internalSetString.A.every", () => {
  Mocha.test("Belt_internalSetString.A.every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_internalSetString.A.every2", () => {
  Mocha.test("Belt_internalSetString.A.every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
});

Mocha.describe("Belt_internalSetString.A.fill", () => {
  Mocha.test("Belt_internalSetString.A.fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.flatMap", () => {
  Mocha.test("Belt_internalSetString.A.flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.forEach", () => {
  Mocha.test("Belt_internalSetString.A.forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
});

Mocha.describe("Belt_internalSetString.A.forEachWithIndex", () => {
  Mocha.test("Belt_internalSetString.A.forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
});

Mocha.describe("Belt_internalSetString.A.get", () => {
  Mocha.test("Belt_internalSetString.A.get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
});

Mocha.describe("Belt_internalSetString.A.getBy", () => {
  Mocha.test("Belt_internalSetString.A.getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_internalSetString.A.getIndexBy", () => {
  Mocha.test("Belt_internalSetString.A.getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
});

Mocha.describe("Belt_internalSetString.A.joinWith", () => {
  Mocha.test("Belt_internalSetString.A.joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
});

Mocha.describe("Belt_internalSetString.A.keepMap", () => {
  Mocha.test("Belt_internalSetString.A.keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
});

Mocha.describe("Belt_internalSetString.A.keepWithIndex", () => {
  Mocha.test("Belt_internalSetString.A.keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
});

Mocha.describe("Belt_internalSetString.A.length", () => {
  Mocha.test("Belt_internalSetString.A.length", () => {});
});

Mocha.describe("Belt_internalSetString.A.makeBy", () => {
  Mocha.test("Belt_internalSetString.A.makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => Math.imul(i, i)), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.makeUninitialized", () => {
  Mocha.test("Belt_internalSetString.A.makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
});

Mocha.describe("Belt_internalSetString.A.makeUninitializedUnsafe", () => {
  Mocha.test("Belt_internalSetString.A.makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
});

Mocha.describe("Belt_internalSetString.A.map", () => {
  Mocha.test("Belt_internalSetString.A.map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.mapWithIndex", () => {
  Mocha.test("Belt_internalSetString.A.mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.partition", () => {
  Mocha.test("Belt_internalSetString.A.partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.range", () => {
  Mocha.test("Belt_internalSetString.A.range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
});

Mocha.describe("Belt_internalSetString.A.rangeBy", () => {
  Mocha.test("Belt_internalSetString.A.rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
});

Mocha.describe("Belt_internalSetString.A.reduce", () => {
  Mocha.test("Belt_internalSetString.A.reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
});

Mocha.describe("Belt_internalSetString.A.reduceReverse", () => {
  Mocha.test("Belt_internalSetString.A.reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
});

Mocha.describe("Belt_internalSetString.A.reduceReverse2", () => {
  Mocha.test("Belt_internalSetString.A.reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
});

Mocha.describe("Belt_internalSetString.A.reduceWithIndex", () => {
  Mocha.test("Belt_internalSetString.A.reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
});

Mocha.describe("Belt_internalSetString.A.reverse", () => {
  Mocha.test("Belt_internalSetString.A.reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.reverseInPlace", () => {
  Mocha.test("Belt_internalSetString.A.reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.slice", () => {
  Mocha.test("Belt_internalSetString.A.slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.sliceToEnd", () => {
  Mocha.test("Belt_internalSetString.A.sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.some", () => {
  Mocha.test("Belt_internalSetString.A.some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
});

Mocha.describe("Belt_internalSetString.A.some2", () => {
  Mocha.test("Belt_internalSetString.A.some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
});

Mocha.describe("Belt_internalSetString.A.truncateToLengthUnsafe", () => {
  Mocha.test("Belt_internalSetString.A.truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.unzip", () => {
  Mocha.test("Belt_internalSetString.A.unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.zip", () => {
  Mocha.test("Belt_internalSetString.A.zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A.zipBy", () => {
  Mocha.test("Belt_internalSetString.A.zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("BigInt.fromStringExn", () => {
  Mocha.test("BigInt.fromStringExn", () => {
    BigInt("123");
    BigInt("");
    BigInt("0x11");
    BigInt("0b11");
    BigInt("0o11");
    try {
      BigInt("a");
    } catch (raw__error) {
      let _error = Primitive_exceptions.internalToException(raw__error);
      if (_error.RE_EXN_ID !== Exn.$$Error) {
        throw _error;
      }
      
    }
  });
});

Mocha.describe("BigInt.toLocaleString", () => {
  Mocha.test("BigInt.toLocaleString", () => {
    console.log((123n).toString());
  });
});

Mocha.describe("BigInt.toString", () => {
  Mocha.test("BigInt.toString", () => {
    console.log((123n).toString());
  });
});

Mocha.describe("Console.assert2", () => {
  Mocha.test("Console.assert2", () => {
    console.assert(false, "Hello", "World");
    console.assert(true, [
      1,
      2,
      3
    ], /* '4' */52);
  });
});

Mocha.describe("Console.assert3", () => {
  Mocha.test("Console.assert3", () => {
    console.assert(false, "Hello", "World", "ReScript");
    console.assert(true, "One", 2, 3);
  });
});

Mocha.describe("Console.assert4", () => {
  Mocha.test("Console.assert4", () => {
    console.assert(false, "Hello", "World", "ReScript", "!!!");
    console.assert(true, [
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar");
  });
});

Mocha.describe("Console.assert5", () => {
  Mocha.test("Console.assert5", () => {
    console.assert(false, "Hello", "World", "JS", /* '!' */33, /* '!' */33);
    console.assert(true, [
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
});

Mocha.describe("Console.assert6", () => {
  Mocha.test("Console.assert6", () => {
    console.assert(false, "Hello", "World", "JS", /* '!' */33, /* '!' */33, /* '?' */63);
    console.assert(true, [
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
});

Mocha.describe("Console.assertMany", () => {
  Mocha.test("Console.assertMany", () => {
    console.assert(false, "Hello", "World");
    console.assert(true, 1, 2, 3);
  });
});

Mocha.describe("Console.assert_", () => {
  Mocha.test("Console.assert_", () => {
    console.assert(false, "Hello World!");
    console.assert(true, "The answer");
  });
});

Mocha.describe("Console.clear", () => {
  Mocha.test("Console.clear", () => {
    console.clear();
  });
});

Mocha.describe("Console.count", () => {
  Mocha.test("Console.count", () => {
    console.count("rescript");
  });
});

Mocha.describe("Console.countReset", () => {
  Mocha.test("Console.countReset", () => {
    console.countReset("rescript");
  });
});

Mocha.describe("Console.debug", () => {
  Mocha.test("Console.debug", () => {
    console.debug("Hello");
    let obj = {
      name: "ReScript",
      version: 10
    };
    console.debug(obj);
  });
});

Mocha.describe("Console.debug2", () => {
  Mocha.test("Console.debug2", () => {
    console.debug("Hello", "World");
    console.debug([
      1,
      2,
      3
    ], /* '4' */52);
  });
});

Mocha.describe("Console.debug3", () => {
  Mocha.test("Console.debug3", () => {
    console.debug("Hello", "World", "ReScript");
    console.debug("One", 2, 3);
  });
});

Mocha.describe("Console.debug4", () => {
  Mocha.test("Console.debug4", () => {
    console.debug("Hello", "World", "ReScript", "!!!");
    console.debug([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar");
  });
});

Mocha.describe("Console.debug5", () => {
  Mocha.test("Console.debug5", () => {
    console.debug("Hello", "World", "JS", /* '!' */33, /* '!' */33);
    console.debug([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
});

Mocha.describe("Console.debug6", () => {
  Mocha.test("Console.debug6", () => {
    console.debug("Hello", "World", "JS", /* '!' */33, /* '!' */33, /* '?' */63);
    console.debug([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
});

Mocha.describe("Console.debugMany", () => {
  Mocha.test("Console.debugMany", () => {
    console.debug("Hello", "World");
    console.debug(1, 2, 3);
  });
});

Mocha.describe("Console.dir", () => {
  Mocha.test("Console.dir", () => {
    console.dir({
      language: "rescript",
      version: "10.1.2"
    });
  });
});

Mocha.describe("Console.error", () => {
  Mocha.test("Console.error", () => {
    console.error("error message");
    console.error([
      "error",
      "invalid value"
    ]);
  });
});

Mocha.describe("Console.error2", () => {
  Mocha.test("Console.error2", () => {
    console.error("Error", "here");
    console.error([
      "log",
      "error"
    ], "message");
  });
});

Mocha.describe("Console.error3", () => {
  Mocha.test("Console.error3", () => {
    console.error("Hello", "World", "!!!");
    console.error("first", "second", "third");
  });
});

Mocha.describe("Console.error4", () => {
  Mocha.test("Console.error4", () => {
    console.error("Hello", "World", "ReScript", /* '!' */33);
    console.error("first", "second", "third", "fourth");
  });
});

Mocha.describe("Console.error5", () => {
  Mocha.test("Console.error5", () => {
    console.error(/* 'e' */101, /* 'r' */114, /* 'r' */114, /* 'o' */111, /* 'r' */114);
    console.error(1, "second", "third", "fourth", /* 'c' */99);
  });
});

Mocha.describe("Console.error6", () => {
  Mocha.test("Console.error6", () => {
    console.error("Hello", "World", "from", "JS", "!!!", /* '!' */33);
    console.error([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
});

Mocha.describe("Console.errorMany", () => {
  Mocha.test("Console.errorMany", () => {
    console.error("Hello", "World");
    console.error(1, 2, 3);
  });
});

Mocha.describe("Console.group", () => {
  Mocha.test("Console.group", () => {
    console.group("first group");
    console.group("second group");
    console.log("a message on the second level");
    console.groupEnd();
    console.log("a message message on the first level");
    console.groupEnd();
  });
});

Mocha.describe("Console.info", () => {
  Mocha.test("Console.info", () => {
    console.info("Information");
    console.info([
      "Hello",
      "JS"
    ]);
  });
});

Mocha.describe("Console.info2", () => {
  Mocha.test("Console.info2", () => {
    console.info("Info", "failed to download");
    console.info("info", {
      name: "ReScript"
    });
  });
});

Mocha.describe("Console.info3", () => {
  Mocha.test("Console.info3", () => {
    console.info("Hello", "World", "ReScript");
    console.info([
      1,
      2,
      3
    ], 4, 5);
  });
});

Mocha.describe("Console.info4", () => {
  Mocha.test("Console.info4", () => {
    console.info("Hello", "World", "ReScript", /* '!' */33);
    console.info([
      1,
      2,
      3
    ], 4, 5, "lastinfo");
  });
});

Mocha.describe("Console.info5", () => {
  Mocha.test("Console.info5", () => {
    console.info("Hello", "World", "from", "JS", "!!!");
    console.info([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
});

Mocha.describe("Console.info6", () => {
  Mocha.test("Console.info6", () => {
    console.info("Hello", "World", "from", "JS", "!!!", /* '!' */33);
    console.info([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
});

Mocha.describe("Console.infoMany", () => {
  Mocha.test("Console.infoMany", () => {
    console.info("Hello", "World");
    console.info(1, 2, 3);
  });
});

Mocha.describe("Console.log", () => {
  Mocha.test("Console.log", () => {
    console.log("Hello");
    let obj = {
      name: "ReScript",
      version: 10
    };
    console.log(obj);
  });
});

Mocha.describe("Console.log2", () => {
  Mocha.test("Console.log2", () => {
    console.log("Hello", "World");
    console.log([
      1,
      2,
      3
    ], /* '4' */52);
  });
});

Mocha.describe("Console.log3", () => {
  Mocha.test("Console.log3", () => {
    console.log("Hello", "World", "ReScript");
    console.log("One", 2, 3);
  });
});

Mocha.describe("Console.log4", () => {
  Mocha.test("Console.log4", () => {
    console.log("Hello", "World", "ReScript", "!!!");
    console.log([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar");
  });
});

Mocha.describe("Console.log5", () => {
  Mocha.test("Console.log5", () => {
    console.log("Hello", "World", "JS", /* '!' */33, /* '!' */33);
    console.log([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
});

Mocha.describe("Console.log6", () => {
  Mocha.test("Console.log6", () => {
    console.log("Hello", "World", "JS", /* '!' */33, /* '!' */33, /* '?' */63);
    console.log([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
});

Mocha.describe("Console.logMany", () => {
  Mocha.test("Console.logMany", () => {
    console.log("Hello", "World");
    console.log(1, 2, 3);
  });
});

Mocha.describe("Console.table", () => {
  Mocha.test("Console.table", () => {
    console.table({
      language: "rescript",
      version: "10.1.2"
    });
  });
});

Mocha.describe("Console.time", () => {
  Mocha.test("Console.time", () => {
    console.time("for_time");
    for (let x = 3; x >= 1; --x) {
      console.log(x);
      console.timeLog("for_time");
    }
    console.timeEnd("for_time");
  });
});

Mocha.describe("Console.timeEnd", () => {
  Mocha.test("Console.timeEnd", () => {
    console.time("for_time");
    for (let x = 3; x >= 1; --x) {
      console.log(x);
      console.timeLog("for_time");
    }
    console.timeEnd("for_time");
  });
});

Mocha.describe("Console.timeLog", () => {
  Mocha.test("Console.timeLog", () => {
    console.time("for_time");
    for (let x = 3; x >= 1; --x) {
      console.log(x);
      console.timeLog("for_time");
    }
    console.timeEnd("for_time");
  });
});

Mocha.describe("Console.trace", () => {
  Mocha.test("Console.trace", () => {
    console.trace();
  });
});

Mocha.describe("Console.warn", () => {
  Mocha.test("Console.warn", () => {
    console.warn("Warning");
    console.warn([
      "Warning",
      "invalid number"
    ]);
  });
});

Mocha.describe("Console.warn2", () => {
  Mocha.test("Console.warn2", () => {
    console.warn("Hello", "World");
    console.warn([
      1,
      2,
      3
    ], 4);
  });
});

Mocha.describe("Console.warn3", () => {
  Mocha.test("Console.warn3", () => {
    console.warn("Hello", "World", "ReScript");
    console.warn([
      1,
      2,
      3
    ], 4, 5);
  });
});

Mocha.describe("Console.warn4", () => {
  Mocha.test("Console.warn4", () => {
    console.warn("Hello", "World", "ReScript", "!!!");
    console.warn("first", "second", "third", "fourth");
  });
});

Mocha.describe("Console.warn5", () => {
  Mocha.test("Console.warn5", () => {
    console.warn("Hello", "World", "from", "JS", "!!!");
    console.warn([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
});

Mocha.describe("Console.warn6", () => {
  Mocha.test("Console.warn6", () => {
    console.warn("Hello", "World", "from", "JS", "!!!", /* '!' */33);
    console.warn([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
});

Mocha.describe("Console.warnMany", () => {
  Mocha.test("Console.warnMany", () => {
    console.warn("Hello", "World");
    console.warn(1, 2, 3);
  });
});

Mocha.describe("Date.UTC.makeWithYM", () => {
  Mocha.test("Date.UTC.makeWithYM", () => {
    Date.UTC(2023, 0);
    Date.UTC(2023, 11);
    Date.UTC(2023, 12);
    Date.UTC(2023, -1);
  });
});

Mocha.describe("Date.UTC.makeWithYMD", () => {
  Mocha.test("Date.UTC.makeWithYMD", () => {
    Date.UTC(2023, 1, 20);
    Date.UTC(2023, 1, -1);
    Date.UTC(2023, 1, 29);
  });
});

Mocha.describe("Date.UTC.makeWithYMDH", () => {
  Mocha.test("Date.UTC.makeWithYMDH", () => {
    Date.UTC(2023, 1, 20, 16);
    Date.UTC(2023, 1, 20, 24);
    Date.UTC(2023, 1, 20, -1);
  });
});

Mocha.describe("Date.UTC.makeWithYMDHM", () => {
  Mocha.test("Date.UTC.makeWithYMDHM", () => {
    Date.UTC(2023, 1, 20, 16, 40);
    Date.UTC(2023, 1, 20, 16, 60);
    Date.UTC(2023, 1, 20, 16, -1);
  });
});

Mocha.describe("Date.UTC.makeWithYMDHMS", () => {
  Mocha.test("Date.UTC.makeWithYMDHMS", () => {
    Date.UTC(2023, 1, 20, 16, 40, 0);
    Date.UTC(2023, 1, 20, 16, 40, 60);
    Date.UTC(2023, 1, 20, 16, 40, -1);
  });
});

Mocha.describe("Date.UTC.makeWithYMDHMSM", () => {
  Mocha.test("Date.UTC.makeWithYMDHMSM", () => {
    console.log(Date.UTC(2023, 1, 20, 16, 40, 0, 0));
    console.log(Date.UTC(2023, 1, 20, 16, 40, 0, 1000));
    console.log(Date.UTC(2023, 1, 20, 16, 40, 0, -1));
  });
});

Mocha.describe("Date.fromString", () => {
  Mocha.test("Date.fromString", () => {
    new Date("2023");
    new Date("2023-02-20");
    new Date("2023-02-20T16:40:00.00Z");
    new Date("");
    new Date("").getTime();
  });
});

Mocha.describe("Date.fromTime", () => {
  Mocha.test("Date.fromTime", () => {
    new Date(0.0);
    new Date(-86400000.0);
    new Date(86400000.0);
  });
});

Mocha.describe("Date.getDate", () => {
  Mocha.test("Date.getDate", () => {
    new Date("2023-02-20T16:40:00.00").getDate();
  });
});

Mocha.describe("Date.getDay", () => {
  Mocha.test("Date.getDay", () => {
    new Date("2023-02-20T16:40:00.00").getDay();
  });
});

Mocha.describe("Date.getFullYear", () => {
  Mocha.test("Date.getFullYear", () => {
    new Date("2023-02-20").getFullYear();
  });
});

Mocha.describe("Date.getHours", () => {
  Mocha.test("Date.getHours", () => {
    new Date("2023-02-20T16:40:00.00").getHours();
  });
});

Mocha.describe("Date.getMilliseconds", () => {
  Mocha.test("Date.getMilliseconds", () => {
    new Date("2023-02-20T16:40:00.00").getMilliseconds();
  });
});

Mocha.describe("Date.getMinutes", () => {
  Mocha.test("Date.getMinutes", () => {
    new Date("2023-02-20T16:40:00.00").getMinutes();
  });
});

Mocha.describe("Date.getMonth", () => {
  Mocha.test("Date.getMonth", () => {
    new Date("2023-01-01").getMonth();
  });
});

Mocha.describe("Date.getSeconds", () => {
  Mocha.test("Date.getSeconds", () => {
    new Date("2023-02-20T16:40:00.00").getSeconds();
  });
});

Mocha.describe("Date.getTime", () => {
  Mocha.test("Date.getTime", () => {
    new Date("2023-02-20").getTime();
  });
});

Mocha.describe("Date.getTimezoneOffset", () => {
  Mocha.test("Date.getTimezoneOffset", () => {
    new Date("2023-01-01").getTimezoneOffset();
    new Date("2023-06-01").getTimezoneOffset();
  });
});

Mocha.describe("Date.getUTCDate", () => {
  Mocha.test("Date.getUTCDate", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCDate();
  });
});

Mocha.describe("Date.getUTCDay", () => {
  Mocha.test("Date.getUTCDay", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCDay();
  });
});

Mocha.describe("Date.getUTCFullYear", () => {
  Mocha.test("Date.getUTCFullYear", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCFullYear();
  });
});

Mocha.describe("Date.getUTCHours", () => {
  Mocha.test("Date.getUTCHours", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCHours();
  });
});

Mocha.describe("Date.getUTCMilliseconds", () => {
  Mocha.test("Date.getUTCMilliseconds", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCMilliseconds();
  });
});

Mocha.describe("Date.getUTCMinutes", () => {
  Mocha.test("Date.getUTCMinutes", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCMinutes();
  });
});

Mocha.describe("Date.getUTCMonth", () => {
  Mocha.test("Date.getUTCMonth", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCMonth();
  });
});

Mocha.describe("Date.getUTCSeconds", () => {
  Mocha.test("Date.getUTCSeconds", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCSeconds();
  });
});

Mocha.describe("Date.make", () => {
  Mocha.test("Date.make", () => {
    new Date();
  });
});

Mocha.describe("Date.makeWithYM", () => {
  Mocha.test("Date.makeWithYM", () => {
    new Date(2023, 0);
    new Date(2023, 11);
    new Date(2023, 12);
    new Date(2023, -1);
  });
});

Mocha.describe("Date.makeWithYMD", () => {
  Mocha.test("Date.makeWithYMD", () => {
    new Date(2023, 1, 20);
    new Date(2023, 1, -1);
    new Date(2023, 1, 29);
  });
});

Mocha.describe("Date.makeWithYMDH", () => {
  Mocha.test("Date.makeWithYMDH", () => {
    new Date(2023, 1, 20, 16);
    new Date(2023, 1, 20, 24);
    new Date(2023, 1, 20, -1);
  });
});

Mocha.describe("Date.makeWithYMDHM", () => {
  Mocha.test("Date.makeWithYMDHM", () => {
    new Date(2023, 1, 20, 16, 40);
    new Date(2023, 1, 20, 16, 60);
    new Date(2023, 1, 20, 16, -1);
  });
});

Mocha.describe("Date.makeWithYMDHMS", () => {
  Mocha.test("Date.makeWithYMDHMS", () => {
    new Date(2023, 1, 20, 16, 40, 0);
    new Date(2023, 1, 20, 16, 40, 60);
    new Date(2023, 1, 20, 16, 40, -1);
  });
});

Mocha.describe("Date.makeWithYMDHMSM", () => {
  Mocha.test("Date.makeWithYMDHMSM", () => {
    new Date(2023, 1, 20, 16, 40, 0, 0);
    new Date(2023, 1, 20, 16, 40, 0, 1000);
    new Date(2023, 1, 20, 16, 40, 0, -1);
  });
});

Mocha.describe("Date.setDate", () => {
  Mocha.test("Date.setDate", () => {
    new Date("2023-02-20T16:40:00.00").setDate(1);
  });
});

Mocha.describe("Date.setFullYear", () => {
  Mocha.test("Date.setFullYear", () => {
    new Date("2023-02-20T16:40:00.00").setFullYear(2024);
  });
});

Mocha.describe("Date.setFullYearM", () => {
  Mocha.test("Date.setFullYearM", () => {
    new Date("2023-02-20T16:40:00.00").setFullYear(2024, 0);
  });
});

Mocha.describe("Date.setFullYearMD", () => {
  Mocha.test("Date.setFullYearMD", () => {
    new Date("2023-02-20T16:40:00.00").setFullYear(2024, 0, 1);
  });
});

Mocha.describe("Date.setHours", () => {
  Mocha.test("Date.setHours", () => {
    new Date("2023-02-20T16:40:00.00").setHours(0);
  });
});

Mocha.describe("Date.setHoursM", () => {
  Mocha.test("Date.setHoursM", () => {
    new Date("2023-02-20T16:40:00.00").setHours(0, 0);
  });
});

Mocha.describe("Date.setHoursMS", () => {
  Mocha.test("Date.setHoursMS", () => {
    new Date("2023-02-20T16:40:00.00").setHours(0, 0, 0);
  });
});

Mocha.describe("Date.setHoursMSMs", () => {
  Mocha.test("Date.setHoursMSMs", () => {
    new Date("2023-02-20T16:40:00.00").setHours(0, 0, 0, 0);
  });
});

Mocha.describe("Date.setMilliseconds", () => {
  Mocha.test("Date.setMilliseconds", () => {
    new Date("2023-02-20T16:40:00.00").setMilliseconds(0);
  });
});

Mocha.describe("Date.setMinutes", () => {
  Mocha.test("Date.setMinutes", () => {
    new Date("2023-02-20T16:40:00.00").setMinutes(0);
  });
});

Mocha.describe("Date.setMinutesS", () => {
  Mocha.test("Date.setMinutesS", () => {
    new Date("2023-02-20T16:40:00.00").setMinutes(0, 0);
  });
});

Mocha.describe("Date.setMinutesSMs", () => {
  Mocha.test("Date.setMinutesSMs", () => {
    new Date("2023-02-20T16:40:00.00").setMinutes(0, 0, 0);
  });
});

Mocha.describe("Date.setMonth", () => {
  Mocha.test("Date.setMonth", () => {
    new Date("2023-02-20T16:40:00.00").setMonth(0);
  });
});

Mocha.describe("Date.setSeconds", () => {
  Mocha.test("Date.setSeconds", () => {
    new Date("2023-02-20T16:40:00.00").setSeconds(0);
  });
});

Mocha.describe("Date.setSecondsMs", () => {
  Mocha.test("Date.setSecondsMs", () => {
    new Date("2023-02-20T16:40:00.00").setSeconds(0, 0);
  });
});

Mocha.describe("Date.setUTCDate", () => {
  Mocha.test("Date.setUTCDate", () => {
    new Date("2023-02-20T16:40:00.00").setUTCDate(1);
  });
});

Mocha.describe("Date.setUTCFullYear", () => {
  Mocha.test("Date.setUTCFullYear", () => {
    new Date("2023-02-20T16:40:00.00").setUTCFullYear(2024);
  });
});

Mocha.describe("Date.setUTCFullYearM", () => {
  Mocha.test("Date.setUTCFullYearM", () => {
    new Date("2023-02-20T16:40:00.00").setUTCFullYear(2024, 0);
  });
});

Mocha.describe("Date.setUTCFullYearMD", () => {
  Mocha.test("Date.setUTCFullYearMD", () => {
    new Date("2023-02-20T16:40:00.00").setUTCFullYear(2024, 0, 1);
  });
});

Mocha.describe("Date.setUTCHours", () => {
  Mocha.test("Date.setUTCHours", () => {
    new Date("2023-02-20T16:40:00.00").setUTCHours(0);
  });
});

Mocha.describe("Date.setUTCHoursM", () => {
  Mocha.test("Date.setUTCHoursM", () => {
    new Date("2023-02-20T16:40:00.00").setUTCHours(0, 0);
  });
});

Mocha.describe("Date.setUTCHoursMS", () => {
  Mocha.test("Date.setUTCHoursMS", () => {
    new Date("2023-02-20T16:40:00.00").setUTCHours(0, 0, 0);
  });
});

Mocha.describe("Date.setUTCHoursMSMs", () => {
  Mocha.test("Date.setUTCHoursMSMs", () => {
    new Date("2023-02-20T16:40:00.00").setUTCHours(0, 0, 0, 0);
  });
});

Mocha.describe("Date.setUTCMilliseconds", () => {
  Mocha.test("Date.setUTCMilliseconds", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMilliseconds(0);
  });
});

Mocha.describe("Date.setUTCMinutes", () => {
  Mocha.test("Date.setUTCMinutes", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMinutes(0);
  });
});

Mocha.describe("Date.setUTCMinutesS", () => {
  Mocha.test("Date.setUTCMinutesS", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMinutes(0, 0);
  });
});

Mocha.describe("Date.setUTCMinutesSMs", () => {
  Mocha.test("Date.setUTCMinutesSMs", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMinutes(0, 0, 0);
  });
});

Mocha.describe("Date.setUTCMonth", () => {
  Mocha.test("Date.setUTCMonth", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMonth(0);
  });
});

Mocha.describe("Date.setUTCSeconds", () => {
  Mocha.test("Date.setUTCSeconds", () => {
    new Date("2023-02-20T16:40:00.00").setUTCSeconds(0);
  });
});

Mocha.describe("Date.setUTCSecondsMs", () => {
  Mocha.test("Date.setUTCSecondsMs", () => {
    new Date("2023-02-20T16:40:00.00").setUTCSeconds(0, 0);
  });
});

Mocha.describe("Date.toDateString", () => {
  Mocha.test("Date.toDateString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+01:00").toDateString());
    console.log(new Date("2023-01-01T00:00:00.00+08:00").toDateString());
  });
});

Mocha.describe("Date.toISOString", () => {
  Mocha.test("Date.toISOString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+00:00").toISOString());
    console.log(new Date("2023-01-01T00:00:00.00+08:00").toISOString());
  });
});

Mocha.describe("Date.toJSON", () => {
  Mocha.test("Date.toJSON", () => {
    new Date("2023-01-01T00:00:00.00+00:00").toJSON();
    new Date("").toJSON();
  });
});

Mocha.describe("Date.toLocaleDateString", () => {
  Mocha.test("Date.toLocaleDateString", () => {
    console.log(new Date().toLocaleDateString());
  });
});

Mocha.describe("Date.toLocaleDateStringWithLocale", () => {
  Mocha.test("Date.toLocaleDateStringWithLocale", () => {
    console.log(new Date().toLocaleDateString("en-US"));
  });
});

Mocha.describe("Date.toLocaleDateStringWithLocaleAndOptions", () => {
  Mocha.test("Date.toLocaleDateStringWithLocaleAndOptions", () => {
    console.log(new Date().toLocaleDateString("en-US", {
      dateStyle: "long"
    }));
    console.log(new Date().toLocaleDateString("de", {
      hour: "2-digit",
      minute: "2-digit"
    }));
    console.log(new Date().toLocaleDateString("de", {
      year: "numeric"
    }));
  });
});

Mocha.describe("Date.toLocaleString", () => {
  Mocha.test("Date.toLocaleString", () => {
    console.log(new Date().toLocaleString());
  });
});

Mocha.describe("Date.toLocaleStringWithLocale", () => {
  Mocha.test("Date.toLocaleStringWithLocale", () => {
    console.log(new Date().toLocaleString("en-US"));
  });
});

Mocha.describe("Date.toLocaleStringWithLocaleAndOptions", () => {
  Mocha.test("Date.toLocaleStringWithLocaleAndOptions", () => {
    console.log(new Date().toLocaleString("en", {
      dateStyle: "short",
      timeStyle: "short"
    }));
    console.log(new Date().toLocaleString("en", {
      era: "long",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "numeric",
      timeZoneName: "short"
    }));
  });
});

Mocha.describe("Date.toLocaleTimeString", () => {
  Mocha.test("Date.toLocaleTimeString", () => {
    console.log(new Date().toLocaleTimeString());
  });
});

Mocha.describe("Date.toLocaleTimeStringWithLocale", () => {
  Mocha.test("Date.toLocaleTimeStringWithLocale", () => {
    console.log(new Date().toLocaleTimeString("en-US"));
  });
});

Mocha.describe("Date.toLocaleTimeStringWithLocaleAndOptions", () => {
  Mocha.test("Date.toLocaleTimeStringWithLocaleAndOptions", () => {
    console.log(new Date().toLocaleTimeString("en-US", {
      timeStyle: "long"
    }));
    console.log(new Date().toLocaleTimeString("de", {
      hour: "2-digit",
      minute: "2-digit"
    }));
  });
});

Mocha.describe("Date.toString", () => {
  Mocha.test("Date.toString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+01:00").toString());
    console.log(new Date("2023-06-01T00:00:00.00+01:00").toString());
  });
});

Mocha.describe("Date.toTimeString", () => {
  Mocha.test("Date.toTimeString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+01:00").toTimeString());
    console.log(new Date("2023-01-01T00:00:00.00+08:00").toTimeString());
  });
});

Mocha.describe("Date.toUTCString", () => {
  Mocha.test("Date.toUTCString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+00:00").toUTCString());
    console.log(new Date("2023-01-01T00:00:00.00+08:00").toUTCString());
  });
});

Mocha.describe("Dict.assign", () => {
  Mocha.test("Dict.assign", () => {
    let dict1 = {};
    dict1["firstKey"] = 1;
    console.log(Object.keys(dict1));
    let dict2 = {};
    dict2["someKey"] = 2;
    dict2["someKey2"] = 3;
    let dict1$1 = Object.assign(dict1, dict2);
    console.log(Object.keys(dict1$1));
  });
});

Mocha.describe("Dict.copy", () => {
  Mocha.test("Dict.copy", () => {
    let dict = Object.fromEntries([
      [
        "key1",
        "value1"
      ],
      [
        "key2",
        "value2"
      ]
    ]);
    let dict2 = Object.assign({}, dict);
    console.log(Object.keys(dict), Object.keys(dict2));
  });
});

Mocha.describe("Dict.delete", () => {
  Mocha.test("Dict.delete", () => {
    let dict = Object.fromEntries([[
        "someKey",
        "someValue"
      ]]);
    Dict.$$delete(dict, "someKey");
  });
});

Mocha.describe("Dict.forEach", () => {
  Mocha.test("Dict.forEach", () => {
    let dict = Object.fromEntries([
      [
        "key1",
        "value1"
      ],
      [
        "key2",
        "value2"
      ]
    ]);
    Dict.forEach(dict, value => {
      console.log(value);
    });
  });
});

Mocha.describe("Dict.forEachWithKey", () => {
  Mocha.test("Dict.forEachWithKey", () => {
    let dict = Object.fromEntries([
      [
        "key1",
        "value1"
      ],
      [
        "key2",
        "value2"
      ]
    ]);
    Dict.forEachWithKey(dict, (value, key) => {
      console.log(value, key);
    });
  });
});

Mocha.describe("Dict.fromArray", () => {
  Mocha.test("Dict.fromArray", () => {
    Object.fromEntries([
      [
        "key1",
        "value1"
      ],
      [
        "key2",
        "value2"
      ]
    ]);
  });
});

Mocha.describe("Dict.fromIterator", () => {
  Mocha.test("Dict.fromIterator", () => {
    let iterator = ((() => {
    var map1 = new Map();
    map1.set('first', 1);
    map1.set('second', 2);
    var iterator1 = map1[Symbol.iterator]();
    return iterator1;
  })());
    Pervasives.assertEqual(Object.values(Object.fromEntries(iterator)), [
      1,
      2
    ]);
  });
});

Mocha.describe("Dict.get", () => {
  Mocha.test("Dict.get", () => {
    let dict = Object.fromEntries([[
        "someKey",
        "someValue"
      ]]);
    let value = dict["someKey"];
    if (value !== undefined) {
      console.log(value);
    } else {
      console.log("Nope, didn't have the key.");
    }
  });
});

Mocha.describe("Dict.getUnsafe", () => {
  Mocha.test("Dict.getUnsafe", () => {
    let dict = Object.fromEntries([
      [
        "key1",
        "value1"
      ],
      [
        "key2",
        "value2"
      ]
    ]);
    let value = dict["key1"];
    console.log(value);
  });
});

Mocha.describe("Dict.keysToArray", () => {
  Mocha.test("Dict.keysToArray", () => {
    let dict = {};
    dict["someKey"] = 1;
    dict["someKey2"] = 2;
    let keys = Object.keys(dict);
    console.log(keys);
  });
});

Mocha.describe("Dict.make", () => {
  Mocha.test("Dict.make", () => {
    let dict2 = {};
    dict2["someKey"] = 12;
  });
});

Mocha.describe("Dict.mapValues", () => {
  Mocha.test("Dict.mapValues", () => {
    let dict = Object.fromEntries([
      [
        "key1",
        1
      ],
      [
        "key2",
        2
      ]
    ]);
    Object.entries(Dict.mapValues(dict, v => v + 10 | 0));
    Object.entries(Dict.mapValues(dict, v => v.toString()));
  });
});

Mocha.describe("Dict.set", () => {
  Mocha.test("Dict.set", () => {
    let dict = {};
    dict["someKey"] = "someValue";
  });
});

Mocha.describe("Dict.toArray", () => {
  Mocha.test("Dict.toArray", () => {
    let dict = {};
    dict["someKey"] = 1;
    dict["someKey2"] = 2;
    let asArray = Object.entries(dict);
    console.log(asArray);
  });
});

Mocha.describe("Dict.valuesToArray", () => {
  Mocha.test("Dict.valuesToArray", () => {
    let dict = {};
    dict["someKey"] = 1;
    dict["someKey2"] = 2;
    let values = Object.values(dict);
    console.log(values);
  });
});

Mocha.describe("Error.make", () => {
  Mocha.test("Error.make", () => {
    let error = new Error("Some message here");
    console.log(error.message);
    console.log(error.name);
  });
});

Mocha.describe("Error.message", () => {
  Mocha.test("Error.message", () => {
    let error = new SyntaxError("Some message here");
    console.log(error.message);
  });
});

Mocha.describe("Error.name", () => {
  Mocha.test("Error.name", () => {
    let error = new SyntaxError("Some message here");
    console.log(error.name);
  });
});

Mocha.describe("Error.panic", () => {
  Mocha.test("Error.panic", () => {
    try {
      $$Error.panic("Uh oh. This was unexpected!");
    } catch (raw_obj) {
      let obj = Primitive_exceptions.internalToException(raw_obj);
      if (obj.RE_EXN_ID === Exn.$$Error) {
        let m = obj._1.message;
        if (m !== undefined) {
          if (m !== "Panic! Uh oh. This was unexpected!") {
            throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "generated_mocha_test.res",
                12962,
                15
              ],
              Error: new Error()
            };
          }
          
        } else {
          throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "generated_mocha_test.res",
              12963,
              12
            ],
            Error: new Error()
          };
        }
      } else {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            12965,
            7
          ],
          Error: new Error()
        };
      }
    }
  });
});

Mocha.describe("Error.raise", () => {
  Mocha.test("Error.raise", () => {
    new Error("Everything is upside down.");
    console.log("Phew, sanity still rules.");
  });
});

Mocha.describe("Error.stack", () => {
  Mocha.test("Error.stack", () => {
    let error = new Error("error");
    console.log(error.stack);
  });
});

Mocha.describe("Error.toException", () => {
  Mocha.test("Error.toException", () => {
    new Error("Something went wrong.");
  });
});

Mocha.describe("Float.Constants.epsilon", () => {
  Mocha.test("Float.Constants.epsilon", () => {});
});

Mocha.describe("Float.Constants.maxValue", () => {
  Mocha.test("Float.Constants.maxValue", () => {});
});

Mocha.describe("Float.Constants.minValue", () => {
  Mocha.test("Float.Constants.minValue", () => {});
});

Mocha.describe("Float.Constants.nan", () => {
  Mocha.test("Float.Constants.nan", () => {});
});

Mocha.describe("Float.Constants.negativeInfinity", () => {
  Mocha.test("Float.Constants.negativeInfinity", () => {});
});

Mocha.describe("Float.Constants.positiveInfinity", () => {
  Mocha.test("Float.Constants.positiveInfinity", () => {});
});

Mocha.describe("Float.clamp", () => {
  Mocha.test("Float.clamp", () => {
    Float.clamp(undefined, undefined, 4.2) === 4.2;
    Float.clamp(4.3, undefined, 4.2) === 4.3;
    Float.clamp(undefined, 4.1, 4.2) === 4.1;
    Float.clamp(4.3, 4.1, 4.2) === 4.3;
  });
});

Mocha.describe("Float.fromInt", () => {
  Mocha.test("Float.fromInt", () => {});
});

Mocha.describe("Float.fromString", () => {
  Mocha.test("Float.fromString", () => {
    Primitive_object.equal(Float.fromString("0"), 0.0);
    Float.fromString("NaN") === undefined;
    Primitive_object.equal(Float.fromString("6"), 6.0);
  });
});

Mocha.describe("Float.isFinite", () => {
  Mocha.test("Float.isFinite", () => {
    isFinite(1.0);
    isFinite(NaN);
    isFinite(Number.POSITIVE_INFINITY);
  });
});

Mocha.describe("Float.isNaN", () => {
  Mocha.test("Float.isNaN", () => {
    isNaN(3.0);
    isNaN(NaN);
  });
});

Mocha.describe("Float.mod", () => {
  Mocha.test("Float.mod", () => {});
});

Mocha.describe("Float.parseFloat", () => {
  Mocha.test("Float.parseFloat", () => {
    parseFloat("1.0");
    parseFloat("  3.14   ");
    parseFloat("3.0");
    parseFloat("3.14some non-digit characters");
    isNaN(parseFloat("error"));
  });
});

Mocha.describe("Float.parseInt", () => {
  Mocha.test("Float.parseInt", () => {
    parseInt("1.0");
    parseInt("  3.14   ");
    parseInt(3);
    parseInt("3.14some non-digit characters");
    isNaN(parseInt("error"));
    parseInt("10.0", 2);
    parseInt("15 * 3", 10);
    parseInt("12", 13);
    isNaN(parseInt("17", 40));
  });
});

Mocha.describe("Float.parseIntWithRadix", () => {
  Mocha.test("Float.parseIntWithRadix", () => {
    parseInt("10.0", 2);
    parseInt("15 * 3", 10);
    parseInt("12", 13);
    isNaN(parseInt("17", 40));
  });
});

Mocha.describe("Float.toExponential", () => {
  Mocha.test("Float.toExponential", () => {
    (1000.0).toExponential();
    (-1000.0).toExponential();
    (77.0).toExponential(2);
    (5678.0).toExponential(2);
  });
});

Mocha.describe("Float.toExponentialWithPrecision", () => {
  Mocha.test("Float.toExponentialWithPrecision", () => {
    (77.0).toExponential(2);
    (5678.0).toExponential(2);
  });
});

Mocha.describe("Float.toFixed", () => {
  Mocha.test("Float.toFixed", () => {
    (123456.0).toFixed();
    (10.0).toFixed();
    (300.0).toFixed(4);
    (300.0).toFixed(1);
  });
});

Mocha.describe("Float.toFixedWithPrecision", () => {
  Mocha.test("Float.toFixedWithPrecision", () => {
    (300.0).toFixed(4);
    (300.0).toFixed(1);
  });
});

Mocha.describe("Float.toInt", () => {
  Mocha.test("Float.toInt", () => {});
});

Mocha.describe("Float.toLocaleString", () => {
  Mocha.test("Float.toLocaleString", () => {
    (1000.0).toLocaleString();
    (1000.0).toLocaleString();
  });
});

Mocha.describe("Float.toPrecision", () => {
  Mocha.test("Float.toPrecision", () => {
    (100.0).toPrecision();
    (1.0).toPrecision();
    (100.0).toPrecision(2);
    (1.0).toPrecision(1);
  });
});

Mocha.describe("Float.toPrecisionWithPrecision", () => {
  Mocha.test("Float.toPrecisionWithPrecision", () => {
    (100.0).toPrecision(2);
    (1.0).toPrecision(1);
  });
});

Mocha.describe("Float.toString", () => {
  Mocha.test("Float.toString", () => {
    (1000.0).toString();
    (-1000.0).toString();
  });
});

Mocha.describe("Float.toStringWithRadix", () => {
  Mocha.test("Float.toStringWithRadix", () => {
    (6.0).toString(2);
    (3735928559.0).toString(16);
    (123456.0).toString(36);
  });
});

Mocha.describe("Int.Bitwise.asr", () => {
  Mocha.test("Int.Bitwise.asr", () => {});
});

Mocha.describe("Int.Bitwise.land", () => {
  Mocha.test("Int.Bitwise.land", () => {});
});

Mocha.describe("Int.Bitwise.lnot", () => {
  Mocha.test("Int.Bitwise.lnot", () => {
    Int.Bitwise.lnot(2) === -3;
  });
});

Mocha.describe("Int.Bitwise.lor", () => {
  Mocha.test("Int.Bitwise.lor", () => {});
});

Mocha.describe("Int.Bitwise.lsl", () => {
  Mocha.test("Int.Bitwise.lsl", () => {});
});

Mocha.describe("Int.Bitwise.lsr", () => {
  Mocha.test("Int.Bitwise.lsr", () => {});
});

Mocha.describe("Int.Bitwise.lxor", () => {
  Mocha.test("Int.Bitwise.lxor", () => {});
});

Mocha.describe("Int.Constants.maxValue", () => {
  Mocha.test("Int.Constants.maxValue", () => {
    console.log(Int.Constants.maxValue);
  });
});

Mocha.describe("Int.Constants.minValue", () => {
  Mocha.test("Int.Constants.minValue", () => {
    console.log(Int.Constants.minValue);
  });
});

Mocha.describe("Int.clamp", () => {
  Mocha.test("Int.clamp", () => {
    Int.clamp(undefined, undefined, 42) === 42;
    Int.clamp(50, undefined, 42) === 50;
    Int.clamp(undefined, 40, 42) === 40;
    Int.clamp(50, 40, 42) === 50;
  });
});

Mocha.describe("Int.fromFloat", () => {
  Mocha.test("Int.fromFloat", () => {});
});

Mocha.describe("Int.fromString", () => {
  Mocha.test("Int.fromString", () => {
    Primitive_object.equal(Int.fromString("0", undefined), 0);
    Int.fromString("NaN", undefined) === undefined;
    Int.fromString("6", 2) === undefined;
  });
});

Mocha.describe("Int.mod", () => {
  Mocha.test("Int.mod", () => {});
});

Mocha.describe("Int.range", () => {
  Mocha.test("Int.range", () => {
    Primitive_object.equal(Int.range(3, 6, undefined), [
      3,
      4,
      5
    ]);
    Primitive_object.equal(Int.range(-3, -1, undefined), [
      -3,
      -2
    ]);
    Primitive_object.equal(Int.range(3, 1, undefined), [
      3,
      2
    ]);
    Primitive_object.equal(Int.range(3, 7, {
      step: 2
    }), [
      3,
      5
    ]);
    Primitive_object.equal(Int.range(3, 7, {
      step: 2,
      inclusive: true
    }), [
      3,
      5,
      7
    ]);
    Int.range(3, 6, {
      step: -2
    });
  });
});

Mocha.describe("Int.rangeWithOptions", () => {
  Mocha.test("Int.rangeWithOptions", () => {
    Primitive_object.equal(Int.rangeWithOptions(3, 7, {
      step: 2
    }), [
      3,
      5
    ]);
    Primitive_object.equal(Int.rangeWithOptions(3, 7, {
      step: 2,
      inclusive: true
    }), [
      3,
      5,
      7
    ]);
    Int.rangeWithOptions(3, 6, {
      step: -2
    });
  });
});

Mocha.describe("Int.toExponential", () => {
  Mocha.test("Int.toExponential", () => {
    (1000).toExponential();
    (-1000).toExponential();
    (77).toExponential(2);
    (5678).toExponential(2);
  });
});

Mocha.describe("Int.toExponentialWithPrecision", () => {
  Mocha.test("Int.toExponentialWithPrecision", () => {
    (77).toExponential(2);
    (5678).toExponential(2);
  });
});

Mocha.describe("Int.toFixed", () => {
  Mocha.test("Int.toFixed", () => {
    (123456).toFixed();
    (10).toFixed();
    (300).toFixed(4);
    (300).toFixed(1);
  });
});

Mocha.describe("Int.toFixedWithPrecision", () => {
  Mocha.test("Int.toFixedWithPrecision", () => {
    (300).toFixed(4);
    (300).toFixed(1);
  });
});

Mocha.describe("Int.toFloat", () => {
  Mocha.test("Int.toFloat", () => {});
});

Mocha.describe("Int.toLocaleString", () => {
  Mocha.test("Int.toLocaleString", () => {
    (1000).toLocaleString();
    (1000).toLocaleString();
  });
});

Mocha.describe("Int.toPrecision", () => {
  Mocha.test("Int.toPrecision", () => {
    (100).toPrecision();
    (1).toPrecision();
    (100).toPrecision(2);
    (1).toPrecision(2);
  });
});

Mocha.describe("Int.toPrecisionWithPrecision", () => {
  Mocha.test("Int.toPrecisionWithPrecision", () => {
    (100).toPrecision(2);
    (1).toPrecision(2);
  });
});

Mocha.describe("Int.toString", () => {
  Mocha.test("Int.toString", () => {
    (1000).toString();
    (-1000).toString();
    (6).toString(2);
    (373592855).toString(16);
    (123456).toString(36);
  });
});

Mocha.describe("Int.toStringWithRadix", () => {
  Mocha.test("Int.toStringWithRadix", () => {
    (6).toString(2);
    (373592855).toString(16);
    (123456).toString(36);
  });
});

Mocha.describe("Iterator.forEach", () => {
  Mocha.test("Iterator.forEach", () => {
    let iterator = ((() => {
    var array1 = ['a', 'b', 'c'];
    var iterator1 = array1[Symbol.iterator]();
    return iterator1
  })());
    $$Iterator.forEach(iterator, v => {
      if (v === undefined) {
        return Pervasives.assertEqual(Option.isNone(v), true);
      }
      switch (v) {
        case "a" :
        case "b" :
        case "c" :
          return;
        default:
          return Pervasives.assertEqual(Option.isNone(v), true);
      }
    });
  });
});

Mocha.describe("Iterator.next", () => {
  Mocha.test("Iterator.next", () => {
    let iterator = ((() => {
    var array1 = ['a'];
    var iterator1 = array1[Symbol.iterator]();
    return iterator1
  })());
    Pervasives.assertEqual(iterator.next().done, false);
    Pervasives.assertEqual(iterator.next().done, true);
  });
});

Mocha.describe("Iterator.toArray", () => {
  Mocha.test("Iterator.toArray", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("someKey2", "someValue2");
    let mapKeysAsArray = Array.from(map.keys());
    console.log(mapKeysAsArray);
  });
});

Mocha.describe("Iterator.toArrayWithMapper", () => {
  Mocha.test("Iterator.toArrayWithMapper", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("someKey2", "someValue2");
    let mapKeysAsArray = Array.from(map.keys(), key => key.length);
    console.log(mapKeysAsArray);
  });
});

Mocha.describe("JSON.Classify.classify", () => {
  Mocha.test("JSON.Classify.classify", () => {
    $$JSON.Classify.classify("hello world");
    $$JSON.Classify.classify(42);
  });
});

Mocha.describe("JSON.Decode.array", () => {
  Mocha.test("JSON.Decode.array", () => {
    $$JSON.Decode.array(JSON.parse("[\"foo\", \"bar\"]"));
    $$JSON.Decode.array(JSON.parse("\"hello world\""));
  });
});

Mocha.describe("JSON.Decode.bool", () => {
  Mocha.test("JSON.Decode.bool", () => {
    $$JSON.Decode.bool(JSON.parse("true"));
    $$JSON.Decode.bool(JSON.parse("\"hello world\""));
  });
});

Mocha.describe("JSON.Decode.float", () => {
  Mocha.test("JSON.Decode.float", () => {
    $$JSON.Decode.float(JSON.parse("42.0"));
    $$JSON.Decode.float(JSON.parse("\"hello world\""));
  });
});

Mocha.describe("JSON.Decode.null", () => {
  Mocha.test("JSON.Decode.null", () => {
    $$JSON.Decode.$$null(JSON.parse("null"));
    $$JSON.Decode.$$null(JSON.parse("\"hello world\""));
  });
});

Mocha.describe("JSON.Decode.object", () => {
  Mocha.test("JSON.Decode.object", () => {
    $$JSON.Decode.object(JSON.parse("{\"foo\":\"bar\"}"));
    $$JSON.Decode.object(JSON.parse("\"hello world\""));
  });
});

Mocha.describe("JSON.Decode.string", () => {
  Mocha.test("JSON.Decode.string", () => {
    $$JSON.Decode.string(JSON.parse("\"hello world\""));
    $$JSON.Decode.string(JSON.parse("42"));
  });
});

Mocha.describe("JSON.Encode.array", () => {
  Mocha.test("JSON.Encode.array", () => {});
});

Mocha.describe("JSON.Encode.bool", () => {
  Mocha.test("JSON.Encode.bool", () => {});
});

Mocha.describe("JSON.Encode.float", () => {
  Mocha.test("JSON.Encode.float", () => {});
});

Mocha.describe("JSON.Encode.int", () => {
  Mocha.test("JSON.Encode.int", () => {});
});

Mocha.describe("JSON.Encode.null", () => {
  Mocha.test("JSON.Encode.null", () => {});
});

Mocha.describe("JSON.Encode.object", () => {
  Mocha.test("JSON.Encode.object", () => {
    Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ]
    ]);
  });
});

Mocha.describe("JSON.Encode.string", () => {
  Mocha.test("JSON.Encode.string", () => {});
});

Mocha.describe("JSON.parseExn", () => {
  Mocha.test("JSON.parseExn", () => {
    try {
      JSON.parse("{\"foo\":\"bar\",\"hello\":\"world\"}");
      JSON.parse("");
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === Exn.$$Error) {
        console.log("error");
      } else {
        throw exn;
      }
    }
    let reviver = (param, value) => {
      switch (typeof value) {
        case "string" :
          return value.toUpperCase();
        case "number" :
          return value * 2.0;
        default:
          return value;
      }
    };
    try {
      console.log(JSON.parse("{\"hello\":\"world\",\"someNumber\":21}", reviver));
      console.log(JSON.parse("", reviver));
    } catch (raw_exn$1) {
      let exn$1 = Primitive_exceptions.internalToException(raw_exn$1);
      if (exn$1.RE_EXN_ID === Exn.$$Error) {
        console.log("error");
      } else {
        throw exn$1;
      }
    }
  });
});

Mocha.describe("JSON.parseExnWithReviver", () => {
  Mocha.test("JSON.parseExnWithReviver", () => {
    let reviver = (param, value) => {
      switch (typeof value) {
        case "string" :
          return value.toUpperCase();
        case "number" :
          return value * 2.0;
        default:
          return value;
      }
    };
    try {
      console.log(JSON.parse("{\"hello\":\"world\",\"someNumber\":21}", reviver));
      console.log(JSON.parse("", reviver));
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === Exn.$$Error) {
        console.log("error");
      } else {
        throw exn;
      }
    }
  });
});

Mocha.describe("JSON.stringify", () => {
  Mocha.test("JSON.stringify", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    JSON.stringify(json);
    JSON.stringify(json, undefined, 2);
    JSON.stringify(json, [
      "foo",
      "someNumber"
    ]);
    let replacer = (param, value) => {
      let decodedValue = $$JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    JSON.stringify(json, replacer);
  });
});

Mocha.describe("JSON.stringifyAny", () => {
  Mocha.test("JSON.stringifyAny", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    Pervasives.assertEqual(JSON.stringify(dict), "{\"foo\":\"bar\",\"hello\":\"world\",\"someNumber\":42}");
    Pervasives.assertEqual(JSON.stringify(dict, undefined, 2), "{\n  \"foo\": \"bar\",\n  \"hello\": \"world\",\n  \"someNumber\": 42\n}");
    Pervasives.assertEqual(JSON.stringify(dict, [
      "foo",
      "someNumber"
    ]), "{\"foo\":\"bar\",\"someNumber\":42}");
    let replacer = (param, value) => {
      let decodedValue = $$JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    Pervasives.assertEqual(JSON.stringify(dict, replacer), "{\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}");
    Pervasives.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          13927,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("JSON.stringifyAnyWithFilter", () => {
  Mocha.test("JSON.stringifyAnyWithFilter", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    Pervasives.assertEqual(JSON.stringify(dict, [
      "foo",
      "someNumber"
    ]), "{\"foo\":\"bar\",\"someNumber\":42}");
    Pervasives.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          13951,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("JSON.stringifyAnyWithFilterAndIndent", () => {
  Mocha.test("JSON.stringifyAnyWithFilterAndIndent", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    Pervasives.assertEqual(JSON.stringify(dict), "{\"foo\":\"bar\",\"hello\":\"world\",\"someNumber\":42}");
    Pervasives.assertEqual(JSON.stringify(dict, undefined, 2), "{\n  \"foo\": \"bar\",\n  \"hello\": \"world\",\n  \"someNumber\": 42\n}");
    Pervasives.assertEqual(JSON.stringify(dict, [
      "foo",
      "someNumber"
    ]), "{\"foo\":\"bar\",\"someNumber\":42}");
    Pervasives.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          13990,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("JSON.stringifyAnyWithIndent", () => {
  Mocha.test("JSON.stringifyAnyWithIndent", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    Pervasives.assertEqual(JSON.stringify(dict, null, 2), "{\n  \"foo\": \"bar\",\n  \"hello\": \"world\",\n  \"someNumber\": 42\n}");
    Pervasives.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          14019,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("JSON.stringifyAnyWithReplacer", () => {
  Mocha.test("JSON.stringifyAnyWithReplacer", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    let replacer = (param, value) => {
      let decodedValue = $$JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    Pervasives.assertEqual(JSON.stringify(dict, replacer), "{\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}");
    Pervasives.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          14053,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("JSON.stringifyAnyWithReplacerAndIndent", () => {
  Mocha.test("JSON.stringifyAnyWithReplacerAndIndent", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    let replacer = (param, value) => {
      let decodedValue = $$JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    Pervasives.assertEqual(JSON.stringify(dict, replacer), "{\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}");
    Pervasives.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          14087,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("JSON.stringifyWithFilter", () => {
  Mocha.test("JSON.stringifyWithFilter", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    JSON.stringify(json, [
      "foo",
      "someNumber"
    ]);
  });
});

Mocha.describe("JSON.stringifyWithFilterAndIndent", () => {
  Mocha.test("JSON.stringifyWithFilterAndIndent", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    JSON.stringify(json, [
      "foo",
      "someNumber"
    ], 2);
  });
});

Mocha.describe("JSON.stringifyWithIndent", () => {
  Mocha.test("JSON.stringifyWithIndent", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    JSON.stringify(json, null, 2);
  });
});

Mocha.describe("JSON.stringifyWithReplacer", () => {
  Mocha.test("JSON.stringifyWithReplacer", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    let replacer = (param, value) => {
      let decodedValue = $$JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    JSON.stringify(json, replacer);
  });
});

Mocha.describe("JSON.stringifyWithReplacerAndIndent", () => {
  Mocha.test("JSON.stringifyWithReplacerAndIndent", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    let replacer = (param, value) => {
      let decodedValue = $$JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    JSON.stringify(json, replacer, 2);
  });
});

Mocha.describe("List.add", () => {
  Mocha.test("List.add", () => {
    List.add({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, 1);
    List.add({
      hd: "World",
      tl: {
        hd: "!",
        tl: /* [] */0
      }
    }, "Hello");
  });
});

Mocha.describe("List.compare", () => {
  Mocha.test("List.compare", () => {
    List.compare({
      hd: 3,
      tl: /* [] */0
    }, {
      hd: 3,
      tl: {
        hd: 7,
        tl: /* [] */0
      }
    }, Primitive_int.compare);
    List.compare({
      hd: 5,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: /* [] */0
    }, Primitive_int.compare);
    List.compare({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    List.compare({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    List.compare({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
  });
});

Mocha.describe("List.compareLength", () => {
  Mocha.test("List.compareLength", () => {
    List.compareLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    });
    List.compareLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    });
    List.compareLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, {
      hd: 5,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    });
  });
});

Mocha.describe("List.concat", () => {
  Mocha.test("List.concat", () => {
    List.concat({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    });
  });
});

Mocha.describe("List.concatMany", () => {
  Mocha.test("List.concatMany", () => {
    List.concatMany([
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      /* [] */0,
      {
        hd: 3,
        tl: /* [] */0
      }
    ]);
  });
});

Mocha.describe("List.drop", () => {
  Mocha.test("List.drop", () => {
    List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 3);
    List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
});

Mocha.describe("List.equal", () => {
  Mocha.test("List.equal", () => {
    List.equal({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    List.equal({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    List.equal({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
});

Mocha.describe("List.every", () => {
  Mocha.test("List.every", () => {
    let isBelow10 = value => value < 10;
    List.every({
      hd: 1,
      tl: {
        hd: 9,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
    List.every({
      hd: 1,
      tl: {
        hd: 99,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
  });
});

Mocha.describe("List.every2", () => {
  Mocha.test("List.every2", () => {
    List.every2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    List.every2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    List.every2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    List.every2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
});

Mocha.describe("List.filter", () => {
  Mocha.test("List.filter", () => {
    let isEven = x => x % 2 === 0;
    List.filter({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    List.filter({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Option.isSome);
  });
});

Mocha.describe("List.filterMap", () => {
  Mocha.test("List.filterMap", () => {
    let isEven = x => x % 2 === 0;
    List.filterMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => {
      if (isEven(x)) {
        return x;
      }
      
    });
    List.filterMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: undefined,
          tl: /* [] */0
        }
      }
    }, x => x);
  });
});

Mocha.describe("List.filterWithIndex", () => {
  Mocha.test("List.filterWithIndex", () => {
    List.filterWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
});

Mocha.describe("List.find", () => {
  Mocha.test("List.find", () => {
    List.find({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 3);
    List.find({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 4);
  });
});

Mocha.describe("List.flat", () => {
  Mocha.test("List.flat", () => {
    List.flat({
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: /* [] */0,
        tl: {
          hd: {
            hd: 3,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("List.forEach", () => {
  Mocha.test("List.forEach", () => {
    List.forEach({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, x => {
      console.log("Item: " + x);
    });
  });
});

Mocha.describe("List.forEach2", () => {
  Mocha.test("List.forEach2", () => {
    List.forEach2({
      hd: "Z",
      tl: {
        hd: "Y",
        tl: /* [] */0
      }
    }, {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    }, (x, y) => {
      console.log(x, y);
    });
  });
});

Mocha.describe("List.forEachWithIndex", () => {
  Mocha.test("List.forEachWithIndex", () => {
    List.forEachWithIndex({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, (x, index) => {
      console.log("Item " + index.toString() + " is " + x);
    });
  });
});

Mocha.describe("List.fromArray", () => {
  Mocha.test("List.fromArray", () => {
    List.fromArray([
      1,
      2,
      3
    ]);
  });
});

Mocha.describe("List.fromInitializer", () => {
  Mocha.test("List.fromInitializer", () => {
    List.fromInitializer(5, i => i);
    List.fromInitializer(5, i => Math.imul(i, i));
  });
});

Mocha.describe("List.get", () => {
  Mocha.test("List.get", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    List.get(abc, 1);
    List.get(abc, 4);
  });
});

Mocha.describe("List.getAssoc", () => {
  Mocha.test("List.getAssoc", () => {
    List.getAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 3, (a, b) => a === b);
    List.getAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, (k, item) => k === item);
  });
});

Mocha.describe("List.getExn", () => {
  Mocha.test("List.getExn", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Pervasives.assertEqual(List.getExn(abc, 1), "B");
    let exit = 0;
    let val;
    try {
      val = List.getExn(abc, 4);
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== "Not_found") {
        throw exn;
      }
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          14485,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("List.has", () => {
  Mocha.test("List.has", () => {
    List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => a === b);
    List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4, (a, b) => a === b);
    List.has({
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
});

Mocha.describe("List.hasAssoc", () => {
  Mocha.test("List.hasAssoc", () => {
    List.hasAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    List.hasAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 25, (k, item) => k === item);
  });
});

Mocha.describe("List.head", () => {
  Mocha.test("List.head", () => {
    List.head(/* [] */0);
    List.head({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("List.headExn", () => {
  Mocha.test("List.headExn", () => {
    Pervasives.assertEqual(List.headExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), 1);
    let exit = 0;
    let val;
    try {
      val = List.headExn(/* [] */0);
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== "Not_found") {
        throw exn;
      }
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          14534,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("List.length", () => {
  Mocha.test("List.length", () => {
    List.length({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("List.make", () => {
  Mocha.test("List.make", () => {
    List.make(3, 1);
  });
});

Mocha.describe("List.map", () => {
  Mocha.test("List.map", () => {
    List.map({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, x => x + 1 | 0);
  });
});

Mocha.describe("List.mapReverse", () => {
  Mocha.test("List.mapReverse", () => {
    let f = x => Math.imul(x, x);
    let l = {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    };
    let withMap = List.reverse(List.map(l, f));
    let withMapReverse = List.mapReverse(l, f);
    console.log(Primitive_object.equal(withMap, withMapReverse));
  });
});

Mocha.describe("List.mapReverse2", () => {
  Mocha.test("List.mapReverse2", () => {
    List.mapReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a + b | 0);
  });
});

Mocha.describe("List.mapWithIndex", () => {
  Mocha.test("List.mapWithIndex", () => {
    List.mapWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, (x, index) => index + x | 0);
  });
});

Mocha.describe("List.partition", () => {
  Mocha.test("List.partition", () => {
    List.partition({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 2);
  });
});

Mocha.describe("List.reduce", () => {
  Mocha.test("List.reduce", () => {
    List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item) => acc + item | 0);
  });
});

Mocha.describe("List.reduce2", () => {
  Mocha.test("List.reduce2", () => {
    List.reduce2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + Math.imul(x, x) | 0) + y | 0);
  });
});

Mocha.describe("List.reduceReverse", () => {
  Mocha.test("List.reduceReverse", () => {
    List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 10, (a, b) => a - b | 0);
    List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, /* [] */0, List.add);
  });
});

Mocha.describe("List.reduceReverse2", () => {
  Mocha.test("List.reduceReverse2", () => {
    List.reduceReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + Math.imul(x, x) | 0) + y | 0);
  });
});

Mocha.describe("List.reduceWithIndex", () => {
  Mocha.test("List.reduceWithIndex", () => {
    List.reduceWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item, index) => (acc + item | 0) + index | 0);
  });
});

Mocha.describe("List.removeAssoc", () => {
  Mocha.test("List.removeAssoc", () => {
    List.removeAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    List.removeAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 9, (k, item) => k === item);
  });
});

Mocha.describe("List.reverse", () => {
  Mocha.test("List.reverse", () => {
    List.reverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("List.reverseConcat", () => {
  Mocha.test("List.reverseConcat", () => {
    List.reverseConcat({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    });
  });
});

Mocha.describe("List.setAssoc", () => {
  Mocha.test("List.setAssoc", () => {
    List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 2, "x", (a, b) => a === b);
    List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          3,
          "c"
        ],
        tl: /* [] */0
      }
    }, 2, "b", (a, b) => a === b);
    List.setAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          3,
          "morning?!"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, "afternoon", (a, b) => a % 12 === b % 12);
  });
});

Mocha.describe("List.size", () => {
  Mocha.test("List.size", () => {
    List.size({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("List.some", () => {
  Mocha.test("List.some", () => {
    let isAbove100 = value => value > 100;
    List.some({
      hd: 101,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
    List.some({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
  });
});

Mocha.describe("List.some2", () => {
  Mocha.test("List.some2", () => {
    List.some2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    List.some2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    List.some2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    List.some2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
});

Mocha.describe("List.sort", () => {
  Mocha.test("List.sort", () => {
    List.sort({
      hd: 5,
      tl: {
        hd: 4,
        tl: {
          hd: 9,
          tl: {
            hd: 3,
            tl: {
              hd: 7,
              tl: /* [] */0
            }
          }
        }
      }
    }, Primitive_int.compare);
  });
});

Mocha.describe("List.splitAt", () => {
  Mocha.test("List.splitAt", () => {
    List.splitAt({
      hd: "Hello",
      tl: {
        hd: "World",
        tl: /* [] */0
      }
    }, 1);
    List.splitAt({
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        }
      }
    }, 2);
  });
});

Mocha.describe("List.tail", () => {
  Mocha.test("List.tail", () => {
    List.tail({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
    List.tail(/* [] */0);
  });
});

Mocha.describe("List.tailExn", () => {
  Mocha.test("List.tailExn", () => {
    Pervasives.assertEqual(List.tailExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    });
    let exit = 0;
    let val;
    try {
      val = List.tailExn(/* [] */0);
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== "Not_found") {
        throw exn;
      }
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          14786,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("List.take", () => {
  Mocha.test("List.take", () => {
    List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 1);
    List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
});

Mocha.describe("List.toArray", () => {
  Mocha.test("List.toArray", () => {
    List.toArray({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("List.toShuffled", () => {
  Mocha.test("List.toShuffled", () => {
    List.toShuffled({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("List.unzip", () => {
  Mocha.test("List.unzip", () => {
    List.unzip({
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          3,
          4
        ],
        tl: /* [] */0
      }
    });
    List.unzip({
      hd: [
        "H",
        "W"
      ],
      tl: {
        hd: [
          "e",
          "o"
        ],
        tl: {
          hd: [
            "l",
            "r"
          ],
          tl: {
            hd: [
              "l",
              "l"
            ],
            tl: {
              hd: [
                "o",
                "d"
              ],
              tl: {
                hd: [
                  " ",
                  "!"
                ],
                tl: /* [] */0
              }
            }
          }
        }
      }
    });
  });
});

Mocha.describe("List.zip", () => {
  Mocha.test("List.zip", () => {
    List.zip({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    });
  });
});

Mocha.describe("List.zipBy", () => {
  Mocha.test("List.zipBy", () => {
    List.zipBy({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, (a, b) => (a << 1) + b | 0);
  });
});

Mocha.describe("Map.clear", () => {
  Mocha.test("Map.clear", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.clear();
  });
});

Mocha.describe("Map.delete", () => {
  Mocha.test("Map.delete", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    let didDeleteKey = map.delete("someKey");
    console.log(didDeleteKey);
    let didDeleteKey$1 = map.delete("someNonExistantKey");
    console.log(didDeleteKey$1);
  });
});

Mocha.describe("Map.entries", () => {
  Mocha.test("Map.entries", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("anotherKey", "anotherValue");
    let entries = map.entries();
    console.log(entries.next().value);
    console.log(Array.from(map.entries()));
  });
});

Mocha.describe("Map.forEach", () => {
  Mocha.test("Map.forEach", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("someKey2", "someValue2");
    map.forEach(value => {
      console.log(value);
    });
  });
});

Mocha.describe("Map.forEachWithKey", () => {
  Mocha.test("Map.forEachWithKey", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("someKey2", "someValue2");
    map.forEach((value, key) => {
      console.log(value, key);
    });
  });
});

Mocha.describe("Map.fromArray", () => {
  Mocha.test("Map.fromArray", () => {
    let languageRank = [
      [
        "ReScript",
        1
      ],
      [
        "JavaScript",
        2
      ],
      [
        "TypeScript",
        3
      ]
    ];
    let map = new Map(languageRank);
    let match = map.get("ReScript");
    if (match === 1) {
      console.log("Yay, ReScript is #1!");
    } else {
      console.log("Uh-oh, something is _terribly_ wrong with this program... abort.");
    }
  });
});

Mocha.describe("Map.fromIterator", () => {
  Mocha.test("Map.fromIterator", () => {
    let iterator = ((() => {
    var map1 = new Map();

    map1.set('first', '1');
    map1.set('second', '2');

    var iterator1 = map1[Symbol.iterator]();
    return iterator1;
  })());
    Pervasives.assertEqual(new Map(iterator).size, 2);
  });
});

Mocha.describe("Map.get", () => {
  Mocha.test("Map.get", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    let value = map.get("someKey");
    if (value !== undefined) {
      console.log("Yay, had the value, and it's:", value);
    } else {
      console.log("Nope, didn't have it.");
    }
  });
});

Mocha.describe("Map.has", () => {
  Mocha.test("Map.has", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    if (map.has("someKey")) {
      console.log("Yay, we have the value!");
    } else {
      console.log("Nope, didn't have it.");
    }
  });
});

Mocha.describe("Map.keys", () => {
  Mocha.test("Map.keys", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("anotherKey", "anotherValue");
    let keys = map.keys();
    console.log(keys.next().value);
    console.log(Array.from(map.keys()));
  });
});

Mocha.describe("Map.make", () => {
  Mocha.test("Map.make", () => {
    new Map();
    let map = new Map();
    map.set("lang", "ReScript");
  });
});

Mocha.describe("Map.set", () => {
  Mocha.test("Map.set", () => {
    let map = new Map();
    map.set("someKey", "someValue");
  });
});

Mocha.describe("Map.size", () => {
  Mocha.test("Map.size", () => {
    let map = new Map();
    map.set("someKey", "someValue");
  });
});

Mocha.describe("Map.values", () => {
  Mocha.test("Map.values", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("anotherKey", "anotherValue");
    let values = map.values();
    console.log(values.next().value);
    console.log(Array.from(map.values()));
  });
});

Mocha.describe("Math.Constants.e", () => {
  Mocha.test("Math.Constants.e", () => {});
});

Mocha.describe("Math.Constants.ln10", () => {
  Mocha.test("Math.Constants.ln10", () => {});
});

Mocha.describe("Math.Constants.ln2", () => {
  Mocha.test("Math.Constants.ln2", () => {});
});

Mocha.describe("Math.Constants.log10e", () => {
  Mocha.test("Math.Constants.log10e", () => {});
});

Mocha.describe("Math.Constants.log2e", () => {
  Mocha.test("Math.Constants.log2e", () => {});
});

Mocha.describe("Math.Constants.pi", () => {
  Mocha.test("Math.Constants.pi", () => {});
});

Mocha.describe("Math.Constants.sqrt1_2", () => {
  Mocha.test("Math.Constants.sqrt1_2", () => {});
});

Mocha.describe("Math.Constants.sqrt2", () => {
  Mocha.test("Math.Constants.sqrt2", () => {});
});

Mocha.describe("Math.Int.abs", () => {
  Mocha.test("Math.Int.abs", () => {
    Math.abs(-2);
    Math.abs(3);
  });
});

Mocha.describe("Math.Int.ceil", () => {
  Mocha.test("Math.Int.ceil", () => {
    $$Math.Int.ceil(3.7) === 4;
    $$Math.Int.ceil(3.0) === 3;
    $$Math.Int.ceil(-3.1) === -3;
  });
});

Mocha.describe("Math.Int.clz32", () => {
  Mocha.test("Math.Int.clz32", () => {
    Math.clz32(1);
    Math.clz32(4);
  });
});

Mocha.describe("Math.Int.floor", () => {
  Mocha.test("Math.Int.floor", () => {
    $$Math.Int.floor(3.7) === 3;
    $$Math.Int.floor(3.0) === 3;
    $$Math.Int.floor(-3.1) === -4;
  });
});

Mocha.describe("Math.Int.imul", () => {
  Mocha.test("Math.Int.imul", () => {
    Math.imul(3, 4);
    Math.imul(-5, 12);
  });
});

Mocha.describe("Math.Int.max", () => {
  Mocha.test("Math.Int.max", () => {
    Math.max(1, 2);
    Math.max(-1, -2);
  });
});

Mocha.describe("Math.Int.maxMany", () => {
  Mocha.test("Math.Int.maxMany", () => {
    Math.max(1, 2);
    Math.max(-1, -2);
    isFinite(Math.max());
  });
});

Mocha.describe("Math.Int.min", () => {
  Mocha.test("Math.Int.min", () => {
    Math.min(1, 2);
    Math.min(-1, -2);
  });
});

Mocha.describe("Math.Int.minMany", () => {
  Mocha.test("Math.Int.minMany", () => {
    Math.min(1, 2);
    Math.min(-1, -2);
    isFinite(Math.min());
  });
});

Mocha.describe("Math.Int.pow", () => {
  Mocha.test("Math.Int.pow", () => {
    Math.pow(2, 4);
    Math.pow(3, 4);
  });
});

Mocha.describe("Math.Int.random", () => {
  Mocha.test("Math.Int.random", () => {
    $$Math.Int.random(2, 5) === 4;
    $$Math.Int.random(505, 2000) === 1276;
    $$Math.Int.random(-7, -2) === -4;
  });
});

Mocha.describe("Math.Int.sign", () => {
  Mocha.test("Math.Int.sign", () => {
    Math.sign(3);
    Math.sign(-3);
    Math.sign(0);
  });
});

Mocha.describe("Math.abs", () => {
  Mocha.test("Math.abs", () => {
    Math.abs(-2.0);
    Math.abs(3.0);
  });
});

Mocha.describe("Math.acos", () => {
  Mocha.test("Math.acos", () => {
    Math.acos(-1.0);
    isNaN(Math.acos(-3.0));
  });
});

Mocha.describe("Math.acosh", () => {
  Mocha.test("Math.acosh", () => {
    Math.acosh(1.0);
    isNaN(Math.acosh(0.5));
  });
});

Mocha.describe("Math.asin", () => {
  Mocha.test("Math.asin", () => {
    Math.asin(-1.0);
    isNaN(Math.asin(-2.0));
  });
});

Mocha.describe("Math.asinh", () => {
  Mocha.test("Math.asinh", () => {
    Math.asinh(-1.0);
    Math.asinh(-0.0);
  });
});

Mocha.describe("Math.atan", () => {
  Mocha.test("Math.atan", () => {
    Math.atan(-0.0);
    Math.atan(0.0);
    Math.atan(1.0);
  });
});

Mocha.describe("Math.atan2", () => {
  Mocha.test("Math.atan2", () => {
    Math.atan2(0.0, 10.0) === 0.0;
    Math.atan2(5.0, 5.0) === Math.PI / 4.0;
    Math.atan2(15.0, 90.0);
    Math.atan2(90.0, 15.0);
  });
});

Mocha.describe("Math.atanh", () => {
  Mocha.test("Math.atanh", () => {
    isNaN(Math.atanh(-2.0));
    isFinite(Math.atanh(-1.0));
    Math.atanh(-0.0);
    Math.atanh(0.0);
    Math.atanh(0.5);
  });
});

Mocha.describe("Math.cbrt", () => {
  Mocha.test("Math.cbrt", () => {
    Math.cbrt(-1.0);
    Math.cbrt(-0.0);
    Math.cbrt(0.0);
  });
});

Mocha.describe("Math.ceil", () => {
  Mocha.test("Math.ceil", () => {
    Math.ceil(3.1) === 4.0;
    Math.ceil(3.0) === 3.0;
    Math.ceil(-3.1) === -3.0;
    Math.ceil(2150000000.3) === 2150000001.0;
  });
});

Mocha.describe("Math.cos", () => {
  Mocha.test("Math.cos", () => {
    Math.cos(-0.0);
    Math.cos(0.0);
    Math.cos(1.0);
  });
});

Mocha.describe("Math.cosh", () => {
  Mocha.test("Math.cosh", () => {
    Math.cosh(-1.0);
    Math.cosh(-0.0);
    Math.cosh(0.0);
  });
});

Mocha.describe("Math.exp", () => {
  Mocha.test("Math.exp", () => {
    Math.exp(-1.0);
    Math.exp(0.0);
  });
});

Mocha.describe("Math.expm1", () => {
  Mocha.test("Math.expm1", () => {
    Math.expm1(-1.0);
    Math.expm1(-0.0);
  });
});

Mocha.describe("Math.floor", () => {
  Mocha.test("Math.floor", () => {
    Math.floor(-45.95);
    Math.floor(-45.05);
    Math.floor(-0.0);
  });
});

Mocha.describe("Math.fround", () => {
  Mocha.test("Math.fround", () => {
    Math.fround(5.5) === 5.5;
    Math.fround(5.05) === 5.050000190734863;
  });
});

Mocha.describe("Math.hypot", () => {
  Mocha.test("Math.hypot", () => {
    Math.hypot(3.0, 4.0);
    Math.hypot(3.0, 5.0);
  });
});

Mocha.describe("Math.hypotMany", () => {
  Mocha.test("Math.hypotMany", () => {
    Math.hypot(3.0, 4.0, 5.0);
    Math.hypot();
  });
});

Mocha.describe("Math.log", () => {
  Mocha.test("Math.log", () => {
    isNaN(Math.log(-1.0));
    isFinite(Math.log(-0.0));
    isFinite(Math.log(0.0));
    Math.log(1.0);
  });
});

Mocha.describe("Math.log10", () => {
  Mocha.test("Math.log10", () => {
    isNaN(Math.log10(-2.0));
    isFinite(Math.log10(-0.0));
    isFinite(Math.log10(0.0));
    Math.log10(1.0);
  });
});

Mocha.describe("Math.log1p", () => {
  Mocha.test("Math.log1p", () => {
    isNaN(Math.log1p(-2.0));
    isFinite(Math.log1p(-1.0));
    Math.log1p(-0.0);
  });
});

Mocha.describe("Math.log2", () => {
  Mocha.test("Math.log2", () => {
    isNaN(Math.log2(-2.0));
    isFinite(Math.log2(-0.0));
    isFinite(Math.log2(0.0));
    Math.log2(1.0);
  });
});

Mocha.describe("Math.max", () => {
  Mocha.test("Math.max", () => {
    Math.max(1.0, 2.0);
    Math.max(-1.0, -2.0);
  });
});

Mocha.describe("Math.maxMany", () => {
  Mocha.test("Math.maxMany", () => {
    Math.max(1.0, 2.0);
    Math.max(-1.0, -2.0);
    isFinite(Math.max());
  });
});

Mocha.describe("Math.min", () => {
  Mocha.test("Math.min", () => {
    Math.min(1.0, 2.0);
    Math.min(-1.0, -2.0);
  });
});

Mocha.describe("Math.minMany", () => {
  Mocha.test("Math.minMany", () => {
    Math.min(1.0, 2.0);
    Math.min(-1.0, -2.0);
    isFinite(Math.min());
  });
});

Mocha.describe("Math.pow", () => {
  Mocha.test("Math.pow", () => {
    Math.pow(2.0, 4.0);
    Math.pow(3.0, 4.0);
  });
});

Mocha.describe("Math.random", () => {
  Mocha.test("Math.random", () => {
    Math.random();
  });
});

Mocha.describe("Math.round", () => {
  Mocha.test("Math.round", () => {
    Math.round(-20.5);
    Math.round(-0.1);
    Math.round(0.0);
    Math.round(-0.0);
  });
});

Mocha.describe("Math.sign", () => {
  Mocha.test("Math.sign", () => {
    Math.sign(3.0);
    Math.sign(-3.0);
    Math.sign(0.0);
  });
});

Mocha.describe("Math.sin", () => {
  Mocha.test("Math.sin", () => {
    Math.sin(-0.0);
    Math.sin(0.0);
    Math.sin(1.0);
  });
});

Mocha.describe("Math.sinh", () => {
  Mocha.test("Math.sinh", () => {
    Math.sinh(-0.0);
    Math.sinh(0.0);
    Math.sinh(1.0);
  });
});

Mocha.describe("Math.sqrt", () => {
  Mocha.test("Math.sqrt", () => {
    isNaN(Math.sqrt(-1.0));
    Math.sqrt(-0.0);
    Math.sqrt(0.0);
    Math.sqrt(1.0);
    Math.sqrt(9.0);
  });
});

Mocha.describe("Math.tan", () => {
  Mocha.test("Math.tan", () => {
    Math.tan(-0.0);
    Math.tan(0.0);
    Math.tan(1.0);
  });
});

Mocha.describe("Math.tanh", () => {
  Mocha.test("Math.tanh", () => {
    Math.tanh(-0.0);
    Math.tanh(0.0);
    Math.tanh(1.0);
  });
});

Mocha.describe("Math.trunc", () => {
  Mocha.test("Math.trunc", () => {
    Math.trunc(0.123);
    Math.trunc(1.999);
    Math.trunc(13.37);
    Math.trunc(42.84);
  });
});

Mocha.describe("Null.asNullable", () => {
  Mocha.test("Null.asNullable", () => {});
});

Mocha.describe("Null.flatMap", () => {
  Mocha.test("Null.flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      } else {
        return null;
      }
    };
    Null.flatMap(2, addIfAboveOne);
    Null.flatMap(-4, addIfAboveOne);
    Null.flatMap(null, addIfAboveOne);
  });
});

Mocha.describe("Null.forEach", () => {
  Mocha.test("Null.forEach", () => {
    Null.forEach("thing", x => {
      console.log(x);
    });
    Null.forEach(null, x => {
      console.log(x);
    });
  });
});

Mocha.describe("Null.fromOption", () => {
  Mocha.test("Null.fromOption", () => {
    let asNull = Null.fromOption(undefined);
    console.log(asNull === null);
  });
});

Mocha.describe("Null.getExn", () => {
  Mocha.test("Null.getExn", () => {
    Pervasives.assertEqual(Null.getExn(3), 3);
    let exit = 0;
    let value;
    try {
      value = Null.getExn('ReScript');
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === "Invalid_argument") {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            15731,
            35
          ],
          Error: new Error()
        };
      }
      throw exn;
    }
    if (exit === 1) {
      Pervasives.assertEqual(value, "ReScript");
    }
    let exit$1 = 0;
    let val;
    try {
      val = Null.getExn(null);
      exit$1 = 1;
    } catch (raw_exn$1) {
      let exn$1 = Primitive_exceptions.internalToException(raw_exn$1);
      if (exn$1.RE_EXN_ID !== "Invalid_argument") {
        throw exn$1;
      }
      
    }
    if (exit$1 === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          15737,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Null.getOr", () => {
  Mocha.test("Null.getOr", () => {
    Null.getOr(null, "Banana");
    Null.getOr("Apple", "Banana");
    let greet = firstName => "Greetings " + Option.getOr(firstName, "Anonymous");
    greet(Primitive_option.fromNull("Jane"));
    greet(undefined);
  });
});

Mocha.describe("Null.getUnsafe", () => {
  Mocha.test("Null.getUnsafe", () => {});
});

Mocha.describe("Null.make", () => {
  Mocha.test("Null.make", () => {});
});

Mocha.describe("Null.map", () => {
  Mocha.test("Null.map", () => {
    Null.map(3, x => Math.imul(x, x));
    Null.map(null, x => Math.imul(x, x));
  });
});

Mocha.describe("Null.mapOr", () => {
  Mocha.test("Null.mapOr", () => {
    Null.mapOr(3, 0, x => x + 5 | 0);
    Null.mapOr(null, 0, x => x + 5 | 0);
  });
});

Mocha.describe("Null.null", () => {
  Mocha.test("Null.null", () => {
    console.log(null);
  });
});

Mocha.describe("Null.toOption", () => {
  Mocha.test("Null.toOption", () => {
    let nullStr = "Hello";
    if (nullStr !== null) {
      console.log("Got string:", nullStr);
    } else {
      console.log("Didn't have a value.");
    }
  });
});

Mocha.describe("Nullable.flatMap", () => {
  Mocha.test("Nullable.flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      } else {
        return null;
      }
    };
    Nullable.flatMap(2, addIfAboveOne);
    Nullable.flatMap(-4, addIfAboveOne);
    Nullable.flatMap(null, addIfAboveOne);
  });
});

Mocha.describe("Nullable.forEach", () => {
  Mocha.test("Nullable.forEach", () => {
    Nullable.forEach("thing", x => {
      console.log(x);
    });
    Nullable.forEach(null, x => {
      console.log(x);
    });
    Nullable.forEach(undefined, x => {
      console.log(x);
    });
  });
});

Mocha.describe("Nullable.fromOption", () => {
  Mocha.test("Nullable.fromOption", () => {
    Nullable.fromOption("Hello");
  });
});

Mocha.describe("Nullable.getExn", () => {
  Mocha.test("Nullable.getExn", () => {
    let exit = 0;
    let value;
    try {
      value = Nullable.getExn('Hello');
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === "Invalid_argument") {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            15869,
            35
          ],
          Error: new Error()
        };
      }
      throw exn;
    }
    if (exit === 1) {
      Pervasives.assertEqual(value, "Hello");
    }
    let exit$1 = 0;
    let val;
    try {
      val = Nullable.getExn(null);
      exit$1 = 1;
    } catch (raw_exn$1) {
      let exn$1 = Primitive_exceptions.internalToException(raw_exn$1);
      if (exn$1.RE_EXN_ID !== "Invalid_argument") {
        throw exn$1;
      }
      
    }
    if (exit$1 === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          15875,
          7
        ],
        Error: new Error()
      };
    }
    let exit$2 = 0;
    let val$1;
    try {
      val$1 = Nullable.getExn(undefined);
      exit$2 = 1;
    } catch (raw_exn$2) {
      let exn$2 = Primitive_exceptions.internalToException(raw_exn$2);
      if (exn$2.RE_EXN_ID !== "Invalid_argument") {
        throw exn$2;
      }
      
    }
    if (exit$2 === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          15880,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Nullable.getOr", () => {
  Mocha.test("Nullable.getOr", () => {
    Nullable.getOr(null, "Banana");
    Nullable.getOr("Apple", "Banana");
    let greet = firstName => "Greetings " + Option.getOr(firstName, "Anonymous");
    greet(Primitive_option.fromNullable("Jane"));
    greet(undefined);
  });
});

Mocha.describe("Nullable.getUnsafe", () => {
  Mocha.test("Nullable.getUnsafe", () => {});
});

Mocha.describe("Nullable.isNullable", () => {
  Mocha.test("Nullable.isNullable", () => {
    if ("Hello" == null) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          15924,
          10
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Nullable.make", () => {
  Mocha.test("Nullable.make", () => {
    let myStr = "Hello";
    if ((myStr == null) || myStr !== myStr) {
      console.log("Values did not match.");
    } else {
      console.log("Yay, values matched!");
    }
  });
});

Mocha.describe("Nullable.map", () => {
  Mocha.test("Nullable.map", () => {
    Nullable.map(3, x => Math.imul(x, x));
    Nullable.map(undefined, x => Math.imul(x, x));
  });
});

Mocha.describe("Nullable.mapOr", () => {
  Mocha.test("Nullable.mapOr", () => {
    Nullable.mapOr(3, 0, x => x + 5 | 0);
    Nullable.mapOr(null, 0, x => x + 5 | 0);
  });
});

Mocha.describe("Nullable.null", () => {
  Mocha.test("Nullable.null", () => {
    console.log(null);
  });
});

Mocha.describe("Nullable.toOption", () => {
  Mocha.test("Nullable.toOption", () => {
    let nullableString = "Hello";
    if (nullableString == null) {
      console.log("Didn't have a value.");
    } else {
      console.log("Got string:", nullableString);
    }
  });
});

Mocha.describe("Nullable.undefined", () => {
  Mocha.test("Nullable.undefined", () => {
    console.log(undefined);
  });
});

Mocha.describe("Object.assign", () => {
  Mocha.test("Object.assign", () => {
    Object.assign({
      a: 1
    }, {
      a: 2
    });
    Object.assign({
      a: 1,
      b: 2
    }, {
      a: 0
    });
    Object.assign({
      a: 1
    }, {
      a: null
    });
  });
});

Mocha.describe("Object.create", () => {
  Mocha.test("Object.create", () => {
    let x = {
      fruit: "banana"
    };
    Object.create(x);
  });
});

Mocha.describe("Object.freeze", () => {
  Mocha.test("Object.freeze", () => {
    let obj = {
      a: 1
    };
    obj["a"] = 2;
    Object.freeze(obj);
    try {
      obj["a"] = 3;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== Exn.$$Error) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            16039,
            7
          ],
          Error: new Error()
        };
      }
      
    }
  });
});

Mocha.describe("Object.get", () => {
  Mocha.test("Object.get", () => {
    Option.isSome(({
        a: 1
      })["toString"]);
  });
});

Mocha.describe("Object.getSymbol", () => {
  Mocha.test("Object.getSymbol", () => {
    let fruit = Symbol("fruit");
    let x = {};
    x[fruit] = "banana";
  });
});

Mocha.describe("Object.hasOwnProperty", () => {
  Mocha.test("Object.hasOwnProperty", () => {
    Object.prototype.hasOwnProperty.call({
      a: 1
    }, "a");
    Object.prototype.hasOwnProperty.call({
      a: 1
    }, "b");
    Object.prototype.hasOwnProperty.call({
      a: 1
    }, "toString");
  });
});

Mocha.describe("Object.is", () => {
  Mocha.test("Object.is", () => {
    Object.is(25, 13);
    Object.is("abc", "abc");
    Object.is(undefined, undefined);
    Object.is(undefined, null);
    Object.is(-0.0, 0.0);
    Object.is({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    });
    Object.is([
      1,
      2,
      3
    ], [
      1,
      2,
      3
    ]);
    Primitive_object.equal([
      1,
      2,
      3
    ], [
      1,
      2,
      3
    ]);
    let fruit = {
      name: "Apple"
    };
    Object.is(fruit, fruit);
    Object.is(fruit, {
      name: "Apple"
    });
    Primitive_object.equal(fruit, {
      name: "Apple"
    });
  });
});

Mocha.describe("Object.isExtensible", () => {
  Mocha.test("Object.isExtensible", () => {
    let obj = {
      a: 1
    };
    Object.isExtensible(obj);
    Object.preventExtensions(obj);
    Object.isExtensible(obj);
  });
});

Mocha.describe("Object.isFrozen", () => {
  Mocha.test("Object.isFrozen", () => {
    let point = Object.freeze({
      x: 1,
      y: 3
    });
    Object.isFrozen(point);
    let fruit = {
      name: "Apple"
    };
    Object.isFrozen(fruit);
  });
});

Mocha.describe("Object.isSealed", () => {
  Mocha.test("Object.isSealed", () => {
    let point = Object.seal({
      x: 1,
      y: 3
    });
    Object.isSealed(point);
    let fruit = {
      name: "Apple"
    };
    Object.isSealed(fruit);
  });
});

Mocha.describe("Object.keysToArray", () => {
  Mocha.test("Object.keysToArray", () => {
    Object.keys({
      a: 1,
      b: 2
    });
    Object.keys({
      a: undefined
    });
    Object.keys({});
  });
});

Mocha.describe("Object.make", () => {
  Mocha.test("Object.make", () => {
    let x = {};
    Object.keys(x).length;
    Option.isSome(x["toString"]);
  });
});

Mocha.describe("Object.preventExtensions", () => {
  Mocha.test("Object.preventExtensions", () => {
    let obj = {
      a: 1
    };
    obj["b"] = 2;
    Object.preventExtensions(obj);
    try {
      obj["c"] = 3;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== Exn.$$Error) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            16175,
            7
          ],
          Error: new Error()
        };
      }
      
    }
  });
});

Mocha.describe("Object.seal", () => {
  Mocha.test("Object.seal", () => {
    let point = {
      x: 1,
      y: 2
    };
    point["x"] = -7;
    Object.seal(point);
    try {
      point["z"] = 9;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== Exn.$$Error) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            16193,
            7
          ],
          Error: new Error()
        };
      }
      
    }
    point["x"] = 13;
  });
});

Mocha.describe("Object.set", () => {
  Mocha.test("Object.set", () => {
    ({
        a: 1
      })["a"] = 2;
    ({
        a: 1
      })["a"] = undefined;
    ({
        a: 1
      })["b"] = 2;
  });
});

Mocha.describe("Option.all", () => {
  Mocha.test("Option.all", () => {
    Option.all([
      1,
      2,
      3
    ]);
    Option.all([
      1,
      undefined
    ]);
  });
});

Mocha.describe("Option.compare", () => {
  Mocha.test("Option.compare", () => {
    let clockCompare = (a, b) => Primitive_int.compare(a % 12, b % 12);
    Option.compare(3, 15, clockCompare);
    Option.compare(3, 14, clockCompare);
    Option.compare(2, 15, clockCompare);
    Option.compare(undefined, 15, clockCompare);
    Option.compare(14, undefined, clockCompare);
    Option.compare(undefined, undefined, clockCompare);
  });
});

Mocha.describe("Option.equal", () => {
  Mocha.test("Option.equal", () => {
    let clockEqual = (a, b) => a % 12 === b % 12;
    Option.equal(3, 15, clockEqual);
    Option.equal(3, undefined, clockEqual);
    Option.equal(undefined, 3, clockEqual);
    Option.equal(undefined, undefined, clockEqual);
  });
});

Mocha.describe("Option.filter", () => {
  Mocha.test("Option.filter", () => {
    Option.filter(10, x => x > 5);
    Option.filter(4, x => x > 5);
    Option.filter(undefined, x => x > 5);
  });
});

Mocha.describe("Option.flatMap", () => {
  Mocha.test("Option.flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      }
      
    };
    Option.flatMap(2, addIfAboveOne);
    Option.flatMap(-4, addIfAboveOne);
    Option.flatMap(undefined, addIfAboveOne);
  });
});

Mocha.describe("Option.forEach", () => {
  Mocha.test("Option.forEach", () => {
    Option.forEach("thing", x => {
      console.log(x);
    });
    Option.forEach(undefined, x => {
      console.log(x);
    });
  });
});

Mocha.describe("Option.getExn", () => {
  Mocha.test("Option.getExn", () => {
    Pervasives.assertEqual(Option.getExn(3, undefined), 3);
    let exit = 0;
    let val;
    try {
      val = Option.getExn(undefined, undefined);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          16301,
          7
        ],
        Error: new Error()
      };
    }
    let exit$1 = 0;
    let val$1;
    try {
      val$1 = Option.getExn(undefined, "was None!");
      exit$1 = 1;
    } catch (exn$1) {
      
    }
    if (exit$1 === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          16306,
          7
        ],
        Error: new Error()
      };
    }
    
  });
});

Mocha.describe("Option.getOr", () => {
  Mocha.test("Option.getOr", () => {
    Option.getOr(undefined, "Banana");
    Option.getOr("Apple", "Banana");
    let greet = firstName => "Greetings " + Option.getOr(firstName, "Anonymous");
    greet("Jane");
    greet(undefined);
  });
});

Mocha.describe("Option.getUnsafe", () => {
  Mocha.test("Option.getUnsafe", () => {});
});

Mocha.describe("Option.isNone", () => {
  Mocha.test("Option.isNone", () => {
    Option.isNone(undefined);
    Option.isNone(1);
  });
});

Mocha.describe("Option.isSome", () => {
  Mocha.test("Option.isSome", () => {
    Option.isSome(undefined);
    Option.isSome(1);
  });
});

Mocha.describe("Option.map", () => {
  Mocha.test("Option.map", () => {
    Option.map(3, x => Math.imul(x, x));
    Option.map(undefined, x => Math.imul(x, x));
  });
});

Mocha.describe("Option.mapOr", () => {
  Mocha.test("Option.mapOr", () => {
    Option.mapOr(3, 0, x => x + 5 | 0);
    Option.mapOr(undefined, 0, x => x + 5 | 0);
  });
});

Mocha.describe("Option.orElse", () => {
  Mocha.test("Option.orElse", () => {
    Primitive_object.equal(Option.orElse(1812, 1066), 1812);
    Primitive_object.equal(Option.orElse(undefined, 1066), 1066);
    Option.orElse(undefined, undefined) === undefined;
  });
});

Mocha.describe("Pervasives.assertEqual", () => {
  Mocha.test("Pervasives.assertEqual", () => {
    Pervasives.assertEqual(List.tailExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }), {
      hd: 2,
      tl: /* [] */0
    });
  });
});

Mocha.describe("Pervasives.clearInterval", () => {
  Mocha.test("Pervasives.clearInterval", () => {
    let intervalId = setInterval(() => {
      console.log("This prints in 100 ms");
    }, 100);
    setTimeout(() => {
      clearInterval(intervalId);
    }, 500);
  });
});

Mocha.describe("Pervasives.clearTimeout", () => {
  Mocha.test("Pervasives.clearTimeout", () => {
    let timeoutId = setTimeout(() => {
      console.log("This prints in 2 seconds.");
    }, 2000);
    clearTimeout(timeoutId);
  });
});

Mocha.describe("Pervasives.decodeURI", () => {
  Mocha.test("Pervasives.decodeURI", () => {
    console.log(decodeURI("https://rescript-lang.org?array=%5BsomeValue%5D"));
  });
});

Mocha.describe("Pervasives.decodeURIComponent", () => {
  Mocha.test("Pervasives.decodeURIComponent", () => {
    console.log(decodeURIComponent("array%3D%5BsomeValue%5D"));
  });
});

Mocha.describe("Pervasives.encodeURI", () => {
  Mocha.test("Pervasives.encodeURI", () => {
    console.log(encodeURI("https://rescript-lang.org?array=[someValue]"));
  });
});

Mocha.describe("Pervasives.encodeURIComponent", () => {
  Mocha.test("Pervasives.encodeURIComponent", () => {
    console.log(encodeURIComponent("array=[someValue]"));
  });
});

Mocha.describe("Pervasives.import", () => {
  Mocha.test("Pervasives.import", () => {});
});

Mocha.describe("Pervasives.setInterval", () => {
  Mocha.test("Pervasives.setInterval", () => {
    let intervalId = setInterval(() => {
      console.log("This prints every 200 ms.");
    }, 200);
    setTimeout(() => {
      clearInterval(intervalId);
    }, 500);
  });
});

Mocha.describe("Pervasives.setIntervalFloat", () => {
  Mocha.test("Pervasives.setIntervalFloat", () => {
    let intervalId = setInterval(() => {
      console.log("This prints every 200 ms");
    }, 200);
    setTimeout(() => {
      clearInterval(intervalId);
    }, 500.0);
  });
});

Mocha.describe("Pervasives.setTimeout", () => {
  Mocha.test("Pervasives.setTimeout", () => {
    setTimeout(() => {
      console.log("This prints in 200 ms.");
    }, 200);
  });
});

Mocha.describe("Pervasives.setTimeoutFloat", () => {
  Mocha.test("Pervasives.setTimeoutFloat", () => {
    setTimeout(() => {
      console.log("This prints in 200 ms.");
    }, 200);
  });
});

Mocha.describe("Promise.all", () => {
  Mocha.test("Promise.all", () => {
    let promises = [
      Promise.resolve(1),
      Promise.resolve(2),
      Promise.resolve(3)
    ];
    Promise.all(promises).then(results => {
      results.forEach(num => {
        console.log("Number: ", num);
      });
      return Promise.resolve();
    });
  });
});

Mocha.describe("Promise.allSettled", () => {
  Mocha.test("Promise.allSettled", () => {
    let TestError = /* @__PURE__ */Primitive_exceptions.create("TestError");
    let promises = [
      Promise.resolve(1),
      Promise.resolve(2),
      Promise.reject({
        RE_EXN_ID: TestError,
        _1: "some rejected promise"
      })
    ];
    Promise.allSettled(promises).then(results => {
      results.forEach(result => {
        if (result.status === "fulfilled") {
          console.log("Number: ", result.value);
          return;
        }
        console.log(result.reason);
      });
      return Promise.resolve();
    });
  });
});

Mocha.describe("Promise.any", () => {
  Mocha.test("Promise.any", () => {
    let racer = (ms, name) => new Promise((resolve, param) => {
      setTimeout(() => resolve(name), ms);
    });
    let promises = [
      racer(1000, "Turtle"),
      racer(500, "Hare"),
      racer(100, "Eagle")
    ];
    Promise.any(promises).then(winner => {
      console.log("The winner is " + winner);
      return Promise.resolve();
    });
  });
});

Mocha.describe("Promise.catch", () => {
  Mocha.test("Promise.catch", () => {
    let SomeError = /* @__PURE__ */Primitive_exceptions.create("SomeError");
    $$Promise.$$catch(Promise.reject({
      RE_EXN_ID: SomeError,
      _1: "this is an error"
    }).then(param => Promise.resolve({
      TAG: "Ok",
      _0: "This result will never be returned"
    })), e => {
      let msg;
      if (e.RE_EXN_ID === SomeError) {
        msg = "ReScript error occurred: " + e._1;
      } else if (e.RE_EXN_ID === Exn.$$Error) {
        let msg$1 = e._1.message;
        msg = msg$1 !== undefined ? "JS exception occurred: " + msg$1 : "Some other JS value has been thrown";
      } else {
        msg = "Unexpected error occurred";
      }
      return Promise.resolve({
        TAG: "Error",
        _0: msg
      });
    }).then(result => {
      let tmp;
      if (result.TAG === "Ok") {
        console.log("Operation successful: ", result._0);
        tmp = undefined;
      } else {
        console.log("Operation failed: ", result._0);
        tmp = undefined;
      }
      return Promise.resolve(tmp);
    });
  });
});

Mocha.describe("Promise.finally", () => {
  Mocha.test("Promise.finally", () => {
    let SomeError = /* @__PURE__ */Primitive_exceptions.create("SomeError");
    let isDone = {
      contents: false
    };
    $$Promise.$$catch(Promise.resolve(5).then(param => Promise.reject({
      RE_EXN_ID: SomeError,
      _1: "test"
    })).then(v => {
      console.log("final result", v);
      return Promise.resolve();
    }), param => {
      console.log("Error handled");
      return Promise.resolve();
    }).finally(() => {
      console.log("finally");
      isDone.contents = true;
    }).then(() => {
      console.log("isDone:", isDone.contents);
      return Promise.resolve();
    });
  });
});

Mocha.describe("Promise.make", () => {
  Mocha.test("Promise.make", () => {
    $$Promise.$$catch(new Promise((resolve, reject) => resolve("success")).then(str => Promise.resolve((console.log(str), undefined))), param => {
      console.log("Error occurred");
      return Promise.resolve();
    });
  });
});

Mocha.describe("Promise.race", () => {
  Mocha.test("Promise.race", () => {
    let racer = (ms, name) => new Promise((resolve, param) => {
      setTimeout(() => resolve(name), ms);
    });
    let promises = [
      racer(1000, "Turtle"),
      racer(500, "Hare"),
      racer(100, "Eagle")
    ];
    Promise.race(promises).then(winner => {
      console.log("The winner is " + winner);
      return Promise.resolve();
    });
  });
});

Mocha.describe("Promise.reject", () => {
  Mocha.test("Promise.reject", () => {
    let TestError = /* @__PURE__ */Primitive_exceptions.create("TestError");
    $$Promise.$$catch(Promise.reject({
      RE_EXN_ID: TestError,
      _1: "some rejected value"
    }), v => {
      if (v.RE_EXN_ID === TestError) {
        Pervasives.assertEqual(v._1, "some rejected value");
      } else {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            16752,
            9
          ],
          Error: new Error()
        };
      }
      return Promise.resolve();
    });
  });
});

Mocha.describe("Promise.resolve", () => {
  Mocha.test("Promise.resolve", () => {
    Promise.resolve(5);
  });
});

Mocha.describe("Promise.then", () => {
  Mocha.test("Promise.then", () => {
    Promise.resolve(5).then(num => Promise.resolve(num + 5 | 0)).then(num => {
      console.log("Your lucky number is: ", num);
      return Promise.resolve();
    });
  });
});

Mocha.describe("Promise.thenResolve", () => {
  Mocha.test("Promise.thenResolve", () => {
    Promise.resolve("Anna").then(str => "Hello " + str).then(str => {
      console.log(str);
    });
  });
});

Mocha.describe("RegExp.Result.fullMatch", () => {
  Mocha.test("RegExp.Result.fullMatch", () => {
    let regexp = new RegExp("(\\w+) (\\w+)");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result[0]);
    }
  });
});

Mocha.describe("RegExp.Result.input", () => {
  Mocha.test("RegExp.Result.input", () => {
    let regexp = new RegExp("(\\w+) (\\w+)");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result.input);
    }
  });
});

Mocha.describe("RegExp.Result.matches", () => {
  Mocha.test("RegExp.Result.matches", () => {
    let regexp = new RegExp("(\\w+) (\\w+)");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      let match = result.slice(1);
      if (match.length !== 2) {
        console.log("Didn't find exactly two words...");
      } else {
        let firstWord = match[0];
        let secondWord = match[1];
        console.log(firstWord, secondWord);
      }
    }
  });
});

Mocha.describe("RegExp.exec", () => {
  Mocha.test("RegExp.exec", () => {
    let regexp = new RegExp("\\w+");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result[0]);
    }
  });
});

Mocha.describe("RegExp.fromString", () => {
  Mocha.test("RegExp.fromString", () => {
    let regexp = new RegExp("\\w+");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result[0]);
    }
  });
});

Mocha.describe("RegExp.fromStringWithFlags", () => {
  Mocha.test("RegExp.fromStringWithFlags", () => {
    let regexp = new RegExp("\\w+", "g");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result[0]);
    }
  });
});

Mocha.describe("RegExp.global", () => {
  Mocha.test("RegExp.global", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.global);
    let regexp2 = new RegExp("\\w+", "i");
    console.log(regexp2.global);
  });
});

Mocha.describe("RegExp.ignoreCase", () => {
  Mocha.test("RegExp.ignoreCase", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.ignoreCase);
    let regexp2 = new RegExp("\\w+", "i");
    console.log(regexp2.ignoreCase);
  });
});

Mocha.describe("RegExp.lastIndex", () => {
  Mocha.test("RegExp.lastIndex", () => {
    let regexp = new RegExp("\\w+");
    console.log(regexp.lastIndex);
    regexp.exec("Many words here.");
    console.log(regexp.lastIndex);
  });
});

Mocha.describe("RegExp.multiline", () => {
  Mocha.test("RegExp.multiline", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.multiline);
    let regexp2 = new RegExp("\\w+", "mi");
    console.log(regexp2.multiline);
  });
});

Mocha.describe("RegExp.setLastIndex", () => {
  Mocha.test("RegExp.setLastIndex", () => {
    let regexp = new RegExp("\\w+");
    regexp.lastIndex = 4;
    regexp.exec("Many words here.");
    console.log(regexp.lastIndex);
  });
});

Mocha.describe("RegExp.source", () => {
  Mocha.test("RegExp.source", () => {
    let regexp = new RegExp("\\w+", "g");
    console.log(regexp.source);
  });
});

Mocha.describe("RegExp.sticky", () => {
  Mocha.test("RegExp.sticky", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.unicode);
    let regexp2 = new RegExp("\\w+", "my");
    console.log(regexp2.unicode);
  });
});

Mocha.describe("RegExp.test", () => {
  Mocha.test("RegExp.test", () => {
    let regexp = new RegExp("\\w+");
    if (regexp.test("ReScript is cool!")) {
      console.log("Yay, there's a word in there.");
    }
    
  });
});

Mocha.describe("RegExp.unicode", () => {
  Mocha.test("RegExp.unicode", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.unicode);
    let regexp2 = new RegExp("\\w+", "mu");
    console.log(regexp2.unicode);
  });
});

Mocha.describe("Result.all", () => {
  Mocha.test("Result.all", () => {
    Result.all([
      {
        TAG: "Ok",
        _0: 1
      },
      {
        TAG: "Ok",
        _0: 2
      },
      {
        TAG: "Ok",
        _0: 3
      }
    ]);
    Result.all([
      {
        TAG: "Ok",
        _0: 1
      },
      {
        TAG: "Error",
        _0: 1
      }
    ]);
  });
});

Mocha.describe("Result.compare", () => {
  Mocha.test("Result.compare", () => {
    let mod10cmp = (a, b) => Primitive_int.compare(a % 10, b % 10);
    Result.compare({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === 1;
    Result.compare({
      TAG: "Ok",
      _0: 57
    }, {
      TAG: "Ok",
      _0: 39
    }, mod10cmp) === -1;
    Result.compare({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 1;
    Result.compare({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === -1;
    Result.compare({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 0;
  });
});

Mocha.describe("Result.equal", () => {
  Mocha.test("Result.equal", () => {
    let good1 = {
      TAG: "Ok",
      _0: 42
    };
    let good2 = {
      TAG: "Ok",
      _0: 32
    };
    let bad1 = {
      TAG: "Error",
      _0: "invalid"
    };
    let bad2 = {
      TAG: "Error",
      _0: "really invalid"
    };
    let mod10equal = (a, b) => a % 10 === b % 10;
    Result.equal(good1, good2, mod10equal) === true;
    Result.equal(good1, bad1, mod10equal) === false;
    Result.equal(bad2, good2, mod10equal) === false;
    Result.equal(bad1, bad2, mod10equal) === true;
  });
});

Mocha.describe("Result.flatMap", () => {
  Mocha.test("Result.flatMap", () => {
    let recip = x => {
      if (x !== 0.0) {
        return {
          TAG: "Ok",
          _0: 1.0 / x
        };
      } else {
        return {
          TAG: "Error",
          _0: "Divide by zero"
        };
      }
    };
    Primitive_object.equal(Result.flatMap({
      TAG: "Ok",
      _0: 2.0
    }, recip), {
      TAG: "Ok",
      _0: 0.5
    });
    Primitive_object.equal(Result.flatMap({
      TAG: "Ok",
      _0: 0.0
    }, recip), {
      TAG: "Error",
      _0: "Divide by zero"
    });
    Primitive_object.equal(Result.flatMap({
      TAG: "Error",
      _0: "Already bad"
    }, recip), {
      TAG: "Error",
      _0: "Already bad"
    });
  });
});

Mocha.describe("Result.forEach", () => {
  Mocha.test("Result.forEach", () => {
    Result.forEach({
      TAG: "Ok",
      _0: 3
    }, prim => {
      console.log(prim);
    });
    Result.forEach({
      TAG: "Error",
      _0: "x"
    }, prim => {
      console.log(prim);
    });
  });
});

Mocha.describe("Result.getOr", () => {
  Mocha.test("Result.getOr", () => {
    Result.getOr({
      TAG: "Ok",
      _0: 42
    }, 0) === 42;
    Result.getOr({
      TAG: "Error",
      _0: "Invalid Data"
    }, 0) === 0;
  });
});

Mocha.describe("Result.map", () => {
  Mocha.test("Result.map", () => {
    let f = x => Math.sqrt(x);
    Primitive_object.equal(Result.map({
      TAG: "Ok",
      _0: 64
    }, f), {
      TAG: "Ok",
      _0: 8.0
    });
    Primitive_object.equal(Result.map({
      TAG: "Error",
      _0: "Invalid data"
    }, f), {
      TAG: "Error",
      _0: "Invalid data"
    });
  });
});

Mocha.describe("Result.mapError", () => {
  Mocha.test("Result.mapError", () => {
    let format = n => "Error code: " + n.toString();
    Result.mapError({
      TAG: "Error",
      _0: 14
    }, format);
    Result.mapError({
      TAG: "Ok",
      _0: "abc"
    }, format);
  });
});

Mocha.describe("Result.mapOr", () => {
  Mocha.test("Result.mapOr", () => {
    Result.mapOr({
      TAG: "Ok",
      _0: 42
    }, 0, x => x / 2 | 0) === 21;
    Result.mapOr({
      TAG: "Error",
      _0: "Invalid data"
    }, 0, x => x / 2 | 0) === 0;
  });
});

Mocha.describe("Set.add", () => {
  Mocha.test("Set.add", () => {
    let set = new Set();
    set.add("someValue");
  });
});

Mocha.describe("Set.clear", () => {
  Mocha.test("Set.clear", () => {
    let set = new Set();
    set.add("someKey");
    set.clear();
  });
});

Mocha.describe("Set.delete", () => {
  Mocha.test("Set.delete", () => {
    let set = new Set();
    set.add("someValue");
    let didDeleteValue = set.delete("someValue");
    console.log(didDeleteValue);
    let didDeleteValue$1 = set.delete("someNonExistantKey");
    console.log(didDeleteValue$1);
  });
});

Mocha.describe("Set.forEach", () => {
  Mocha.test("Set.forEach", () => {
    let set = new Set();
    set.add("someValue");
    set.add("someValue2");
    set.forEach(value => {
      console.log(value);
    });
  });
});

Mocha.describe("Set.fromArray", () => {
  Mocha.test("Set.fromArray", () => {
    let languageRank = [
      "ReScript",
      "JavaScript",
      "TypeScript"
    ];
    let set = new Set(languageRank);
    if (set.has("ReScript")) {
      console.log("Yay, ReScript is in there!");
    } else {
      console.log("Uh-oh, something is _terribly_ wrong with this program... abort.");
    }
  });
});

Mocha.describe("Set.fromIterator", () => {
  Mocha.test("Set.fromIterator", () => {
    let iterator = ((() => {
    var array1 = ['a', 'b', 'c'];
    var iterator1 = array1[Symbol.iterator]();
    return iterator1
  })());
    Pervasives.assertEqual(new Set(iterator).size, 3);
  });
});

Mocha.describe("Set.has", () => {
  Mocha.test("Set.has", () => {
    let set = new Set();
    set.add("someValue");
    if (set.has("someValue")) {
      console.log("Yay, we have the value!");
    } else {
      console.log("Nope, didn't have it.");
    }
  });
});

Mocha.describe("Set.make", () => {
  Mocha.test("Set.make", () => {
    new Set();
    let set = new Set();
    set.add("Fine name");
  });
});

Mocha.describe("Set.size", () => {
  Mocha.test("Set.size", () => {
    let set = new Set();
    set.add("someValue");
    set.add("someValue");
    set.add("someValue2");
  });
});

Mocha.describe("Set.toArray", () => {
  Mocha.test("Set.toArray", () => {
    let set = new Set([
      "apple",
      "orange",
      "apple",
      "banana"
    ]);
    Array.from(set);
  });
});

Mocha.describe("Set.values", () => {
  Mocha.test("Set.values", () => {
    let set = new Set();
    set.add("someValue");
    set.add("anotherValue");
    let values = set.values();
    console.log(values.next().value);
    console.log(Array.from(set.values()));
  });
});

Mocha.describe("String.charAt", () => {
  Mocha.test("String.charAt", () => {
    "ReScript".charAt(0) === "R";
    "Hello".charAt(12) === "";
    "JS".charAt(5) === "";
  });
});

Mocha.describe("String.charCodeAt", () => {
  Mocha.test("String.charCodeAt", () => {
    "😺".charCodeAt(0) === 55357;
    Primitive_object.equal("😺".codePointAt(0), 128570);
  });
});

Mocha.describe("String.codePointAt", () => {
  Mocha.test("String.codePointAt", () => {
    Primitive_object.equal("¿😺?".codePointAt(1), 128570);
    "abc".codePointAt(5) === undefined;
  });
});

Mocha.describe("String.concat", () => {
  Mocha.test("String.concat", () => {
    "cow".concat("bell") === "cowbell";
    "Re".concat("Script") === "ReScript";
  });
});

Mocha.describe("String.concatMany", () => {
  Mocha.test("String.concatMany", () => {
    "1st".concat("2nd", "3rd", "4th") === "1st2nd3rd4th";
  });
});

Mocha.describe("String.endsWith", () => {
  Mocha.test("String.endsWith", () => {
    "BuckleScript".endsWith("Script") === true;
    "BuckleShoes".endsWith("Script") === false;
  });
});

Mocha.describe("String.endsWithFrom", () => {
  Mocha.test("String.endsWithFrom", () => {
    "abcd".endsWith("cd", 4) === true;
    "abcde".endsWith("cd", 3) === false;
    "abcde".endsWith("cde", 99) === true;
    "example.dat".endsWith("ple", 7) === true;
  });
});

Mocha.describe("String.fromCharCode", () => {
  Mocha.test("String.fromCharCode", () => {
    String.fromCharCode(65) === "A";
    String.fromCharCode(968) === "ψ";
    String.fromCharCode(54620) === "한";
    String.fromCharCode(-64568) === "ψ";
  });
});

Mocha.describe("String.fromCharCodeMany", () => {
  Mocha.test("String.fromCharCodeMany", () => {
    String.fromCharCode(189, 43, 190, 61) === "½+¾=";
    String.fromCharCode(65, 66, 67) === "ABC";
  });
});

Mocha.describe("String.fromCodePoint", () => {
  Mocha.test("String.fromCodePoint", () => {
    String.fromCodePoint(65) === "A";
    String.fromCodePoint(968) === "ψ";
    String.fromCodePoint(54620) === "한";
    String.fromCodePoint(128570) === "😺";
  });
});

Mocha.describe("String.fromCodePointMany", () => {
  Mocha.test("String.fromCodePointMany", () => {
    String.fromCodePoint(54620, 44544, 128570) === "한글😺";
  });
});

Mocha.describe("String.get", () => {
  Mocha.test("String.get", () => {
    Primitive_object.equal("ReScript"[0], "R");
    Primitive_object.equal("Hello"[4], "o");
  });
});

Mocha.describe("String.getUnsafe", () => {
  Mocha.test("String.getUnsafe", () => {});
});

Mocha.describe("String.includes", () => {
  Mocha.test("String.includes", () => {
    "programmer".includes("gram") === true;
    "programmer".includes("er") === true;
    "programmer".includes("pro") === true;
    "programmer.dat".includes("xyz") === false;
  });
});

Mocha.describe("String.includesFrom", () => {
  Mocha.test("String.includesFrom", () => {
    "programmer".includes("gram", 1) === true;
    "programmer".includes("gram", 4) === false;
    "대한민국".includes("한", 1) === true;
  });
});

Mocha.describe("String.indexOf", () => {
  Mocha.test("String.indexOf", () => {
    "bookseller".indexOf("ok") === 2;
    "bookseller".indexOf("sell") === 4;
    "beekeeper".indexOf("ee") === 1;
    "bookseller".indexOf("xyz") === -1;
  });
});

Mocha.describe("String.indexOfFrom", () => {
  Mocha.test("String.indexOfFrom", () => {
    "bookseller".indexOf("ok", 1) === 2;
    "bookseller".indexOf("sell", 2) === 4;
    "bookseller".indexOf("sell", 5) === -1;
  });
});

Mocha.describe("String.indexOfOpt", () => {
  Mocha.test("String.indexOfOpt", () => {
    Primitive_object.equal($$String.indexOfOpt("bookseller", "ok"), 2);
    $$String.indexOfOpt("bookseller", "xyz") === undefined;
  });
});

Mocha.describe("String.lastIndexOf", () => {
  Mocha.test("String.lastIndexOf", () => {
    "bookseller".lastIndexOf("ok") === 2;
    "beekeeper".lastIndexOf("ee") === 4;
    "abcdefg".lastIndexOf("xyz") === -1;
  });
});

Mocha.describe("String.lastIndexOfFrom", () => {
  Mocha.test("String.lastIndexOfFrom", () => {
    "bookseller".lastIndexOf("ok", 6) === 2;
    "beekeeper".lastIndexOf("ee", 8) === 4;
    "beekeeper".lastIndexOf("ee", 3) === 1;
    "abcdefg".lastIndexOf("xyz", 4) === -1;
  });
});

Mocha.describe("String.lastIndexOfOpt", () => {
  Mocha.test("String.lastIndexOfOpt", () => {
    Primitive_object.equal($$String.lastIndexOfOpt("bookseller", "ok"), 2);
    Primitive_object.equal($$String.lastIndexOfOpt("beekeeper", "ee"), 4);
    $$String.lastIndexOfOpt("abcdefg", "xyz") === undefined;
  });
});

Mocha.describe("String.length", () => {
  Mocha.test("String.length", () => {});
});

Mocha.describe("String.localeCompare", () => {
  Mocha.test("String.localeCompare", () => {
    "a".localeCompare("c") < 0.0 === true;
    "a".localeCompare("a") === 0.0;
  });
});

Mocha.describe("String.make", () => {
  Mocha.test("String.make", () => {
    String(3.5) === "3.5";
    String([
      1,
      2,
      3
    ]) === "1,2,3";
  });
});

Mocha.describe("String.match", () => {
  Mocha.test("String.match", () => {
    Primitive_object.equal(Primitive_option.fromNullable("The better bats".match(/b[aeiou]t/)), ["bet"]);
    Primitive_object.equal(Primitive_option.fromNullable("The better bats".match(/b[aeiou]t/g)), [
      "bet",
      "bat"
    ]);
    Primitive_object.equal(Primitive_option.fromNullable("Today is 2018-04-05.".match(/(\d+)-(\d+)-(\d+)/)), [
      "2018-04-05",
      "2018",
      "04",
      "05"
    ]);
    Primitive_object.equal(Primitive_option.fromNullable("The optional example".match(/(foo)?(example)/)), [
      "example",
      undefined,
      "example"
    ]);
    Primitive_option.fromNullable("The large container.".match(/b[aeiou]g/)) === undefined;
  });
});

Mocha.describe("String.normalize", () => {
  Mocha.test("String.normalize", () => {
    let string1 = "\u00F1";
    let string2 = "\u006E\u0303";
    if (string1 === string2) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          17605,
          0
        ],
        Error: new Error()
      };
    }
    Pervasives.assertEqual(string1.normalize(), string2.normalize());
  });
});

Mocha.describe("String.normalizeForm", () => {
  Mocha.test("String.normalizeForm", () => {
    let string1 = "\uFB00";
    let string2 = "\u0066\u0066";
    console.log(string1 === string2);
    let normalizeString1 = string1.normalize("NFKD");
    let normalizeString2 = string2.normalize("NFKD");
    console.log(normalizeString1 === normalizeString2);
  });
});

Mocha.describe("String.padEnd", () => {
  Mocha.test("String.padEnd", () => {
    "Hello".padEnd(10, ".") === "Hello.....";
    "abc".padEnd(1, "") === "abc";
  });
});

Mocha.describe("String.padStart", () => {
  Mocha.test("String.padStart", () => {
    "abc".padStart(5, " ") === "  abc";
    "abc".padStart(6, "123465") === "123abc";
  });
});

Mocha.describe("String.repeat", () => {
  Mocha.test("String.repeat", () => {
    "ha".repeat(3) === "hahaha";
    "empty".repeat(0) === "";
  });
});

Mocha.describe("String.replace", () => {
  Mocha.test("String.replace", () => {
    "old string".replace("old", "new") === "new string";
    "the cat and the dog".replace("the", "this") === "this cat and the dog";
  });
});

Mocha.describe("String.replaceAll", () => {
  Mocha.test("String.replaceAll", () => {
    "old old string".replaceAll("old", "new") === "new new string";
    "the cat and the dog".replaceAll("the", "this") === "this cat and this dog";
  });
});

Mocha.describe("String.replaceAllRegExp", () => {
  Mocha.test("String.replaceAllRegExp", () => {
    "vowels be gone".replaceAll(/[aeiou]/g, "x") === "vxwxls bx gxnx";
    "aabbcc".replaceAll(/b/g, ".") === "aa..cc";
  });
});

Mocha.describe("String.replaceRegExp", () => {
  Mocha.test("String.replaceRegExp", () => {
    "vowels be gone".replace(/[aeiou]/g, "x") === "vxwxls bx gxnx";
    "Juan Fulano".replace(/(\w+) (\w+)/, "$2, $1") === "Fulano, Juan";
  });
});

Mocha.describe("String.search", () => {
  Mocha.test("String.search", () => {
    "testing 1 2 3".search(/\d+/) === 8;
    "no numbers".search(/\d+/) === -1;
  });
});

Mocha.describe("String.searchOpt", () => {
  Mocha.test("String.searchOpt", () => {
    Primitive_object.equal($$String.searchOpt("testing 1 2 3", /\d+/), 8);
    $$String.searchOpt("no numbers", /\d+/) === undefined;
  });
});

Mocha.describe("String.slice", () => {
  Mocha.test("String.slice", () => {
    "abcdefg".slice(2, 5) === "cde";
    "abcdefg".slice(2, 9) === "cdefg";
    "abcdefg".slice(-4, -2) === "de";
    "abcdefg".slice(5, 1) === "";
  });
});

Mocha.describe("String.sliceToEnd", () => {
  Mocha.test("String.sliceToEnd", () => {
    "abcdefg".slice(4) === "efg";
    "abcdefg".slice(-2) === "fg";
    "abcdefg".slice(7) === "";
  });
});

Mocha.describe("String.split", () => {
  Mocha.test("String.split", () => {
    Primitive_object.equal("2018-01-02".split("-"), [
      "2018",
      "01",
      "02"
    ]);
    Primitive_object.equal("a,b,,c".split(","), [
      "a",
      "b",
      "",
      "c"
    ]);
    Primitive_object.equal("good::bad as great::awful".split("::"), [
      "good",
      "bad as great",
      "awful"
    ]);
    Primitive_object.equal("has-no-delimiter".split(";"), ["has-no-delimiter"]);
  });
});

Mocha.describe("String.splitAtMost", () => {
  Mocha.test("String.splitAtMost", () => {
    Primitive_object.equal("ant/bee/cat/dog/elk".split("/", 3), [
      "ant",
      "bee",
      "cat"
    ]);
    Primitive_object.equal("ant/bee/cat/dog/elk".split("/", 0), []);
    Primitive_object.equal("ant/bee/cat/dog/elk".split("/", 9), [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ]);
  });
});

Mocha.describe("String.splitByRegExp", () => {
  Mocha.test("String.splitByRegExp", () => {
    Primitive_object.equal("Jan,Feb,Mar".split(/,/), [
      "Jan",
      "Feb",
      "Mar"
    ]);
  });
});

Mocha.describe("String.splitByRegExpAtMost", () => {
  Mocha.test("String.splitByRegExpAtMost", () => {
    Primitive_object.equal("Hello World. How are you doing?".split(/ /, 3), [
      "Hello",
      "World.",
      "How"
    ]);
  });
});

Mocha.describe("String.startsWith", () => {
  Mocha.test("String.startsWith", () => {
    "BuckleScript".startsWith("Buckle") === true;
    "BuckleScript".startsWith("") === true;
    "JavaScript".startsWith("Buckle") === false;
  });
});

Mocha.describe("String.startsWithFrom", () => {
  Mocha.test("String.startsWithFrom", () => {
    "BuckleScript".startsWith("kle", 3) === true;
    "BuckleScript".startsWith("", 3) === true;
    "JavaScript".startsWith("Buckle", 2) === false;
  });
});

Mocha.describe("String.substring", () => {
  Mocha.test("String.substring", () => {
    "playground".substring(3, 6) === "ygr";
    "playground".substring(6, 3) === "ygr";
    "playground".substring(4, 12) === "ground";
  });
});

Mocha.describe("String.substringToEnd", () => {
  Mocha.test("String.substringToEnd", () => {
    "playground".substring(4) === "ground";
    "playground".substring(-3) === "playground";
    "playground".substring(12) === "";
  });
});

Mocha.describe("String.toLowerCase", () => {
  Mocha.test("String.toLowerCase", () => {
    "ABC".toLowerCase() === "abc";
    "ΣΠ".toLowerCase() === "σπ";
    "ΠΣ".toLowerCase() === "πς";
  });
});

Mocha.describe("String.toUpperCase", () => {
  Mocha.test("String.toUpperCase", () => {
    "abc".toUpperCase() === "ABC";
    "Straße".toUpperCase() === "STRASSE";
    "πς".toUpperCase() === "ΠΣ";
  });
});

Mocha.describe("String.trim", () => {
  Mocha.test("String.trim", () => {
    "   abc def   ".trim() === "abc def";
    "\n\r\t abc def \n\n\t\r ".trim() === "abc def";
  });
});

Mocha.describe("String.trimEnd", () => {
  Mocha.test("String.trimEnd", () => {
    "   Hello world!   ".trimEnd() === "   Hello world!";
    "   Hello   world!   ".trimEnd() === "   Hello   world!";
  });
});

Mocha.describe("String.trimStart", () => {
  Mocha.test("String.trimStart", () => {
    "   Hello world!   ".trimStart() === "Hello world!   ";
    "   Hello   world!   ".trimStart() === "Hello   world!   ";
  });
});

Mocha.describe("String.unsafeReplaceRegExpBy0", () => {
  Mocha.test("String.unsafeReplaceRegExpBy0", () => {
    let re = /[aeiou]/g;
    let matchFn = (match, param, param$1) => match.toUpperCase();
    "beautiful vowels".replace(re, matchFn) === "bEAUtIfUl vOwEls";
  });
});

Mocha.describe("String.unsafeReplaceRegExpBy1", () => {
  Mocha.test("String.unsafeReplaceRegExpBy1", () => {
    let re = /(Jony is )\d+/g;
    let matchFn = (param, group1, param$1, param$2) => group1 + "41";
    "Jony is 40".replace(re, matchFn) === "Jony is 41";
  });
});

Mocha.describe("String.unsafeReplaceRegExpBy2", () => {
  Mocha.test("String.unsafeReplaceRegExpBy2", () => {
    let re = /(\d+) times (\d+)/;
    let matchFn = (param, group1, group2, param$1, param$2) => {
      let match = Int.fromString(group1, undefined);
      let match$1 = Int.fromString(group2, undefined);
      if (match !== undefined && match$1 !== undefined) {
        return Math.imul(match, match$1).toString();
      } else {
        return "???";
      }
    };
    "7 times 6".replace(re, matchFn) === "42";
  });
});

Mocha.describe("Type.Classify.classify", () => {
  Mocha.test("Type.Classify.classify", () => {
    let match = Type.Classify.classify(null);
    if (typeof match !== "object" && match === "Null") {
      console.log("Yup, that's null.");
    } else {
      console.log("This doesn't actually appear to be null...");
    }
  });
});

Mocha.describe("Type.typeof", () => {
  Mocha.test("Type.typeof", () => {
    console.log("string");
    let match = "boolean";
    if (match === "boolean") {
      console.log("This is a bool, yay!");
    } else {
      console.log("Oh, not a bool sadly...");
    }
  });
});

/*  Not a pure module */
